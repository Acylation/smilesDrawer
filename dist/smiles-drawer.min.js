(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module){"use strict";var _Mathmin=Math.min,_Mathmax=Math.max;const Drawer=require("./src/Drawer"),Parser=require("./src/Parser"),ReactionParser=require("./src/ReactionParser"),SvgDrawer=require("./src/SvgDrawer"),ReactionDrawer=require("./src/ReactionDrawer");var canUseDOM=!!("undefined"!=typeof window&&window.document&&window.document.createElement),SmilesDrawer={Version:"1.0.0"};SmilesDrawer.Drawer=Drawer,SmilesDrawer.Parser=Parser,SmilesDrawer.SvgDrawer=SvgDrawer,SmilesDrawer.ReactionDrawer=ReactionDrawer,SmilesDrawer.ReactionParser=ReactionParser,SmilesDrawer.clean=function(smiles){return smiles.replace(/[^A-Za-z0-9@\.\+\-\?!\(\)\[\]\{\}/\\=#\$:\*]/g,"")},SmilesDrawer.apply=function(options,selector="canvas[data-smiles]",themeName="light",onError=null){let smilesDrawer=new Drawer(options),elements=document.querySelectorAll(selector);for(var i=0;i<elements.length;i++){let element=elements[i];SmilesDrawer.parse(element.getAttribute("data-smiles"),function(tree){smilesDrawer.draw(tree,element,themeName,!1)},function(err){onError&&onError(err)})}},SmilesDrawer.parse=function(smiles,successCallback,errorCallback){try{successCallback&&successCallback(Parser.parse(smiles))}catch(err){errorCallback&&errorCallback(err)}},SmilesDrawer.parseReaction=function(reactionSmiles,successCallback,errorCallback){try{successCallback&&successCallback(ReactionParser.parse(reactionSmiles))}catch(err){errorCallback&&errorCallback(err)}},canUseDOM&&(window.SmilesDrawer=SmilesDrawer),Array.prototype.fill||Object.defineProperty(Array.prototype,"fill",{value:function(value){if(null==this)throw new TypeError("this is null or not defined");for(var O=Object(this),len=O.length>>>0,start=arguments[1],relativeStart=start>>0,k=0>relativeStart?_Mathmax(len+relativeStart,0):_Mathmin(relativeStart,len),end=arguments[2],relativeEnd=void 0===end?len:end>>0,final=0>relativeEnd?_Mathmax(len+relativeEnd,0):_Mathmin(relativeEnd,len);k<final;)O[k]=value,k++;return O}}),module.exports=SmilesDrawer},{"./src/Drawer":5,"./src/Parser":13,"./src/ReactionDrawer":15,"./src/ReactionParser":16,"./src/SvgDrawer":20}],2:[function(require,module){"use strict";var _Mathmin2=Math.min;class ArrayHelper{static clone(arr){let out=Array.isArray(arr)?[]:{};for(let key in arr){let value=arr[key];out[key]="function"==typeof value.clone?value.clone():"object"==typeof value?ArrayHelper.clone(value):value}return out}static equals(arrA,arrB){if(arrA.length!==arrB.length)return!1;let tmpA=arrA.slice().sort(),tmpB=arrB.slice().sort();for(var i=0;i<tmpA.length;i++)if(tmpA[i]!==tmpB[i])return!1;return!0}static print(arr){if(0==arr.length)return"";let s="(";for(let i=0;i<arr.length;i++)s+=arr[i].id?arr[i].id+", ":arr[i]+", ";return s=s.substring(0,s.length-2),s+")"}static each(arr,callback){for(let i=0;i<arr.length;i++)callback(arr[i])}static get(arr,property,value){for(let i=0;i<arr.length;i++)if(arr[i][property]==value)return arr[i]}static contains(arr,options){if(!options.property&&!options.func){for(let i=0;i<arr.length;i++)if(arr[i]==options.value)return!0;}else if(options.func){for(let i=0;i<arr.length;i++)if(options.func(arr[i]))return!0;}else for(let i=0;i<arr.length;i++)if(arr[i][options.property]==options.value)return!0;return!1}static intersection(arrA,arrB){let intersection=[];for(let i=0;i<arrA.length;i++)for(let j=0;j<arrB.length;j++)arrA[i]===arrB[j]&&intersection.push(arrA[i]);return intersection}static unique(arr){let contains={};return arr.filter(function(i){return!(contains[i]!==void 0)&&(contains[i]=!0)})}static count(arr,value){let count=0;for(let i=0;i<arr.length;i++)arr[i]===value&&count++;return count}static toggle(arr,value){let newArr=[],removed=!1;for(let i=0;i<arr.length;i++)arr[i]===value?removed=!0:newArr.push(arr[i]);return removed||newArr.push(value),newArr}static remove(arr,value){let tmp=[];for(let i=0;i<arr.length;i++)arr[i]!==value&&tmp.push(arr[i]);return tmp}static removeUnique(arr,value){let index=arr.indexOf(value);return-1<index&&arr.splice(index,1),arr}static removeAll(arrA,arrB){return arrA.filter(function(item){return-1===arrB.indexOf(item)})}static merge(arrA,arrB){let arr=Array(arrA.length+arrB.length);for(let i=0;i<arrA.length;i++)arr[i]=arrA[i];for(let i=0;i<arrB.length;i++)arr[arrA.length+i]=arrB[i];return arr}static containsAll(arrA,arrB){let containing=0;for(let i=0;i<arrA.length;i++)for(let j=0;j<arrB.length;j++)arrA[i]===arrB[j]&&containing++;return containing===arrB.length}static sortByAtomicNumberDesc(arr){let map=arr.map(function(e,i){return{index:i,value:e.atomicNumber.split(".").map(Number)}});return map.sort(function(a,b){let min=_Mathmin2(b.value.length,a.value.length),i=0;for(;i<min&&b.value[i]===a.value[i];)i++;return i===min?b.value.length-a.value.length:b.value[i]-a.value[i]}),map.map(function(e){return arr[e.index]})}static deepCopy(arr){let newArr=[];for(let i=0,item;i<arr.length;i++)item=arr[i],newArr[i]=item instanceof Array?ArrayHelper.deepCopy(item):item;return newArr}}module.exports=ArrayHelper},{}],3:[function(require,module){"use strict";const ArrayHelper=require("./ArrayHelper"),Vertex=require("./Vertex"),Ring=require("./Ring");class Atom{constructor(element,bondType="-"){this.element=1===element.length?element.toUpperCase():element,this.drawExplicit=!1,this.ringbonds=[],this.rings=[],this.bondType=bondType,this.branchBond=null,this.isBridge=!1,this.isBridgeNode=!1,this.originalRings=[],this.bridgedRing=null,this.anchoredRings=[],this.bracket=null,this.plane=0,this.attachedPseudoElements={},this.hasAttachedPseudoElements=!1,this.isDrawn=!0,this.isConnectedToRing=!1,this.neighbouringElements=[],this.isPartOfAromaticRing=element!==this.element,this.bondCount=0,this.chirality="",this.isStereoCenter=!1,this.priority=0,this.mainChain=!1,this.hydrogenDirection="down",this.subtreeDepth=1,this.hasHydrogen=!1}addNeighbouringElement(element){this.neighbouringElements.push(element)}attachPseudoElement(element,previousElement,hydrogenCount=0,charge=0){null===hydrogenCount&&(hydrogenCount=0),null===charge&&(charge=0);let key=hydrogenCount+element+charge;this.attachedPseudoElements[key]?this.attachedPseudoElements[key].count+=1:this.attachedPseudoElements[key]={element:element,count:1,hydrogenCount:hydrogenCount,previousElement:previousElement,charge:charge},this.hasAttachedPseudoElements=!0}getAttachedPseudoElements(){let ordered={},that=this;return Object.keys(this.attachedPseudoElements).sort().forEach(function(key){ordered[key]=that.attachedPseudoElements[key]}),ordered}getAttachedPseudoElementsCount(){return Object.keys(this.attachedPseudoElements).length}isHeteroAtom(){return"C"!==this.element&&"H"!==this.element}addAnchoredRing(ringId){ArrayHelper.contains(this.anchoredRings,{value:ringId})||this.anchoredRings.push(ringId)}getRingbondCount(){return this.ringbonds.length}backupRings(){this.originalRings=Array(this.rings.length);for(let i=0;i<this.rings.length;i++)this.originalRings[i]=this.rings[i]}restoreRings(){this.rings=Array(this.originalRings.length);for(let i=0;i<this.originalRings.length;i++)this.rings[i]=this.originalRings[i]}haveCommonRingbond(atomA,atomB){for(let i=0;i<atomA.ringbonds.length;i++)for(let j=0;j<atomB.ringbonds.length;j++)if(atomA.ringbonds[i].id==atomB.ringbonds[j].id)return!0;return!1}neighbouringElementsEqual(arr){if(arr.length!==this.neighbouringElements.length)return!1;arr.sort(),this.neighbouringElements.sort();for(var i=0;i<this.neighbouringElements.length;i++)if(arr[i]!==this.neighbouringElements[i])return!1;return!0}getAtomicNumber(){return Atom.atomicNumbers[this.element]}getMaxBonds(){return Atom.maxBonds[this.element]}static get maxBonds(){return{H:1,C:4,N:3,O:2,P:3,S:2,B:3,F:1,I:1,Cl:1,Br:1}}static get atomicNumbers(){return{H:1,He:2,Li:3,Be:4,B:5,b:5,C:6,c:6,N:7,n:7,O:8,o:8,F:9,Ne:10,Na:11,Mg:12,Al:13,Si:14,P:15,p:15,S:16,s:16,Cl:17,Ar:18,K:19,Ca:20,Sc:21,Ti:22,V:23,Cr:24,Mn:25,Fe:26,Co:27,Ni:28,Cu:29,Zn:30,Ga:31,Ge:32,As:33,Se:34,Br:35,Kr:36,Rb:37,Sr:38,Y:39,Zr:40,Nb:41,Mo:42,Tc:43,Ru:44,Rh:45,Pd:46,Ag:47,Cd:48,In:49,Sn:50,Sb:51,Te:52,I:53,Xe:54,Cs:55,Ba:56,La:57,Ce:58,Pr:59,Nd:60,Pm:61,Sm:62,Eu:63,Gd:64,Tb:65,Dy:66,Ho:67,Er:68,Tm:69,Yb:70,Lu:71,Hf:72,Ta:73,W:74,Re:75,Os:76,Ir:77,Pt:78,Au:79,Hg:80,Tl:81,Pb:82,Bi:83,Po:84,At:85,Rn:86,Fr:87,Ra:88,Ac:89,Th:90,Pa:91,U:92,Np:93,Pu:94,Am:95,Cm:96,Bk:97,Cf:98,Es:99,Fm:100,Md:101,No:102,Lr:103,Rf:104,Db:105,Sg:106,Bh:107,Hs:108,Mt:109,Ds:110,Rg:111,Cn:112,Uut:113,Uuq:114,Uup:115,Uuh:116,Uus:117,Uuo:118}}static get mass(){return{H:1,He:2,Li:3,Be:4,B:5,b:5,C:6,c:6,N:7,n:7,O:8,o:8,F:9,Ne:10,Na:11,Mg:12,Al:13,Si:14,P:15,p:15,S:16,s:16,Cl:17,Ar:18,K:19,Ca:20,Sc:21,Ti:22,V:23,Cr:24,Mn:25,Fe:26,Co:27,Ni:28,Cu:29,Zn:30,Ga:31,Ge:32,As:33,Se:34,Br:35,Kr:36,Rb:37,Sr:38,Y:39,Zr:40,Nb:41,Mo:42,Tc:43,Ru:44,Rh:45,Pd:46,Ag:47,Cd:48,In:49,Sn:50,Sb:51,Te:52,I:53,Xe:54,Cs:55,Ba:56,La:57,Ce:58,Pr:59,Nd:60,Pm:61,Sm:62,Eu:63,Gd:64,Tb:65,Dy:66,Ho:67,Er:68,Tm:69,Yb:70,Lu:71,Hf:72,Ta:73,W:74,Re:75,Os:76,Ir:77,Pt:78,Au:79,Hg:80,Tl:81,Pb:82,Bi:83,Po:84,At:85,Rn:86,Fr:87,Ra:88,Ac:89,Th:90,Pa:91,U:92,Np:93,Pu:94,Am:95,Cm:96,Bk:97,Cf:98,Es:99,Fm:100,Md:101,No:102,Lr:103,Rf:104,Db:105,Sg:106,Bh:107,Hs:108,Mt:109,Ds:110,Rg:111,Cn:112,Uut:113,Uuq:114,Uup:115,Uuh:116,Uus:117,Uuo:118}}}module.exports=Atom},{"./ArrayHelper":2,"./Ring":17,"./Vertex":25}],4:[function(require,module){"use strict";var _NumberMAX_VALUE=Number.MAX_VALUE;const MathHelper=require("./MathHelper"),Vector2=require("./Vector2"),Line=require("./Line"),Vertex=require("./Vertex"),Ring=require("./Ring"),{getChargeText}=require("./UtilityFunctions");module.exports=class{constructor(target,themeManager,options){this.canvas="string"==typeof target||target instanceof String?document.getElementById(target):target,this.ctx=this.canvas.getContext("2d"),this.themeManager=themeManager,this.opts=options,this.drawingWidth=0,this.drawingHeight=0,this.offsetX=0,this.offsetY=0,this.fontLarge=this.opts.fontSizeLarge+"pt Helvetica, Arial, sans-serif",this.fontSmall=this.opts.fontSizeSmall+"pt Helvetica, Arial, sans-serif",this.updateSize(this.opts.width,this.opts.height),this.ctx.font=this.fontLarge,this.hydrogenWidth=this.ctx.measureText("H").width,this.halfHydrogenWidth=this.hydrogenWidth/2,this.halfBondThickness=this.opts.bondThickness/2}updateSize(width,height){this.devicePixelRatio=window.devicePixelRatio||1,this.backingStoreRatio=this.ctx.webkitBackingStorePixelRatio||this.ctx.mozBackingStorePixelRatio||this.ctx.msBackingStorePixelRatio||this.ctx.oBackingStorePixelRatio||this.ctx.backingStorePixelRatio||1,this.ratio=this.devicePixelRatio/this.backingStoreRatio,1===this.ratio?(this.canvas.width=width*this.ratio,this.canvas.height=height*this.ratio):(this.canvas.width=width*this.ratio,this.canvas.height=height*this.ratio,this.canvas.style.width=width+"px",this.canvas.style.height=height+"px",this.ctx.setTransform(this.ratio,0,0,this.ratio,0,0))}setTheme(theme){this.colors=theme}scale(vertices){let maxX=-_NumberMAX_VALUE,maxY=-_NumberMAX_VALUE,minX=_NumberMAX_VALUE,minY=_NumberMAX_VALUE;for(var i=0;i<vertices.length;i++){if(!vertices[i].value.isDrawn)continue;let p=vertices[i].position;maxX<p.x&&(maxX=p.x),maxY<p.y&&(maxY=p.y),minX>p.x&&(minX=p.x),minY>p.y&&(minY=p.y)}var padding=this.opts.padding;maxX+=padding,maxY+=padding,minX-=padding,minY-=padding,this.drawingWidth=maxX-minX,this.drawingHeight=maxY-minY;var scaleX=this.canvas.offsetWidth/this.drawingWidth,scaleY=this.canvas.offsetHeight/this.drawingHeight,scale=scaleX<scaleY?scaleX:scaleY;this.ctx.scale(scale,scale),this.offsetX=-minX,this.offsetY=-minY,scaleX<scaleY?this.offsetY+=this.canvas.offsetHeight/(2*scale)-this.drawingHeight/2:this.offsetX+=this.canvas.offsetWidth/(2*scale)-this.drawingWidth/2}reset(){this.ctx.setTransform(1,0,0,1,0,0)}getColor(key){return key=key.toUpperCase(),key in this.colors?this.colors[key]:this.colors.C}drawCircle(x,y,radius,color,fill=!0,debug=!1,debugText=""){let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY;ctx.save(),ctx.lineWidth=1.5,ctx.beginPath(),ctx.arc(x+offsetX,y+offsetY,radius,0,MathHelper.twoPI,!0),ctx.closePath(),debug?(fill?(ctx.fillStyle="#f00",ctx.fill()):(ctx.strokeStyle="#f00",ctx.stroke()),this.drawDebugText(x,y,debugText)):fill?(ctx.fillStyle=color,ctx.fill()):(ctx.strokeStyle=color,ctx.stroke()),ctx.restore()}drawLine(line,dashed=!1,alpha=1){let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY,shortLine=line.clone().shorten(4),l=shortLine.getLeftVector().clone(),r=shortLine.getRightVector().clone();l.x+=offsetX,l.y+=offsetY,r.x+=offsetX,r.y+=offsetY,dashed||(ctx.save(),ctx.globalCompositeOperation="destination-out",ctx.beginPath(),ctx.moveTo(l.x,l.y),ctx.lineTo(r.x,r.y),ctx.lineCap="round",ctx.lineWidth=this.opts.bondThickness+1.2,ctx.strokeStyle=this.themeManager.getColor("BACKGROUND"),ctx.stroke(),ctx.globalCompositeOperation="source-over",ctx.restore()),l=line.getLeftVector().clone(),r=line.getRightVector().clone(),l.x+=offsetX,l.y+=offsetY,r.x+=offsetX,r.y+=offsetY,ctx.save(),ctx.beginPath(),ctx.moveTo(l.x,l.y),ctx.lineTo(r.x,r.y),ctx.lineCap="round",ctx.lineWidth=this.opts.bondThickness;let gradient=this.ctx.createLinearGradient(l.x,l.y,r.x,r.y);gradient.addColorStop(.4,this.themeManager.getColor(line.getLeftElement())||this.themeManager.getColor("C")),gradient.addColorStop(.6,this.themeManager.getColor(line.getRightElement())||this.themeManager.getColor("C")),dashed&&(ctx.setLineDash([1,1.5]),ctx.lineWidth=this.opts.bondThickness/1.5),1>alpha&&(ctx.globalAlpha=alpha),ctx.strokeStyle=gradient,ctx.stroke(),ctx.restore()}drawWedge(line,width=1){if(isNaN(line.from.x)||isNaN(line.from.y)||isNaN(line.to.x)||isNaN(line.to.y))return;let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY,shortLine=line.clone().shorten(5),l=shortLine.getLeftVector().clone(),r=shortLine.getRightVector().clone();l.x+=offsetX,l.y+=offsetY,r.x+=offsetX,r.y+=offsetY,l=line.getLeftVector().clone(),r=line.getRightVector().clone(),l.x+=offsetX,l.y+=offsetY,r.x+=offsetX,r.y+=offsetY,ctx.save();let normals=Vector2.normals(l,r);normals[0].normalize(),normals[1].normalize();let isRightChiralCenter=line.getRightChiral(),start=l,end=r;isRightChiralCenter&&(start=r,end=l);let t=Vector2.add(start,Vector2.multiplyScalar(normals[0],this.halfBondThickness)),u=Vector2.add(end,Vector2.multiplyScalar(normals[0],1.5+this.halfBondThickness)),v=Vector2.add(end,Vector2.multiplyScalar(normals[1],1.5+this.halfBondThickness)),w=Vector2.add(start,Vector2.multiplyScalar(normals[1],this.halfBondThickness));ctx.beginPath(),ctx.moveTo(t.x,t.y),ctx.lineTo(u.x,u.y),ctx.lineTo(v.x,v.y),ctx.lineTo(w.x,w.y);let gradient=this.ctx.createRadialGradient(r.x,r.y,this.opts.bondLength,r.x,r.y,0);gradient.addColorStop(.4,this.themeManager.getColor(line.getLeftElement())||this.themeManager.getColor("C")),gradient.addColorStop(.6,this.themeManager.getColor(line.getRightElement())||this.themeManager.getColor("C")),ctx.fillStyle=gradient,ctx.fill(),ctx.restore()}drawDashedWedge(line){if(isNaN(line.from.x)||isNaN(line.from.y)||isNaN(line.to.x)||isNaN(line.to.y))return;let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY,l=line.getLeftVector().clone(),r=line.getRightVector().clone();l.x+=offsetX,l.y+=offsetY,r.x+=offsetX,r.y+=offsetY,ctx.save();let normals=Vector2.normals(l,r);normals[0].normalize(),normals[1].normalize();let isRightChiralCenter=line.getRightChiral(),shortLine=line.clone(),start,end,sStart,sEnd;isRightChiralCenter?(start=r,end=l,shortLine.shortenRight(1),sStart=shortLine.getRightVector().clone(),sEnd=shortLine.getLeftVector().clone()):(start=l,end=r,shortLine.shortenLeft(1),sStart=shortLine.getLeftVector().clone(),sEnd=shortLine.getRightVector().clone()),sStart.x+=offsetX,sStart.y+=offsetY,sEnd.x+=offsetX,sEnd.y+=offsetY;let dir=Vector2.subtract(end,start).normalize();ctx.strokeStyle=this.themeManager.getColor("C"),ctx.lineCap="round",ctx.lineWidth=this.opts.bondThickness,ctx.beginPath();let length=line.getLength(),step=1.25/(length/(3*this.opts.bondThickness)),changed=!1;for(var t=0;1>t;t+=step){let to=Vector2.multiplyScalar(dir,t*length),startDash=Vector2.add(start,to),width=1.5*t,dashOffset=Vector2.multiplyScalar(normals[0],width);!changed&&.5<t&&(ctx.stroke(),ctx.beginPath(),ctx.strokeStyle=this.themeManager.getColor(line.getRightElement())||this.themeManager.getColor("C"),changed=!0),startDash.subtract(dashOffset),ctx.moveTo(startDash.x,startDash.y),startDash.add(Vector2.multiplyScalar(dashOffset,2)),ctx.lineTo(startDash.x,startDash.y)}ctx.stroke(),ctx.restore()}drawDebugText(x,y,text){let ctx=this.ctx;ctx.save(),ctx.font="5px Droid Sans, sans-serif",ctx.textAlign="start",ctx.textBaseline="top",ctx.fillStyle="#ff0000",ctx.fillText(text,x+this.offsetX,y+this.offsetY),ctx.restore()}drawBall(x,y,elementName){let ctx=this.ctx;ctx.save(),ctx.beginPath(),ctx.arc(x+this.offsetX,y+this.offsetY,this.opts.bondLength/4.5,0,MathHelper.twoPI,!1),ctx.fillStyle=this.themeManager.getColor(elementName),ctx.fill(),ctx.restore()}drawPoint(x,y,elementName){let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY;ctx.save(),ctx.globalCompositeOperation="destination-out",ctx.beginPath(),ctx.arc(x+offsetX,y+offsetY,1.5,0,MathHelper.twoPI,!0),ctx.closePath(),ctx.fill(),ctx.globalCompositeOperation="source-over",ctx.beginPath(),ctx.arc(x+this.offsetX,y+this.offsetY,.75,0,MathHelper.twoPI,!1),ctx.fillStyle=this.themeManager.getColor(elementName),ctx.fill(),ctx.restore()}drawText(x,y,elementName,hydrogens,direction,isTerminal,charge,isotope,attachedPseudoElement={}){let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY;ctx.save(),ctx.textAlign="start",ctx.textBaseline="alphabetic";let chargeText="",chargeWidth=0;charge&&(chargeText=getChargeText(charge),ctx.font=this.fontSmall,chargeWidth=ctx.measureText(chargeText).width);let isotopeText="0",isotopeWidth=0;0<isotope&&(isotopeText=isotope.toString(),ctx.font=this.fontSmall,isotopeWidth=ctx.measureText(isotopeText).width),1===charge&&"N"===elementName&&attachedPseudoElement.hasOwnProperty("0O")&&attachedPseudoElement.hasOwnProperty("0O-1")&&(attachedPseudoElement={"0O":{element:"O",count:2,hydrogenCount:0,previousElement:"C",charge:""}},charge=0),ctx.font=this.fontLarge,ctx.fillStyle=this.themeManager.getColor("BACKGROUND");let dim=ctx.measureText(elementName);dim.totalWidth=dim.width+chargeWidth,dim.height=parseInt(this.fontLarge,10);let r=dim.width>this.opts.fontSizeLarge?dim.width:this.opts.fontSizeLarge;r/=1.5,ctx.globalCompositeOperation="destination-out",ctx.beginPath(),ctx.arc(x+offsetX,y+offsetY,r,0,MathHelper.twoPI,!0),ctx.closePath(),ctx.fill(),ctx.globalCompositeOperation="source-over";let cursorPos=-dim.width/2,cursorPosLeft=-dim.width/2;ctx.fillStyle=this.themeManager.getColor(elementName),ctx.fillText(elementName,x+offsetX+cursorPos,y+this.opts.halfFontSizeLarge+offsetY),cursorPos+=dim.width,charge&&(ctx.font=this.fontSmall,ctx.fillText(chargeText,x+offsetX+cursorPos,y-this.opts.fifthFontSizeSmall+offsetY),cursorPos+=chargeWidth),0<isotope&&(ctx.font=this.fontSmall,ctx.fillText(isotopeText,x+offsetX+cursorPosLeft-isotopeWidth,y-this.opts.fifthFontSizeSmall+offsetY),cursorPosLeft-=isotopeWidth),ctx.font=this.fontLarge;let hydrogenWidth=0,hydrogenCountWidth=0;if(1===hydrogens){let hx=x+offsetX,hy=y+offsetY+this.opts.halfFontSizeLarge;hydrogenWidth=this.hydrogenWidth,cursorPosLeft-=hydrogenWidth,"left"===direction?hx+=cursorPosLeft:"right"===direction?hx+=cursorPos:"up"===direction&&isTerminal?hx+=cursorPos:"down"===direction&&isTerminal?hx+=cursorPos:"up"!==direction||isTerminal?"down"===direction&&!isTerminal&&(hy+=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,hx-=this.halfHydrogenWidth):(hy-=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,hx-=this.halfHydrogenWidth),ctx.fillText("H",hx,hy),cursorPos+=hydrogenWidth}else if(1<hydrogens){let hx=x+offsetX,hy=y+offsetY+this.opts.halfFontSizeLarge;hydrogenWidth=this.hydrogenWidth,ctx.font=this.fontSmall,hydrogenCountWidth=ctx.measureText(hydrogens).width,cursorPosLeft-=hydrogenWidth+hydrogenCountWidth,"left"===direction?hx+=cursorPosLeft:"right"===direction?hx+=cursorPos:"up"===direction&&isTerminal?hx+=cursorPos:"down"===direction&&isTerminal?hx+=cursorPos:"up"!==direction||isTerminal?"down"===direction&&!isTerminal&&(hy+=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,hx-=this.halfHydrogenWidth):(hy-=this.opts.fontSizeLarge+this.opts.quarterFontSizeLarge,hx-=this.halfHydrogenWidth),ctx.font=this.fontLarge,ctx.fillText("H",hx,hy),ctx.font=this.fontSmall,ctx.fillText(hydrogens,hx+this.halfHydrogenWidth+hydrogenCountWidth,hy+this.opts.fifthFontSizeSmall),cursorPos+=hydrogenWidth+this.halfHydrogenWidth+hydrogenCountWidth}for(let key in attachedPseudoElement){if(!attachedPseudoElement.hasOwnProperty(key))continue;let openParenthesisWidth=0,closeParenthesisWidth=0,element=attachedPseudoElement[key].element,elementCount=attachedPseudoElement[key].count,hydrogenCount=attachedPseudoElement[key].hydrogenCount,elementCharge=attachedPseudoElement[key].charge;ctx.font=this.fontLarge,1<elementCount&&0<hydrogenCount&&(openParenthesisWidth=ctx.measureText("(").width,closeParenthesisWidth=ctx.measureText(")").width);let elementWidth=ctx.measureText(element).width,elementCountWidth=0,elementChargeText="",elementChargeWidth=0;hydrogenWidth=0,0<hydrogenCount&&(hydrogenWidth=this.hydrogenWidth),ctx.font=this.fontSmall,1<elementCount&&(elementCountWidth=ctx.measureText(elementCount).width),0!==elementCharge&&(elementChargeText=getChargeText(elementCharge),elementChargeWidth=ctx.measureText(elementChargeText).width),hydrogenCountWidth=0,1<hydrogenCount&&(hydrogenCountWidth=ctx.measureText(hydrogenCount).width),ctx.font=this.fontLarge;let hx=x+offsetX,hy=y+offsetY+this.opts.halfFontSizeLarge;ctx.fillStyle=this.themeManager.getColor(element),0<elementCount&&(cursorPosLeft-=elementCountWidth),1<elementCount&&0<hydrogenCount&&("left"===direction?(cursorPosLeft-=closeParenthesisWidth,ctx.fillText(")",hx+cursorPosLeft,hy)):(ctx.fillText("(",hx+cursorPos,hy),cursorPos+=openParenthesisWidth)),"left"===direction?(cursorPosLeft-=elementWidth,ctx.fillText(element,hx+cursorPosLeft,hy)):(ctx.fillText(element,hx+cursorPos,hy),cursorPos+=elementWidth),0<hydrogenCount&&("left"===direction?(cursorPosLeft-=hydrogenWidth+hydrogenCountWidth,ctx.fillText("H",hx+cursorPosLeft,hy),1<hydrogenCount&&(ctx.font=this.fontSmall,ctx.fillText(hydrogenCount,hx+cursorPosLeft+hydrogenWidth,hy+this.opts.fifthFontSizeSmall))):(ctx.fillText("H",hx+cursorPos,hy),cursorPos+=hydrogenWidth,1<hydrogenCount&&(ctx.font=this.fontSmall,ctx.fillText(hydrogenCount,hx+cursorPos,hy+this.opts.fifthFontSizeSmall),cursorPos+=hydrogenCountWidth))),ctx.font=this.fontLarge,1<elementCount&&0<hydrogenCount&&("left"===direction?(cursorPosLeft-=openParenthesisWidth,ctx.fillText("(",hx+cursorPosLeft,hy)):(ctx.fillText(")",hx+cursorPos,hy),cursorPos+=closeParenthesisWidth)),ctx.font=this.fontSmall,1<elementCount&&("left"===direction?ctx.fillText(elementCount,hx+cursorPosLeft+openParenthesisWidth+closeParenthesisWidth+hydrogenWidth+hydrogenCountWidth+elementWidth,hy+this.opts.fifthFontSizeSmall):(ctx.fillText(elementCount,hx+cursorPos,hy+this.opts.fifthFontSizeSmall),cursorPos+=elementCountWidth)),0!==elementCharge&&("left"===direction?ctx.fillText(elementChargeText,hx+cursorPosLeft+openParenthesisWidth+closeParenthesisWidth+hydrogenWidth+hydrogenCountWidth+elementWidth,y-this.opts.fifthFontSizeSmall+offsetY):(ctx.fillText(elementChargeText,hx+cursorPos,y-this.opts.fifthFontSizeSmall+offsetY),cursorPos+=elementChargeWidth))}ctx.restore()}getChargeText(charge){return 1===charge?"+":2===charge?"2+":-1===charge?"-":-2===charge?"2-":""}drawDebugPoint(x,y,debugText="",color="#f00"){this.drawCircle(x,y,2,color,!0,!0,debugText)}drawAromaticityRing(ring){let ctx=this.ctx,radius=MathHelper.apothemFromSideLength(this.opts.bondLength,ring.getSize());ctx.save(),ctx.strokeStyle=this.themeManager.getColor("C"),ctx.lineWidth=this.opts.bondThickness,ctx.beginPath(),ctx.arc(ring.center.x+this.offsetX,ring.center.y+this.offsetY,radius-this.opts.bondSpacing,0,2*Math.PI,!0),ctx.closePath(),ctx.stroke(),ctx.restore()}clear(){this.ctx.clearRect(0,0,this.canvas.offsetWidth,this.canvas.offsetHeight)}}},{"./Line":10,"./MathHelper":11,"./Ring":17,"./UtilityFunctions":23,"./Vector2":24,"./Vertex":25}],5:[function(require,module){"use strict";const SvgDrawer=require("./SvgDrawer");module.exports=class{constructor(options){this.svgDrawer=new SvgDrawer(options)}draw(data,target,themeName="light",infoOnly=!1){let canvas=null;canvas="string"==typeof target||target instanceof String?document.getElementById(target):target;let svg=document.createElementNS("http://www.w3.org/2000/svg","svg");svg.setAttribute("xmlns","http://www.w3.org/2000/svg"),svg.setAttributeNS(null,"viewBox","0 0 500 500"),svg.setAttributeNS(null,"width","500"),svg.setAttributeNS(null,"height","500"),svg.setAttributeNS(null,"style","visibility: hidden: position: absolute; left: -1000px"),document.body.appendChild(svg),this.svgDrawer.draw(data,svg,themeName,infoOnly),this.svgDrawer.svgWrapper.toCanvas(canvas,this.svgDrawer.opts.width,this.svgDrawer.opts.height),document.body.removeChild(svg)}getTotalOverlapScore(){return this.svgDrawer.getTotalOverlapScore()}getMolecularFormula(){this.svgDrawer.getMolecularFormula()}}},{"./SvgDrawer":20}],6:[function(require,module){"use strict";var _Mathsin=Math.sin,_Mathcos=Math.cos,_Mathabs=Math.abs,_Mathsqrt=Math.sqrt,_MathPI=Math.PI,_Mathmin3=Math.min,_Mathmax2=Math.max;const MathHelper=require("./MathHelper"),ArrayHelper=require("./ArrayHelper"),Vector2=require("./Vector2"),Line=require("./Line"),Vertex=require("./Vertex"),Edge=require("./Edge"),Atom=require("./Atom"),Ring=require("./Ring"),RingConnection=require("./RingConnection"),CanvasWrapper=require("./CanvasWrapper"),Graph=require("./Graph"),SSSR=require("./SSSR"),ThemeManager=require("./ThemeManager"),Options=require("./Options");module.exports=class{constructor(options){this.graph=null,this.doubleBondConfigCount=0,this.doubleBondConfig=null,this.ringIdCounter=0,this.ringConnectionIdCounter=0,this.canvasWrapper=null,this.totalOverlapScore=0,this.defaultOptions={width:500,height:500,bondThickness:.6,bondLength:15,shortBondLength:.85,bondSpacing:15*.18,atomVisualization:"default",isomeric:!0,debug:!1,terminalCarbons:!1,explicitHydrogens:!0,overlapSensitivity:.42,overlapResolutionIterations:1,compactDrawing:!0,fontSizeLarge:5,fontSizeSmall:3,padding:20,experimentalSSSR:!1,kkThreshold:.1,kkInnerThreshold:.1,kkMaxIteration:2e4,kkMaxInnerIteration:50,kkMaxEnergy:1e9,themes:{dark:{C:"#fff",O:"#e74c3c",N:"#3498db",F:"#27ae60",CL:"#16a085",BR:"#d35400",I:"#8e44ad",P:"#d35400",S:"#f1c40f",B:"#e67e22",SI:"#e67e22",H:"#aaa",BACKGROUND:"#141414"},light:{C:"#222",O:"#e74c3c",N:"#3498db",F:"#27ae60",CL:"#16a085",BR:"#d35400",I:"#8e44ad",P:"#d35400",S:"#f1c40f",B:"#e67e22",SI:"#e67e22",H:"#666",BACKGROUND:"#fff"}}},this.opts=Options.extend(!0,this.defaultOptions,options),this.opts.halfBondSpacing=this.opts.bondSpacing/2,this.opts.bondLengthSq=this.opts.bondLength*this.opts.bondLength,this.opts.halfFontSizeLarge=this.opts.fontSizeLarge/2,this.opts.quarterFontSizeLarge=this.opts.fontSizeLarge/4,this.opts.fifthFontSizeSmall=this.opts.fontSizeSmall/5,this.theme=this.opts.themes.dark}draw(data,target,themeName="light",infoOnly=!1){this.initDraw(data,themeName,infoOnly),this.infoOnly||(this.themeManager=new ThemeManager(this.opts.themes,themeName),this.canvasWrapper=new CanvasWrapper(target,this.themeManager,this.opts)),infoOnly||(this.processGraph(),this.canvasWrapper.scale(this.graph.vertices),this.drawEdges(this.opts.debug),this.drawVertices(this.opts.debug),this.canvasWrapper.reset(),this.opts.debug&&(console.log(this.graph),console.log(this.rings),console.log(this.ringConnections)))}edgeRingCount(edgeId){let edge=this.graph.edges[edgeId],a=this.graph.vertices[edge.sourceId],b=this.graph.vertices[edge.targetId];return _Mathmin3(a.value.rings.length,b.value.rings.length)}getBridgedRings(){let bridgedRings=[];for(var i=0;i<this.rings.length;i++)this.rings[i].isBridged&&bridgedRings.push(this.rings[i]);return bridgedRings}getFusedRings(){let fusedRings=[];for(var i=0;i<this.rings.length;i++)this.rings[i].isFused&&fusedRings.push(this.rings[i]);return fusedRings}getSpiros(){let spiros=[];for(var i=0;i<this.rings.length;i++)this.rings[i].isSpiro&&spiros.push(this.rings[i]);return spiros}printRingInfo(){let result="";for(var i=0;i<this.rings.length;i++){const ring=this.rings[i];result+=ring.id+";",result+=ring.members.length+";",result+=ring.neighbours.length+";",result+=ring.isSpiro?"true;":"false;",result+=ring.isFused?"true;":"false;",result+=ring.isBridged?"true;":"false;",result+=ring.rings.length+";",result+="\n"}return result}rotateDrawing(){let a=0,b=0,maxDist=0;for(var i=0;i<this.graph.vertices.length;i++){let vertexA=this.graph.vertices[i];if(vertexA.value.isDrawn)for(var j=i+1;j<this.graph.vertices.length;j++){let vertexB=this.graph.vertices[j];if(!vertexB.value.isDrawn)continue;let dist=vertexA.position.distanceSq(vertexB.position);dist>maxDist&&(maxDist=dist,a=i,b=j)}}let angle=-Vector2.subtract(this.graph.vertices[a].position,this.graph.vertices[b].position).angle();if(!isNaN(angle)){let remainder=angle%.523599;.2617995>remainder?angle-=remainder:angle+=.523599-remainder;for(var i=0;i<this.graph.vertices.length;i++)i!==b&&this.graph.vertices[i].position.rotateAround(angle,this.graph.vertices[b].position);for(var i=0;i<this.rings.length;i++)this.rings[i].center.rotateAround(angle,this.graph.vertices[b].position)}}getTotalOverlapScore(){return this.totalOverlapScore}getRingCount(){return this.rings.length}hasBridgedRing(){return this.bridgedRing}getHeavyAtomCount(){let hac=0;for(var i=0;i<this.graph.vertices.length;i++)"H"!==this.graph.vertices[i].value.element&&hac++;return hac}getMolecularFormula(){let molecularFormula="",counts=new Map;for(var i=0;i<this.graph.vertices.length;i++){let atom=this.graph.vertices[i].value;if(counts.has(atom.element)?counts.set(atom.element,counts.get(atom.element)+1):counts.set(atom.element,1),atom.bracket&&!atom.bracket.chirality&&(counts.has("H")?counts.set("H",counts.get("H")+atom.bracket.hcount):counts.set("H",atom.bracket.hcount)),!atom.bracket){let nHydrogens=Atom.maxBonds[atom.element]-atom.bondCount;atom.isPartOfAromaticRing&&nHydrogens--,counts.has("H")?counts.set("H",counts.get("H")+nHydrogens):counts.set("H",nHydrogens)}}if(counts.has("C")){let count=counts.get("C");molecularFormula+="C"+(1<count?count:""),counts.delete("C")}if(counts.has("H")){let count=counts.get("H");molecularFormula+="H"+(1<count?count:""),counts.delete("H")}let elements=Object.keys(Atom.atomicNumbers).sort();return elements.map(e=>{if(counts.has(e)){let count=counts.get(e);molecularFormula+=e+(1<count?count:"")}}),molecularFormula}getRingbondType(vertexA,vertexB){if(1>vertexA.value.getRingbondCount()||1>vertexB.value.getRingbondCount())return null;for(var i=0;i<vertexA.value.ringbonds.length;i++)for(var j=0;j<vertexB.value.ringbonds.length;j++)if(vertexA.value.ringbonds[i].id===vertexB.value.ringbonds[j].id)return"-"===vertexA.value.ringbonds[i].bondType?vertexB.value.ringbonds[j].bond:vertexA.value.ringbonds[i].bond;return null}initDraw(data,themeName,infoOnly){this.data=data,this.infoOnly=infoOnly,this.ringIdCounter=0,this.ringConnectionIdCounter=0,this.graph=new Graph(data,this.opts.isomeric),this.rings=[],this.ringConnections=[],this.originalRings=[],this.originalRingConnections=[],this.bridgedRing=!1,this.doubleBondConfigCount=null,this.doubleBondConfig=null,this.initRings(),this.initHydrogens()}processGraph(){this.position(),this.restoreRingInformation(),this.resolvePrimaryOverlaps();let overlapScore=this.getOverlapScore();this.totalOverlapScore=this.getOverlapScore().total;for(var o=0;o<this.opts.overlapResolutionIterations;o++)for(var i=0;i<this.graph.edges.length;i++){let edge=this.graph.edges[i];if(this.isEdgeRotatable(edge)){let subTreeDepthA=this.graph.getTreeDepth(edge.sourceId,edge.targetId),subTreeDepthB=this.graph.getTreeDepth(edge.targetId,edge.sourceId),a=edge.targetId,b=edge.sourceId;subTreeDepthA>subTreeDepthB&&(a=edge.sourceId,b=edge.targetId);let subTreeOverlap=this.getSubtreeOverlapScore(b,a,overlapScore.vertexScores);if(subTreeOverlap.value>this.opts.overlapSensitivity){let vertexA=this.graph.vertices[a],vertexB=this.graph.vertices[b],neighboursB=vertexB.getNeighbours(a);if(1===neighboursB.length){let neighbour=this.graph.vertices[neighboursB[0]],angle=neighbour.position.getRotateAwayFromAngle(vertexA.position,vertexB.position,MathHelper.toRad(120));this.rotateSubtree(neighbour.id,vertexB.id,angle,vertexB.position);let newTotalOverlapScore=this.getOverlapScore().total;newTotalOverlapScore>this.totalOverlapScore?this.rotateSubtree(neighbour.id,vertexB.id,-angle,vertexB.position):this.totalOverlapScore=newTotalOverlapScore}else if(2===neighboursB.length){if(0!==vertexB.value.rings.length&&0!==vertexA.value.rings.length)continue;let neighbourA=this.graph.vertices[neighboursB[0]],neighbourB=this.graph.vertices[neighboursB[1]];if(1===neighbourA.value.rings.length&&1===neighbourB.value.rings.length){if(neighbourA.value.rings[0]!==neighbourB.value.rings[0])continue;}else if(0!==neighbourA.value.rings.length||0!==neighbourB.value.rings.length)continue;else{let angleA=neighbourA.position.getRotateAwayFromAngle(vertexA.position,vertexB.position,MathHelper.toRad(120)),angleB=neighbourB.position.getRotateAwayFromAngle(vertexA.position,vertexB.position,MathHelper.toRad(120));this.rotateSubtree(neighbourA.id,vertexB.id,angleA,vertexB.position),this.rotateSubtree(neighbourB.id,vertexB.id,angleB,vertexB.position);let newTotalOverlapScore=this.getOverlapScore().total;newTotalOverlapScore>this.totalOverlapScore?(this.rotateSubtree(neighbourA.id,vertexB.id,-angleA,vertexB.position),this.rotateSubtree(neighbourB.id,vertexB.id,-angleB,vertexB.position)):this.totalOverlapScore=newTotalOverlapScore}}overlapScore=this.getOverlapScore()}}}this.resolveSecondaryOverlaps(overlapScore.scores),this.opts.isomeric&&this.annotateStereochemistry(),this.opts.compactDrawing&&"default"===this.opts.atomVisualization&&this.initPseudoElements(),this.rotateDrawing()}initRings(){let openBonds=new Map;for(var i=this.graph.vertices.length-1;0<=i;i--){let vertex=this.graph.vertices[i];if(0!==vertex.value.ringbonds.length)for(var j=0;j<vertex.value.ringbonds.length;j++){let ringbondId=vertex.value.ringbonds[j].id,ringbondBond=vertex.value.ringbonds[j].bond;if(!openBonds.has(ringbondId))openBonds.set(ringbondId,[vertex.id,ringbondBond]);else{let sourceVertexId=vertex.id,targetVertexId=openBonds.get(ringbondId)[0],targetRingbondBond=openBonds.get(ringbondId)[1],edge=new Edge(sourceVertexId,targetVertexId,1);edge.setBondType(targetRingbondBond||ringbondBond||"-");let edgeId=this.graph.addEdge(edge),targetVertex=this.graph.vertices[targetVertexId];vertex.addRingbondChild(targetVertexId,j),vertex.value.addNeighbouringElement(targetVertex.value.element),targetVertex.addRingbondChild(sourceVertexId,j),targetVertex.value.addNeighbouringElement(vertex.value.element),vertex.edges.push(edgeId),targetVertex.edges.push(edgeId),openBonds.delete(ringbondId)}}}let rings=SSSR.getRings(this.graph,this.opts.experimentalSSSR);if(null!==rings){for(var i=0;i<rings.length;i++){let ringVertices=[...rings[i]],ringId=this.addRing(new Ring(ringVertices));for(var j=0;j<ringVertices.length;j++)this.graph.vertices[ringVertices[j]].value.rings.push(ringId)}for(var i=0;i<this.rings.length-1;i++)for(var j=i+1;j<this.rings.length;j++){let a=this.rings[i],b=this.rings[j],ringConnection=new RingConnection(a,b);0<ringConnection.vertices.size&&this.addRingConnection(ringConnection)}for(var i=0;i<this.rings.length;i++){let ring=this.rings[i];ring.neighbours=RingConnection.getNeighbours(this.ringConnections,ring.id)}for(var i=0;i<this.rings.length;i++){let ring=this.rings[i];this.graph.vertices[ring.members[0]].value.addAnchoredRing(ring.id)}for(this.backupRingInformation();0<this.rings.length;){let id=-1;for(var i=0;i<this.rings.length;i++){let ring=this.rings[i];this.isPartOfBridgedRing(ring.id)&&!ring.isBridged&&(id=ring.id)}if(-1===id)break;let ring=this.getRing(id),involvedRings=this.getBridgedRingRings(ring.id);this.bridgedRing=!0,this.createBridgedRing(involvedRings,ring.members[0]);for(var i=0;i<involvedRings.length;i++)this.removeRing(involvedRings[i])}}}initHydrogens(){if(!this.opts.explicitHydrogens)for(var i=0;i<this.graph.vertices.length;i++){let vertex=this.graph.vertices[i];if("H"!==vertex.value.element)continue;let neighbour=this.graph.vertices[vertex.neighbours[0]];neighbour.value.hasHydrogen=!0,(!neighbour.value.isStereoCenter||2>neighbour.value.rings.length&&!neighbour.value.bridgedRing||neighbour.value.bridgedRing&&2>neighbour.value.originalRings.length)&&(vertex.value.isDrawn=!1)}}getBridgedRingRings(ringId){let involvedRings=[],that=this,recurse=function(r){let ring=that.getRing(r);involvedRings.push(r);for(var i=0;i<ring.neighbours.length;i++){let n=ring.neighbours[i];-1===involvedRings.indexOf(n)&&n!==r&&RingConnection.isBridge(that.ringConnections,that.graph.vertices,r,n)&&recurse(n)}};return recurse(ringId),ArrayHelper.unique(involvedRings)}isPartOfBridgedRing(ringId){for(var i=0;i<this.ringConnections.length;i++)if(this.ringConnections[i].containsRing(ringId)&&this.ringConnections[i].isBridge(this.graph.vertices))return!0;return!1}createBridgedRing(ringIds,sourceVertexId){let ringMembers=new Set,vertices=new Set,neighbours=new Set;for(var i=0;i<ringIds.length;i++){let ring=this.getRing(ringIds[i]);ring.isPartOfBridged=!0;for(var j=0;j<ring.members.length;j++)vertices.add(ring.members[j]);for(var j=0;j<ring.neighbours.length;j++){let id=ring.neighbours[j];-1===ringIds.indexOf(id)&&neighbours.add(ring.neighbours[j])}}let leftovers=new Set;for(let id of vertices){let vertex=this.graph.vertices[id],intersection=ArrayHelper.intersection(ringIds,vertex.value.rings);1===vertex.value.rings.length||1===intersection.length?ringMembers.add(vertex.id):leftovers.add(vertex.id)}let insideRing=[];for(let id of leftovers){let vertex=this.graph.vertices[id],onRing=!1;for(let j=0;j<vertex.edges.length;j++)1===this.edgeRingCount(vertex.edges[j])&&(onRing=!0);onRing?(vertex.value.isBridgeNode=!0,ringMembers.add(vertex.id)):(vertex.value.isBridge=!0,ringMembers.add(vertex.id))}let ring=new Ring([...ringMembers]);this.addRing(ring),ring.isBridged=!0,ring.neighbours=[...neighbours];for(var i=0;i<ringIds.length;i++)ring.rings.push(this.getRing(ringIds[i]).clone());for(var i=0;i<ring.members.length;i++)this.graph.vertices[ring.members[i]].value.bridgedRing=ring.id;for(var i=0;i<insideRing.length;i++){let vertex=this.graph.vertices[insideRing[i]];vertex.value.rings=[]}for(let id of ringMembers){let vertex=this.graph.vertices[id];vertex.value.rings=ArrayHelper.removeAll(vertex.value.rings,ringIds),vertex.value.rings.push(ring.id)}for(var i=0;i<ringIds.length;i++)for(var j=i+1;j<ringIds.length;j++)this.removeRingConnectionsBetween(ringIds[i],ringIds[j]);for(let id of neighbours){let connections=this.getRingConnections(id,ringIds);for(var j=0;j<connections.length;j++)this.getRingConnection(connections[j]).updateOther(ring.id,id);this.getRing(id).neighbours.push(ring.id)}return ring}areVerticesInSameRing(vertexA,vertexB){for(var i=0;i<vertexA.value.rings.length;i++)for(var j=0;j<vertexB.value.rings.length;j++)if(vertexA.value.rings[i]===vertexB.value.rings[j])return!0;return!1}getCommonRings(vertexA,vertexB){let commonRings=[];for(var i=0;i<vertexA.value.rings.length;i++)for(var j=0;j<vertexB.value.rings.length;j++)vertexA.value.rings[i]==vertexB.value.rings[j]&&commonRings.push(vertexA.value.rings[i]);return commonRings}getLargestOrAromaticCommonRing(vertexA,vertexB){let commonRings=this.getCommonRings(vertexA,vertexB),maxSize=0,largestCommonRing=null;for(var i=0;i<commonRings.length;i++){let ring=this.getRing(commonRings[i]),size=ring.getSize();if(ring.isBenzeneLike(this.graph.vertices))return ring;size>maxSize&&(maxSize=size,largestCommonRing=ring)}return largestCommonRing}getVerticesAt(position,radius,excludeVertexId){let locals=[];for(var i=0;i<this.graph.vertices.length;i++){let vertex=this.graph.vertices[i];if(vertex.id===excludeVertexId||!vertex.positioned)continue;let distance=position.distanceSq(vertex.position);distance<=radius*radius&&locals.push(vertex.id)}return locals}getClosestVertex(vertex){let minDist=99999,minVertex=null;for(var i=0;i<this.graph.vertices.length;i++){let v=this.graph.vertices[i];if(v.id===vertex.id)continue;let distSq=vertex.position.distanceSq(v.position);distSq<minDist&&(minDist=distSq,minVertex=v)}return minVertex}addRing(ring){return ring.id=this.ringIdCounter++,this.rings.push(ring),ring.id}removeRing(ringId){this.rings=this.rings.filter(function(item){return item.id!==ringId}),this.ringConnections=this.ringConnections.filter(function(item){return item.firstRingId!==ringId&&item.secondRingId!==ringId});for(var i=0;i<this.rings.length;i++){let r=this.rings[i];r.neighbours=r.neighbours.filter(function(item){return item!==ringId})}}getRing(ringId){for(var i=0;i<this.rings.length;i++)if(this.rings[i].id==ringId)return this.rings[i]}addRingConnection(ringConnection){return ringConnection.id=this.ringConnectionIdCounter++,this.ringConnections.push(ringConnection),ringConnection.id}removeRingConnection(ringConnectionId){this.ringConnections=this.ringConnections.filter(function(item){return item.id!==ringConnectionId})}removeRingConnectionsBetween(vertexIdA,vertexIdB){let toRemove=[];for(var i=0;i<this.ringConnections.length;i++){let ringConnection=this.ringConnections[i];(ringConnection.firstRingId===vertexIdA&&ringConnection.secondRingId===vertexIdB||ringConnection.firstRingId===vertexIdB&&ringConnection.secondRingId===vertexIdA)&&toRemove.push(ringConnection.id)}for(var i=0;i<toRemove.length;i++)this.removeRingConnection(toRemove[i])}getRingConnection(id){for(var i=0;i<this.ringConnections.length;i++)if(this.ringConnections[i].id==id)return this.ringConnections[i]}getRingConnections(ringId,ringIds){let ringConnections=[];for(var i=0;i<this.ringConnections.length;i++){let rc=this.ringConnections[i];for(var j=0;j<ringIds.length;j++){let id=ringIds[j];(rc.firstRingId===ringId&&rc.secondRingId===id||rc.firstRingId===id&&rc.secondRingId===ringId)&&ringConnections.push(rc.id)}}return ringConnections}getOverlapScore(){let total=0,overlapScores=new Float32Array(this.graph.vertices.length);for(var i=0;i<this.graph.vertices.length;i++)overlapScores[i]=0;for(var i=0,j;i<this.graph.vertices.length;i++)for(j=this.graph.vertices.length;--j>i;){let a=this.graph.vertices[i],b=this.graph.vertices[j];if(!a.value.isDrawn||!b.value.isDrawn)continue;let dist=Vector2.subtract(a.position,b.position).lengthSq();if(dist<this.opts.bondLengthSq){let weighted=(this.opts.bondLength-_Mathsqrt(dist))/this.opts.bondLength;total+=weighted,overlapScores[i]+=weighted,overlapScores[j]+=weighted}}let sortable=[];for(var i=0;i<this.graph.vertices.length;i++)sortable.push({id:i,score:overlapScores[i]});return sortable.sort(function(a,b){return b.score-a.score}),{total:total,scores:sortable,vertexScores:overlapScores}}chooseSide(vertexA,vertexB,sides){let an=vertexA.getNeighbours(vertexB.id),bn=vertexB.getNeighbours(vertexA.id),anCount=an.length,bnCount=bn.length,tn=ArrayHelper.merge(an,bn),sideCount=[0,0];for(var i=0;i<tn.length;i++){let v=this.graph.vertices[tn[i]].position;v.sameSideAs(vertexA.position,vertexB.position,sides[0])?sideCount[0]++:sideCount[1]++}let totalSideCount=[0,0];for(var i=0;i<this.graph.vertices.length;i++){let v=this.graph.vertices[i].position;v.sameSideAs(vertexA.position,vertexB.position,sides[0])?totalSideCount[0]++:totalSideCount[1]++}return{totalSideCount:totalSideCount,totalPosition:totalSideCount[0]>totalSideCount[1]?0:1,sideCount:sideCount,position:sideCount[0]>sideCount[1]?0:1,anCount:anCount,bnCount:bnCount}}setRingCenter(ring){let ringSize=ring.getSize(),total=new Vector2(0,0);for(var i=0;i<ringSize;i++)total.add(this.graph.vertices[ring.members[i]].position);ring.center=total.divide(ringSize)}getSubringCenter(ring,vertex){let rings=vertex.value.originalRings,center=ring.center,smallest=Number.MAX_VALUE;for(var i=0;i<rings.length;i++)for(var j=0;j<ring.rings.length;j++)rings[i]===ring.rings[j].id&&ring.rings[j].getSize()<smallest&&(center=ring.rings[j].center,smallest=ring.rings[j].getSize());return center}drawEdges(debug){let that=this,drawn=Array(this.graph.edges.length);if(drawn.fill(!1),this.graph.traverseBF(0,function(vertex){let edges=that.graph.getEdges(vertex.id);for(var i=0;i<edges.length;i++){let edgeId=edges[i];drawn[edgeId]||(drawn[edgeId]=!0,that.drawEdge(edgeId,debug))}}),!this.bridgedRing)for(var i=0;i<this.rings.length;i++){let ring=this.rings[i];this.isRingAromatic(ring)&&this.canvasWrapper.drawAromaticityRing(ring)}}drawEdge(edgeId,debug){let that=this,edge=this.graph.edges[edgeId],vertexA=this.graph.vertices[edge.sourceId],vertexB=this.graph.vertices[edge.targetId],elementA=vertexA.value.element,elementB=vertexB.value.element;if((!vertexA.value.isDrawn||!vertexB.value.isDrawn)&&"default"===this.opts.atomVisualization)return;let a=vertexA.position,b=vertexB.position,normals=this.getEdgeNormals(edge),sides=ArrayHelper.clone(normals);if(sides[0].multiplyScalar(10).add(a),sides[1].multiplyScalar(10).add(a),"="===edge.bondType||"="===this.getRingbondType(vertexA,vertexB)||edge.isPartOfAromaticRing&&this.bridgedRing){let inRing=this.areVerticesInSameRing(vertexA,vertexB),s=this.chooseSide(vertexA,vertexB,sides);if(inRing){let lcr=this.getLargestOrAromaticCommonRing(vertexA,vertexB),center=lcr.center;normals[0].multiplyScalar(that.opts.bondSpacing),normals[1].multiplyScalar(that.opts.bondSpacing);let line=null;line=center.sameSideAs(vertexA.position,vertexB.position,Vector2.add(a,normals[0]))?new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB):new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB),line.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),edge.isPartOfAromaticRing?this.canvasWrapper.drawLine(line,!0):this.canvasWrapper.drawLine(line),this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB))}else if(edge.center||vertexA.isTerminal()&&vertexB.isTerminal()){normals[0].multiplyScalar(that.opts.halfBondSpacing),normals[1].multiplyScalar(that.opts.halfBondSpacing);let lineA=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB),lineB=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);this.canvasWrapper.drawLine(lineA),this.canvasWrapper.drawLine(lineB)}else if(0==s.anCount&&1<s.bnCount||0==s.bnCount&&1<s.anCount){normals[0].multiplyScalar(that.opts.halfBondSpacing),normals[1].multiplyScalar(that.opts.halfBondSpacing);let lineA=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB),lineB=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);this.canvasWrapper.drawLine(lineA),this.canvasWrapper.drawLine(lineB)}else if(s.sideCount[0]>s.sideCount[1]){normals[0].multiplyScalar(that.opts.bondSpacing),normals[1].multiplyScalar(that.opts.bondSpacing);let line=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB);line.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(line),this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB))}else if(s.sideCount[0]<s.sideCount[1]){normals[0].multiplyScalar(that.opts.bondSpacing),normals[1].multiplyScalar(that.opts.bondSpacing);let line=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);line.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(line),this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB))}else if(s.totalSideCount[0]>s.totalSideCount[1]){normals[0].multiplyScalar(that.opts.bondSpacing),normals[1].multiplyScalar(that.opts.bondSpacing);let line=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB);line.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(line),this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB))}else if(s.totalSideCount[0]<=s.totalSideCount[1]){normals[0].multiplyScalar(that.opts.bondSpacing),normals[1].multiplyScalar(that.opts.bondSpacing);let line=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);line.shorten(this.opts.bondLength-this.opts.shortBondLength*this.opts.bondLength),this.canvasWrapper.drawLine(line),this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB))}else;}else if("#"===edge.bondType){normals[0].multiplyScalar(that.opts.bondSpacing/1.5),normals[1].multiplyScalar(that.opts.bondSpacing/1.5);let lineA=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB),lineB=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);this.canvasWrapper.drawLine(lineA),this.canvasWrapper.drawLine(lineB),this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB))}else if("."===edge.bondType);else{let isChiralCenterA=vertexA.value.isStereoCenter,isChiralCenterB=vertexB.value.isStereoCenter;"up"===edge.wedge?this.canvasWrapper.drawWedge(new Line(a,b,elementA,elementB,isChiralCenterA,isChiralCenterB)):"down"===edge.wedge?this.canvasWrapper.drawDashedWedge(new Line(a,b,elementA,elementB,isChiralCenterA,isChiralCenterB)):this.canvasWrapper.drawLine(new Line(a,b,elementA,elementB,isChiralCenterA,isChiralCenterB))}if(debug){let midpoint=Vector2.midpoint(a,b);this.canvasWrapper.drawDebugText(midpoint.x,midpoint.y,"e: "+edgeId)}}drawVertices(debug){for(var i=this.graph.vertices.length,i=0;i<this.graph.vertices.length;i++){let vertex=this.graph.vertices[i],atom=vertex.value,charge=0,isotope=0,bondCount=vertex.value.bondCount,element=atom.element,hydrogens=Atom.maxBonds[element]-bondCount,dir=vertex.getTextDirection(this.graph.vertices),isTerminal=!!(this.opts.terminalCarbons||"C"!==element||atom.hasAttachedPseudoElements)&&vertex.isTerminal(),isCarbon="C"===atom.element;if("N"===atom.element&&atom.isPartOfAromaticRing&&(hydrogens=0),atom.bracket&&(hydrogens=atom.bracket.hcount,charge=atom.bracket.charge,isotope=atom.bracket.isotope),"allballs"===this.opts.atomVisualization)this.canvasWrapper.drawBall(vertex.position.x,vertex.position.y,element);else if(atom.isDrawn&&(!isCarbon||atom.drawExplicit||isTerminal||atom.hasAttachedPseudoElements)||1===this.graph.vertices.length)"default"===this.opts.atomVisualization?this.canvasWrapper.drawText(vertex.position.x,vertex.position.y,element,hydrogens,dir,isTerminal,charge,isotope,atom.getAttachedPseudoElements()):"balls"===this.opts.atomVisualization&&this.canvasWrapper.drawBall(vertex.position.x,vertex.position.y,element);else if(2===vertex.getNeighbourCount()&&!0==vertex.forcePositioned){let a=this.graph.vertices[vertex.neighbours[0]].position,b=this.graph.vertices[vertex.neighbours[1]].position,angle=Vector2.threePointangle(vertex.position,a,b);.1>_Mathabs(_MathPI-angle)&&this.canvasWrapper.drawPoint(vertex.position.x,vertex.position.y,element)}if(debug){let value="v: "+vertex.id+" "+ArrayHelper.print(atom.ringbonds);this.canvasWrapper.drawDebugText(vertex.position.x,vertex.position.y,value)}else;}if(this.opts.debug)for(var i=0;i<this.rings.length;i++){let center=this.rings[i].center;this.canvasWrapper.drawDebugPoint(center.x,center.y,"r: "+this.rings[i].id)}}position(){let startVertex=null;for(var i=0;i<this.graph.vertices.length;i++)if(null!==this.graph.vertices[i].value.bridgedRing){startVertex=this.graph.vertices[i];break}for(var i=0;i<this.rings.length;i++)this.rings[i].isBridged&&(startVertex=this.graph.vertices[this.rings[i].members[0]]);0<this.rings.length&&null===startVertex&&(startVertex=this.graph.vertices[this.rings[0].members[0]]),null===startVertex&&(startVertex=this.graph.vertices[0]),this.createNextBond(startVertex,null,0)}backupRingInformation(){this.originalRings=[],this.originalRingConnections=[];for(var i=0;i<this.rings.length;i++)this.originalRings.push(this.rings[i]);for(var i=0;i<this.ringConnections.length;i++)this.originalRingConnections.push(this.ringConnections[i]);for(var i=0;i<this.graph.vertices.length;i++)this.graph.vertices[i].value.backupRings()}restoreRingInformation(){let bridgedRings=this.getBridgedRings();this.rings=[],this.ringConnections=[];for(var i=0;i<bridgedRings.length;i++){let bridgedRing=bridgedRings[i];for(var j=0;j<bridgedRing.rings.length;j++){let ring=bridgedRing.rings[j];this.originalRings[ring.id].center=ring.center}}for(var i=0;i<this.originalRings.length;i++)this.rings.push(this.originalRings[i]);for(var i=0;i<this.originalRingConnections.length;i++)this.ringConnections.push(this.originalRingConnections[i]);for(var i=0;i<this.graph.vertices.length;i++)this.graph.vertices[i].value.restoreRings()}createRing(ring,center=null,startVertex=null,previousVertex=null){if(ring.positioned)return;center=center?center:new Vector2(0,0);let orderedNeighbours=ring.getOrderedNeighbours(this.ringConnections),startingAngle=startVertex?Vector2.subtract(startVertex.position,center).angle():0,radius=MathHelper.polyCircumradius(this.opts.bondLength,ring.getSize()),angle=MathHelper.centralAngle(ring.getSize());ring.centralAngle=angle;let a=startingAngle,that=this,startVertexId=startVertex?startVertex.id:null;if(-1===ring.members.indexOf(startVertexId)&&(startVertex&&(startVertex.positioned=!1),startVertexId=ring.members[0]),ring.isBridged){this.graph.kkLayout(ring.members.slice(),center,startVertex.id,ring,this.opts.bondLength,this.opts.kkThreshold,this.opts.kkInnerThreshold,this.opts.kkMaxIteration,this.opts.kkMaxInnerIteration,this.opts.kkMaxEnergy),ring.positioned=!0,this.setRingCenter(ring),center=ring.center;for(var i=0;i<ring.rings.length;i++)this.setRingCenter(ring.rings[i])}else ring.eachMember(this.graph.vertices,function(v){let vertex=that.graph.vertices[v];vertex.positioned||vertex.setPosition(center.x+_Mathcos(a)*radius,center.y+_Mathsin(a)*radius),a+=angle,(!ring.isBridged||3>ring.rings.length)&&(vertex.angle=a,vertex.positioned=!0)},startVertexId,previousVertex?previousVertex.id:null);ring.positioned=!0,ring.center=center;for(var i=0;i<orderedNeighbours.length;i++){let neighbour=this.getRing(orderedNeighbours[i].neighbour);if(neighbour.positioned)continue;let vertices=RingConnection.getVertices(this.ringConnections,ring.id,neighbour.id);if(2===vertices.length){ring.isFused=!0,neighbour.isFused=!0;let vertexA=this.graph.vertices[vertices[0]],vertexB=this.graph.vertices[vertices[1]],midpoint=Vector2.midpoint(vertexA.position,vertexB.position),normals=Vector2.normals(vertexA.position,vertexB.position);normals[0].normalize(),normals[1].normalize();let r=MathHelper.polyCircumradius(this.opts.bondLength,neighbour.getSize()),apothem=MathHelper.apothem(r,neighbour.getSize());normals[0].multiplyScalar(apothem).add(midpoint),normals[1].multiplyScalar(apothem).add(midpoint);let nextCenter=normals[0];Vector2.subtract(center,normals[1]).lengthSq()>Vector2.subtract(center,normals[0]).lengthSq()&&(nextCenter=normals[1]);let posA=Vector2.subtract(vertexA.position,nextCenter),posB=Vector2.subtract(vertexB.position,nextCenter);-1===posA.clockwise(posB)?!neighbour.positioned&&this.createRing(neighbour,nextCenter,vertexA,vertexB):!neighbour.positioned&&this.createRing(neighbour,nextCenter,vertexB,vertexA)}else if(1===vertices.length){ring.isSpiro=!0,neighbour.isSpiro=!0;let vertexA=this.graph.vertices[vertices[0]],nextCenter=Vector2.subtract(center,vertexA.position);nextCenter.invert(),nextCenter.normalize();let r=MathHelper.polyCircumradius(this.opts.bondLength,neighbour.getSize());nextCenter.multiplyScalar(r),nextCenter.add(vertexA.position),neighbour.positioned||this.createRing(neighbour,nextCenter,vertexA)}}for(var i=0;i<ring.members.length;i++){let ringMember=this.graph.vertices[ring.members[i]],ringMemberNeighbours=ringMember.neighbours;for(var j=0;j<ringMemberNeighbours.length;j++){let v=this.graph.vertices[ringMemberNeighbours[j]];v.positioned||(v.value.isConnectedToRing=!0,this.createNextBond(v,ringMember,0))}}}rotateSubtree(vertexId,parentVertexId,angle,center){let that=this;this.graph.traverseTree(vertexId,parentVertexId,function(vertex){vertex.position.rotateAround(angle,center);for(var i=0;i<vertex.value.anchoredRings.length;i++){let ring=that.rings[vertex.value.anchoredRings[i]];ring&&ring.center.rotateAround(angle,center)}})}getSubtreeOverlapScore(vertexId,parentVertexId,vertexOverlapScores){let that=this,score=0,center=new Vector2(0,0),count=0;return this.graph.traverseTree(vertexId,parentVertexId,function(vertex){if(vertex.value.isDrawn){let s=vertexOverlapScores[vertex.id];s>that.opts.overlapSensitivity&&(score+=s,count++);let position=that.graph.vertices[vertex.id].position.clone();position.multiplyScalar(s),center.add(position)}}),center.divide(score),{value:score/count,center:center}}getCurrentCenterOfMass(){let total=new Vector2(0,0),count=0;for(var i=0;i<this.graph.vertices.length;i++){let vertex=this.graph.vertices[i];vertex.positioned&&(total.add(vertex.position),count++)}return total.divide(count)}getCurrentCenterOfMassInNeigbourhood(vec,r=2*this.opts.bondLength){let total=new Vector2(0,0),count=0;for(var i=0;i<this.graph.vertices.length;i++){let vertex=this.graph.vertices[i];vertex.positioned&&vec.distanceSq(vertex.position)<r*r&&(total.add(vertex.position),count++)}return total.divide(count)}resolvePrimaryOverlaps(){let overlaps=[],done=Array(this.graph.vertices.length);for(var i=0;i<this.rings.length;i++){let ring=this.rings[i];for(var j=0;j<ring.members.length;j++){let vertex=this.graph.vertices[ring.members[j]];if(done[vertex.id])continue;done[vertex.id]=!0;let nonRingNeighbours=this.getNonRingNeighbours(vertex.id);if(1<nonRingNeighbours.length){let rings=[];for(var k=0;k<vertex.value.rings.length;k++)rings.push(vertex.value.rings[k]);overlaps.push({common:vertex,rings:rings,vertices:nonRingNeighbours})}else if(1===nonRingNeighbours.length&&2===vertex.value.rings.length){let rings=[];for(var k=0;k<vertex.value.rings.length;k++)rings.push(vertex.value.rings[k]);overlaps.push({common:vertex,rings:rings,vertices:nonRingNeighbours})}}}for(var i=0;i<overlaps.length;i++){let overlap=overlaps[i];if(2===overlap.vertices.length){let a=overlap.vertices[0],b=overlap.vertices[1];if(!a.value.isDrawn||!b.value.isDrawn)continue;let angle=(2*_MathPI-this.getRing(overlap.rings[0]).getAngle())/6;this.rotateSubtree(a.id,overlap.common.id,angle,overlap.common.position),this.rotateSubtree(b.id,overlap.common.id,-angle,overlap.common.position);let overlapScore=this.getOverlapScore(),subTreeOverlapA=this.getSubtreeOverlapScore(a.id,overlap.common.id,overlapScore.vertexScores),subTreeOverlapB=this.getSubtreeOverlapScore(b.id,overlap.common.id,overlapScore.vertexScores),total=subTreeOverlapA.value+subTreeOverlapB.value;this.rotateSubtree(a.id,overlap.common.id,-2*angle,overlap.common.position),this.rotateSubtree(b.id,overlap.common.id,2*angle,overlap.common.position),overlapScore=this.getOverlapScore(),subTreeOverlapA=this.getSubtreeOverlapScore(a.id,overlap.common.id,overlapScore.vertexScores),subTreeOverlapB=this.getSubtreeOverlapScore(b.id,overlap.common.id,overlapScore.vertexScores),subTreeOverlapA.value+subTreeOverlapB.value>total&&(this.rotateSubtree(a.id,overlap.common.id,2*angle,overlap.common.position),this.rotateSubtree(b.id,overlap.common.id,-2*angle,overlap.common.position))}else 1!==overlap.vertices.length||2!==overlap.rings.length}}resolveSecondaryOverlaps(scores){for(var i=0;i<scores.length;i++)if(scores[i].score>this.opts.overlapSensitivity){let vertex=this.graph.vertices[scores[i].id];if(vertex.isTerminal()){let closest=this.getClosestVertex(vertex);if(closest){let closestPosition=null;closestPosition=closest.isTerminal()?0===closest.id?this.graph.vertices[1].position:closest.previousPosition:0===closest.id?this.graph.vertices[1].position:closest.position;let vertexPreviousPosition=0===vertex.id?this.graph.vertices[1].position:vertex.previousPosition;vertex.position.rotateAwayFrom(closestPosition,vertexPreviousPosition,MathHelper.toRad(20))}}}}getLastVertexWithAngle(vertexId){let angle=0,vertex=null;for(;!angle&&vertexId;)vertex=this.graph.vertices[vertexId],angle=vertex.angle,vertexId=vertex.parentVertexId;return vertex}createNextBond(vertex,previousVertex=null,angle=0,originShortest=!1,skipPositioning=!1){if(vertex.positioned&&!skipPositioning)return;let doubleBondConfigSet=!1;if(previousVertex){let edge=this.graph.getEdge(vertex.id,previousVertex.id);("/"===edge.bondType||"\\"===edge.bondType)&&1==++this.doubleBondConfigCount%2&&null===this.doubleBondConfig&&(this.doubleBondConfig=edge.bondType,doubleBondConfigSet=!0,null===previousVertex.parentVertexId&&vertex.value.branchBond&&("/"===this.doubleBondConfig?this.doubleBondConfig="\\":"\\"===this.doubleBondConfig&&(this.doubleBondConfig="/")))}if(!skipPositioning)if(!previousVertex){let dummy=new Vector2(this.opts.bondLength,0);dummy.rotate(MathHelper.toRad(-60)),vertex.previousPosition=dummy,vertex.setPosition(this.opts.bondLength,0),vertex.angle=MathHelper.toRad(-60),null===vertex.value.bridgedRing&&(vertex.positioned=!0)}else if(0<previousVertex.value.rings.length){let neighbours=previousVertex.neighbours,joinedVertex=null,pos=new Vector2(0,0);if(null===previousVertex.value.bridgedRing&&1<previousVertex.value.rings.length)for(var i=0;i<neighbours.length;i++){let neighbour=this.graph.vertices[neighbours[i]];if(ArrayHelper.containsAll(neighbour.value.rings,previousVertex.value.rings)){joinedVertex=neighbour;break}}if(null===joinedVertex){for(var i=0;i<neighbours.length;i++){let v=this.graph.vertices[neighbours[i]];v.positioned&&this.areVerticesInSameRing(v,previousVertex)&&pos.add(Vector2.subtract(v.position,previousVertex.position))}pos.invert().normalize().multiplyScalar(this.opts.bondLength).add(previousVertex.position)}else pos=joinedVertex.position.clone().rotateAround(Math.PI,previousVertex.position);vertex.previousPosition=previousVertex.position,vertex.setPositionFromVector(pos),vertex.positioned=!0}else{let v=new Vector2(this.opts.bondLength,0);v.rotate(angle),v.add(previousVertex.position),vertex.setPositionFromVector(v),vertex.previousPosition=previousVertex.position,vertex.positioned=!0}if(null!==vertex.value.bridgedRing){let nextRing=this.getRing(vertex.value.bridgedRing);if(!nextRing.positioned){let nextCenter=Vector2.subtract(vertex.previousPosition,vertex.position);nextCenter.invert(),nextCenter.normalize();let r=MathHelper.polyCircumradius(this.opts.bondLength,nextRing.members.length);nextCenter.multiplyScalar(r),nextCenter.add(vertex.position),this.createRing(nextRing,nextCenter,vertex)}}else if(0<vertex.value.rings.length){let nextRing=this.getRing(vertex.value.rings[0]);if(!nextRing.positioned){let nextCenter=Vector2.subtract(vertex.previousPosition,vertex.position);nextCenter.invert(),nextCenter.normalize();let r=MathHelper.polyCircumradius(this.opts.bondLength,nextRing.getSize());nextCenter.multiplyScalar(r),nextCenter.add(vertex.position),this.createRing(nextRing,nextCenter,vertex)}}else{let isStereoCenter=vertex.value.isStereoCenter,tmpNeighbours=vertex.getNeighbours(),neighbours=[];for(var i=0;i<tmpNeighbours.length;i++)this.graph.vertices[tmpNeighbours[i]].value.isDrawn&&neighbours.push(tmpNeighbours[i]);previousVertex&&(neighbours=ArrayHelper.remove(neighbours,previousVertex.id));let previousAngle=vertex.getAngle();if(1===neighbours.length){let nextVertex=this.graph.vertices[neighbours[0]];if("#"===vertex.value.bondType||previousVertex&&"#"===previousVertex.value.bondType||"="===vertex.value.bondType&&previousVertex&&0===previousVertex.value.rings.length&&"="===previousVertex.value.bondType&&"-"!==vertex.value.branchBond){if(vertex.value.drawExplicit=!1,previousVertex){let straightEdge1=this.graph.getEdge(vertex.id,previousVertex.id);straightEdge1.center=!0}let straightEdge2=this.graph.getEdge(vertex.id,nextVertex.id);straightEdge2.center=!0,("#"===vertex.value.bondType||previousVertex&&"#"===previousVertex.value.bondType)&&(nextVertex.angle=0),nextVertex.drawExplicit=!0,this.createNextBond(nextVertex,vertex,previousAngle+nextVertex.angle)}else if(previousVertex&&0<previousVertex.value.rings.length){let proposedAngleA=MathHelper.toRad(60),proposedAngleB=-proposedAngleA,proposedVectorA=new Vector2(this.opts.bondLength,0),proposedVectorB=new Vector2(this.opts.bondLength,0);proposedVectorA.rotate(proposedAngleA).add(vertex.position),proposedVectorB.rotate(proposedAngleB).add(vertex.position);let centerOfMass=this.getCurrentCenterOfMass(),distanceA=proposedVectorA.distanceSq(centerOfMass),distanceB=proposedVectorB.distanceSq(centerOfMass);nextVertex.angle=distanceA<distanceB?proposedAngleB:proposedAngleA,this.createNextBond(nextVertex,vertex,previousAngle+nextVertex.angle)}else{let a=vertex.angle;if(previousVertex&&3<previousVertex.neighbours.length)a=0<a?_Mathmin3(1.0472,a):0>a?_Mathmax2(-1.0472,a):1.0472;else if(!a){let v=this.getLastVertexWithAngle(vertex.id);a=v.angle,a||(a=1.0472)}if(previousVertex&&!doubleBondConfigSet){let bondType=this.graph.getEdge(vertex.id,nextVertex.id).bondType;"/"===bondType?("/"===this.doubleBondConfig||"\\"===this.doubleBondConfig&&(a=-a),this.doubleBondConfig=null):"\\"===bondType&&("/"===this.doubleBondConfig?a=-a:"\\"===this.doubleBondConfig,this.doubleBondConfig=null)}nextVertex.angle=originShortest?a:-a,this.createNextBond(nextVertex,vertex,previousAngle+nextVertex.angle)}}else if(2===neighbours.length){let a=vertex.angle;a||(a=1.0472);let subTreeDepthA=this.graph.getTreeDepth(neighbours[0],vertex.id),subTreeDepthB=this.graph.getTreeDepth(neighbours[1],vertex.id),l=this.graph.vertices[neighbours[0]],r=this.graph.vertices[neighbours[1]];l.value.subtreeDepth=subTreeDepthA,r.value.subtreeDepth=subTreeDepthB;let subTreeDepthC=this.graph.getTreeDepth(previousVertex?previousVertex.id:null,vertex.id);previousVertex&&(previousVertex.value.subtreeDepth=subTreeDepthC);let cis=0,trans=1;"C"===r.value.element&&"C"!==l.value.element&&1<subTreeDepthB&&5>subTreeDepthA?(cis=1,trans=0):"C"!==r.value.element&&"C"===l.value.element&&1<subTreeDepthA&&5>subTreeDepthB?(cis=0,trans=1):subTreeDepthB>subTreeDepthA&&(cis=1,trans=0);let cisVertex=this.graph.vertices[neighbours[cis]],transVertex=this.graph.vertices[neighbours[trans]],edgeCis=this.graph.getEdge(vertex.id,cisVertex.id),edgeTrans=this.graph.getEdge(vertex.id,transVertex.id),originShortest=!1;subTreeDepthC<subTreeDepthA&&subTreeDepthC<subTreeDepthB&&(originShortest=!0),transVertex.angle=a,cisVertex.angle=-a,"\\"===this.doubleBondConfig?"\\"===transVertex.value.branchBond&&(transVertex.angle=-a,cisVertex.angle=a):"/"===this.doubleBondConfig&&"/"===transVertex.value.branchBond&&(transVertex.angle=-a,cisVertex.angle=a),this.createNextBond(transVertex,vertex,previousAngle+transVertex.angle,originShortest),this.createNextBond(cisVertex,vertex,previousAngle+cisVertex.angle,originShortest)}else if(3===neighbours.length){let d1=this.graph.getTreeDepth(neighbours[0],vertex.id),d2=this.graph.getTreeDepth(neighbours[1],vertex.id),d3=this.graph.getTreeDepth(neighbours[2],vertex.id),s=this.graph.vertices[neighbours[0]],l=this.graph.vertices[neighbours[1]],r=this.graph.vertices[neighbours[2]];s.value.subtreeDepth=d1,l.value.subtreeDepth=d2,r.value.subtreeDepth=d3,d2>d1&&d2>d3?(s=this.graph.vertices[neighbours[1]],l=this.graph.vertices[neighbours[0]],r=this.graph.vertices[neighbours[2]]):d3>d1&&d3>d2&&(s=this.graph.vertices[neighbours[2]],l=this.graph.vertices[neighbours[0]],r=this.graph.vertices[neighbours[1]]),previousVertex&&1>previousVertex.value.rings.length&&1>s.value.rings.length&&1>l.value.rings.length&&1>r.value.rings.length&&1===this.graph.getTreeDepth(l.id,vertex.id)&&1===this.graph.getTreeDepth(r.id,vertex.id)&&1<this.graph.getTreeDepth(s.id,vertex.id)?(s.angle=-vertex.angle,0<=vertex.angle?(l.angle=MathHelper.toRad(30),r.angle=MathHelper.toRad(90)):(l.angle=-MathHelper.toRad(30),r.angle=-MathHelper.toRad(90)),this.createNextBond(s,vertex,previousAngle+s.angle),this.createNextBond(l,vertex,previousAngle+l.angle),this.createNextBond(r,vertex,previousAngle+r.angle)):(s.angle=0,l.angle=MathHelper.toRad(90),r.angle=-MathHelper.toRad(90),this.createNextBond(s,vertex,previousAngle+s.angle),this.createNextBond(l,vertex,previousAngle+l.angle),this.createNextBond(r,vertex,previousAngle+r.angle))}else if(4===neighbours.length){let d1=this.graph.getTreeDepth(neighbours[0],vertex.id),d2=this.graph.getTreeDepth(neighbours[1],vertex.id),d3=this.graph.getTreeDepth(neighbours[2],vertex.id),d4=this.graph.getTreeDepth(neighbours[3],vertex.id),w=this.graph.vertices[neighbours[0]],x=this.graph.vertices[neighbours[1]],y=this.graph.vertices[neighbours[2]],z=this.graph.vertices[neighbours[3]];w.value.subtreeDepth=d1,x.value.subtreeDepth=d2,y.value.subtreeDepth=d3,z.value.subtreeDepth=d4,d2>d1&&d2>d3&&d2>d4?(w=this.graph.vertices[neighbours[1]],x=this.graph.vertices[neighbours[0]],y=this.graph.vertices[neighbours[2]],z=this.graph.vertices[neighbours[3]]):d3>d1&&d3>d2&&d3>d4?(w=this.graph.vertices[neighbours[2]],x=this.graph.vertices[neighbours[0]],y=this.graph.vertices[neighbours[1]],z=this.graph.vertices[neighbours[3]]):d4>d1&&d4>d2&&d4>d3&&(w=this.graph.vertices[neighbours[3]],x=this.graph.vertices[neighbours[0]],y=this.graph.vertices[neighbours[1]],z=this.graph.vertices[neighbours[2]]),w.angle=-MathHelper.toRad(36),x.angle=MathHelper.toRad(36),y.angle=-MathHelper.toRad(108),z.angle=MathHelper.toRad(108),this.createNextBond(w,vertex,previousAngle+w.angle),this.createNextBond(x,vertex,previousAngle+x.angle),this.createNextBond(y,vertex,previousAngle+y.angle),this.createNextBond(z,vertex,previousAngle+z.angle)}}}getCommonRingbondNeighbour(vertex){let neighbours=vertex.neighbours;for(var i=0;i<neighbours.length;i++){let neighbour=this.graph.vertices[neighbours[i]];if(ArrayHelper.containsAll(neighbour.value.rings,vertex.value.rings))return neighbour}return null}isPointInRing(vec){for(var i=0;i<this.rings.length;i++){let ring=this.rings[i];if(!ring.positioned)continue;let radius=MathHelper.polyCircumradius(this.opts.bondLength,ring.getSize());if(vec.distanceSq(ring.center)<radius*radius)return!0}return!1}isEdgeInRing(edge){let source=this.graph.vertices[edge.sourceId],target=this.graph.vertices[edge.targetId];return this.areVerticesInSameRing(source,target)}isEdgeRotatable(edge){let vertexA=this.graph.vertices[edge.sourceId],vertexB=this.graph.vertices[edge.targetId];return!("-"!==edge.bondType)&&!(vertexA.isTerminal()||vertexB.isTerminal())&&!(0<vertexA.value.rings.length&&0<vertexB.value.rings.length&&this.areVerticesInSameRing(vertexA,vertexB))}isRingAromatic(ring){for(var i=0;i<ring.members.length;i++){let vertex=this.graph.vertices[ring.members[i]];if(!vertex.value.isPartOfAromaticRing)return!1}return!0}getEdgeNormals(edge){let v1=this.graph.vertices[edge.sourceId].position,v2=this.graph.vertices[edge.targetId].position,normals=Vector2.units(v1,v2);return normals}getNonRingNeighbours(vertexId){let nrneighbours=[],vertex=this.graph.vertices[vertexId],neighbours=vertex.neighbours;for(var i=0;i<neighbours.length;i++){let neighbour=this.graph.vertices[neighbours[i]],nIntersections=ArrayHelper.intersection(vertex.value.rings,neighbour.value.rings).length;0===nIntersections&&!1==neighbour.value.isBridge&&nrneighbours.push(neighbour)}return nrneighbours}annotateStereochemistry(){for(var i=0;i<this.graph.vertices.length;i++){let vertex=this.graph.vertices[i];if(!vertex.value.isStereoCenter)continue;let neighbours=vertex.getNeighbours(),nNeighbours=neighbours.length,priorities=Array(nNeighbours);for(var j=0;j<nNeighbours;j++){let visited=new Uint8Array(this.graph.vertices.length),priority=[[]];visited[vertex.id]=1,this.visitStereochemistry(neighbours[j],vertex.id,visited,priority,10,0);for(var k=0;k<priority.length;k++)priority[k].sort(function(a,b){return b-a});priorities[j]=[j,priority]}let maxLevels=0,maxEntries=0;for(var j=0;j<priorities.length;j++){priorities[j][1].length>maxLevels&&(maxLevels=priorities[j][1].length);for(var k=0;k<priorities[j][1].length;k++)priorities[j][1][k].length>maxEntries&&(maxEntries=priorities[j][1][k].length)}for(var j=0;j<priorities.length;j++){let diff=maxLevels-priorities[j][1].length;for(var k=0;k<diff;k++)priorities[j][1].push([]);priorities[j][1].push([neighbours[j]]);for(var k=0;k<priorities[j][1].length;k++){let diff=maxEntries-priorities[j][1][k].length;for(var l=0;l<diff;l++)priorities[j][1][k].push(0)}}priorities.sort(function(a,b){for(var j=0;j<a[1].length;j++)for(var k=0;k<a[1][j].length;k++){if(a[1][j][k]>b[1][j][k])return-1;if(a[1][j][k]<b[1][j][k])return 1}return 0});let order=new Uint8Array(nNeighbours);for(var j=0;j<nNeighbours;j++)order[j]=priorities[j][0],vertex.value.priority=j;let posA=this.graph.vertices[neighbours[order[0]]].position,posB=this.graph.vertices[neighbours[order[1]]].position,posC=this.graph.vertices[neighbours[order[2]]].position,cwA=posA.relativeClockwise(posB,vertex.position),cwB=posA.relativeClockwise(posC,vertex.position),isCw=-1===cwA,rotation="@"===vertex.value.bracket.chirality?-1:1,rs=1==MathHelper.parityOfPermutation(order)*rotation?"R":"S",wedgeA="down",wedgeB="up";(isCw&&"R"!==rs||!isCw&&"S"!==rs)&&(vertex.value.hydrogenDirection="up",wedgeA="up",wedgeB="down"),vertex.value.hasHydrogen&&(this.graph.getEdge(vertex.id,neighbours[order[order.length-1]]).wedge=wedgeA);let wedgeOrder=Array(neighbours.length-1),showHydrogen=1<vertex.value.rings.length&&vertex.value.hasHydrogen,offset=vertex.value.hasHydrogen?1:0;for(var j=0;j<order.length-offset;j++){wedgeOrder[j]=new Uint32Array(2);let neighbour=this.graph.vertices[neighbours[order[j]]];wedgeOrder[j][0]+=neighbour.value.isStereoCenter?0:1e5,wedgeOrder[j][0]+=this.areVerticesInSameRing(neighbour,vertex)?0:1e4,wedgeOrder[j][0]+=neighbour.value.isHeteroAtom()?1e3:0,wedgeOrder[j][0]-=0===neighbour.value.subtreeDepth?1e3:0,wedgeOrder[j][0]+=1e3-neighbour.value.subtreeDepth,wedgeOrder[j][1]=neighbours[order[j]]}if(wedgeOrder.sort(function(a,b){return a[0]>b[0]?-1:a[0]<b[0]?1:0}),!showHydrogen){let wedgeId=wedgeOrder[0][1];if(vertex.value.hasHydrogen)this.graph.getEdge(vertex.id,wedgeId).wedge=wedgeB;else{let wedge=wedgeB;for(var j=order.length-1;0<=j&&(wedge=wedge===wedgeA?wedgeB:wedgeA,neighbours[order[j]]!==wedgeId);j--);this.graph.getEdge(vertex.id,wedgeId).wedge=wedge}}vertex.value.chirality=rs}}visitStereochemistry(vertexId,previousVertexId,visited,priority,maxDepth,depth,parentAtomicNumber=0){visited[vertexId]=1;let vertex=this.graph.vertices[vertexId],atomicNumber=vertex.value.getAtomicNumber();priority.length<=depth&&priority.push([]);for(var i=0;i<this.graph.getEdge(vertexId,previousVertexId).weight;i++)priority[depth].push(1e3*parentAtomicNumber+atomicNumber);let neighbours=this.graph.vertices[vertexId].neighbours;for(var i=0;i<neighbours.length;i++)1!==visited[neighbours[i]]&&depth<maxDepth-1&&this.visitStereochemistry(neighbours[i],vertexId,visited.slice(),priority,maxDepth,depth+1,atomicNumber);if(depth<maxDepth-1){let bonds=0;for(var i=0;i<neighbours.length;i++)bonds+=this.graph.getEdge(vertexId,neighbours[i]).weight;for(var i=0;i<vertex.value.getMaxBonds()-bonds;i++)priority.length<=depth+1&&priority.push([]),priority[depth+1].push(1e3*atomicNumber+1)}}initPseudoElements(){for(var i=0;i<this.graph.vertices.length;i++){const vertex=this.graph.vertices[i],neighbourIds=vertex.neighbours;let neighbours=Array(neighbourIds.length);for(var j=0;j<neighbourIds.length;j++)neighbours[j]=this.graph.vertices[neighbourIds[j]];if(3>vertex.getNeighbourCount()||0<vertex.value.rings.length)continue;if("P"===vertex.value.element)continue;if("C"===vertex.value.element&&3===neighbours.length&&"N"===neighbours[0].value.element&&"N"===neighbours[1].value.element&&"N"===neighbours[2].value.element)continue;let heteroAtomCount=0,ctn=0;for(var j=0;j<neighbours.length;j++){let neighbour=neighbours[j],neighbouringElement=neighbour.value.element,neighbourCount=neighbour.getNeighbourCount();"C"!==neighbouringElement&&"H"!==neighbouringElement&&1===neighbourCount&&heteroAtomCount++,1<neighbourCount&&ctn++}if(1<ctn||2>heteroAtomCount)continue;let previous=null;for(var j=0;j<neighbours.length;j++){let neighbour=neighbours[j];1<neighbour.getNeighbourCount()&&(previous=neighbour)}for(var j=0;j<neighbours.length;j++){let neighbour=neighbours[j];if(1<neighbour.getNeighbourCount())continue;neighbour.value.isDrawn=!1;let hydrogens=Atom.maxBonds[neighbour.value.element]-neighbour.value.bondCount,charge="";neighbour.value.bracket&&(hydrogens=neighbour.value.bracket.hcount,charge=neighbour.value.bracket.charge||0),vertex.value.attachPseudoElement(neighbour.value.element,previous?previous.value.element:null,hydrogens,charge)}}for(var i=0;i<this.graph.vertices.length;i++){const vertex=this.graph.vertices[i],atom=vertex.value,element=atom.element;if("C"===element||"H"===element||!atom.isDrawn)continue;const neighbourIds=vertex.neighbours;let neighbours=Array(neighbourIds.length);for(var j=0;j<neighbourIds.length;j++)neighbours[j]=this.graph.vertices[neighbourIds[j]];for(var j=0;j<neighbours.length;j++){let neighbour=neighbours[j].value;if(!neighbour.hasAttachedPseudoElements||2!==neighbour.getAttachedPseudoElementsCount())continue;const pseudoElements=neighbour.getAttachedPseudoElements();pseudoElements.hasOwnProperty("0O")&&pseudoElements.hasOwnProperty("3C")&&(neighbour.isDrawn=!1,vertex.value.attachPseudoElement("Ac","",0))}}}}},{"./ArrayHelper":2,"./Atom":3,"./CanvasWrapper":4,"./Edge":7,"./Graph":9,"./Line":10,"./MathHelper":11,"./Options":12,"./Ring":17,"./RingConnection":18,"./SSSR":19,"./ThemeManager":22,"./Vector2":24,"./Vertex":25}],7:[function(require,module){"use strict";class Edge{constructor(sourceId,targetId,weight=1){this.id=null,this.sourceId=sourceId,this.targetId=targetId,this.weight=weight,this.bondType="-",this.isPartOfAromaticRing=!1,this.center=!1,this.wedge=""}setBondType(bondType){this.bondType=bondType,this.weight=Edge.bonds[bondType]}static get bonds(){return{"-":1,"/":1,"\\":1,"=":2,"#":3,$:4}}}module.exports=Edge},{}],8:[function(require,module){"use strict";module.exports={A:"M9.565,45.288l8.402,-21.878l3.119,-0l8.955,21.878l-3.298,0l-2.552,-6.626l-9.149,0l-2.403,6.626l-3.074,0Zm6.313,-8.984l7.417,0l-2.283,-6.059c-0.697,-1.841 -1.214,-3.353 -1.552,-4.537c-0.279,1.403 -0.672,2.796 -1.179,4.179l-2.403,6.417Z",B:"M11.848,45.288l0,-21.878l8.209,-0c1.671,-0 3.012,0.221 4.022,0.664c1.009,0.443 1.8,1.124 2.372,2.045c0.573,0.92 0.859,1.883 0.859,2.887c-0,0.936 -0.254,1.816 -0.761,2.642c-0.508,0.826 -1.274,1.492 -2.299,2c1.323,0.388 2.341,1.049 3.052,1.985c0.712,0.935 1.067,2.039 1.067,3.313c0,1.025 -0.216,1.977 -0.649,2.858c-0.433,0.88 -0.968,1.559 -1.604,2.037c-0.637,0.477 -1.435,0.838 -2.396,1.082c-0.96,0.244 -2.136,0.365 -3.529,0.365l-8.343,0Zm2.896,-12.685l4.731,0c1.283,0 2.203,-0.085 2.76,-0.254c0.737,-0.219 1.291,-0.582 1.665,-1.089c0.373,-0.507 0.559,-1.144 0.559,-1.91c0,-0.727 -0.174,-1.366 -0.522,-1.918c-0.348,-0.552 -0.846,-0.93 -1.493,-1.134c-0.646,-0.204 -1.756,-0.306 -3.328,-0.306l-4.372,-0l-0,6.611Zm-0,10.104l5.447,-0c0.935,-0 1.592,-0.035 1.97,-0.105c0.666,-0.119 1.224,-0.318 1.671,-0.597c0.448,-0.278 0.816,-0.684 1.105,-1.216c0.288,-0.532 0.433,-1.147 0.433,-1.843c-0,-0.816 -0.209,-1.525 -0.627,-2.127c-0.418,-0.602 -0.998,-1.025 -1.739,-1.268c-0.741,-0.244 -1.808,-0.366 -3.201,-0.366l-5.059,-0l-0,7.522Z",C:"M261.1,417.394C257.267,417.394 254.25,418.678 252.05,421.244C249.85,423.811 248.75,427.328 248.75,431.794C248.75,436.228 249.775,439.736 251.825,442.319C253.875,444.903 256.95,446.194 261.05,446.194C262.617,446.194 264.1,446.061 265.5,445.794C266.9,445.528 268.267,445.194 269.6,444.794L269.6,448.694C268.267,449.194 266.892,449.561 265.475,449.794C264.059,450.028 262.367,450.144 260.4,450.144C256.767,450.144 253.734,449.394 251.3,447.894C248.867,446.394 247.042,444.261 245.825,441.494C244.609,438.728 244,435.478 244,431.744C244,428.144 244.659,424.969 245.975,422.219C247.292,419.469 249.234,417.319 251.8,415.769C254.367,414.219 257.484,413.444 261.15,413.444C264.917,413.444 268.2,414.144 271,415.544L269.2,419.344C268.1,418.844 266.875,418.394 265.525,417.994C264.175,417.594 262.7,417.394 261.1,417.394Z",D:"M306,431.444C306,437.478 304.359,442.019 301.075,445.069C297.792,448.119 293.217,449.644 287.35,449.644L277.4,449.644L277.4,413.944L288.4,413.944C292,413.944 295.117,414.611 297.75,415.944C300.384,417.278 302.417,419.236 303.85,421.819C305.284,424.403 306,427.611 306,431.444ZM301.25,431.594C301.25,426.828 300.075,423.336 297.725,421.119C295.375,418.903 292.05,417.794 287.75,417.794L281.9,417.794L281.9,445.794L286.75,445.794C296.417,445.794 301.25,441.061 301.25,431.594Z",E:"M333.85,449.644L313.9,449.644L313.9,413.944L333.85,413.944L333.85,417.894L318.4,417.894L318.4,429.044L332.95,429.044L332.95,432.944L318.4,432.944L318.4,445.694L333.85,445.694L333.85,449.644Z",F:"M346.2,449.644L341.7,449.644L341.7,413.944L361.65,413.944L361.65,417.894L346.2,417.894L346.2,430.544L360.7,430.544L360.7,434.494L346.2,434.494L346.2,449.644Z",G:"M383.15,430.794L395.5,430.794L395.5,448.294C393.567,448.928 391.617,449.394 389.65,449.694C387.684,449.994 385.45,450.144 382.95,450.144C379.25,450.144 376.134,449.403 373.6,447.919C371.067,446.436 369.142,444.319 367.825,441.569C366.509,438.819 365.85,435.561 365.85,431.794C365.85,428.061 366.584,424.828 368.05,422.094C369.517,419.361 371.625,417.236 374.375,415.719C377.125,414.203 380.45,413.444 384.35,413.444C386.35,413.444 388.242,413.628 390.025,413.994C391.809,414.361 393.467,414.878 395,415.544L393.3,419.444C392.034,418.878 390.609,418.394 389.025,417.994C387.442,417.594 385.8,417.394 384.1,417.394C379.834,417.394 376.509,418.678 374.125,421.244C371.742,423.811 370.55,427.328 370.55,431.794C370.55,434.628 371.009,437.136 371.925,439.319C372.842,441.503 374.284,443.203 376.25,444.419C378.217,445.636 380.8,446.244 384,446.244C385.567,446.244 386.9,446.161 388,445.994C389.1,445.828 390.1,445.628 391,445.394L391,434.794L383.15,434.794L383.15,430.794Z",H:"M0,0l-4.5,0l0,-16.65l-18.3,0l0,16.65l-4.5,0l0,-35.7l4.5,0l0,15.1l18.3,0l0,-15.1l4.5,0l0,35.7Z",I:"M451.15,449.644L438.25,449.644L438.25,447.044L442.45,446.094L442.45,417.544L438.25,416.544L438.25,413.944L451.15,413.944L451.15,416.544L446.95,417.544L446.95,446.094L451.15,447.044L451.15,449.644Z",J:"M453,459.144C452.2,459.144 451.5,459.086 450.9,458.969C450.3,458.853 449.767,458.694 449.3,458.494L449.3,454.694C449.834,454.828 450.4,454.944 451,455.044C451.6,455.144 452.234,455.194 452.9,455.194C453.734,455.194 454.525,455.028 455.275,454.694C456.025,454.361 456.634,453.778 457.1,452.944C457.567,452.111 457.8,450.944 457.8,449.444L457.8,413.944L462.3,413.944L462.3,449.094C462.3,452.528 461.45,455.061 459.75,456.694C458.05,458.328 455.8,459.144 453,459.144Z",K:"M497.8,449.644L492.5,449.644L479.85,432.594L476.2,435.794L476.2,449.644L471.7,449.644L471.7,413.944L476.2,413.944L476.2,431.544C477.2,430.411 478.217,429.278 479.25,428.144C480.284,427.011 481.317,425.878 482.35,424.744L492,413.944L497.25,413.944L483.1,429.494L497.8,449.644Z",L:"M502.65,449.644L502.65,413.944L507.15,413.944L507.15,445.644L522.75,445.644L522.75,449.644L502.65,449.644Z",M:"M544.6,449.644L532.85,418.344L532.65,418.344C532.75,419.378 532.834,420.769 532.9,422.519C532.967,424.269 533,426.094 533,427.994L533,449.644L528.85,449.644L528.85,413.944L535.5,413.944L546.5,443.194L546.7,443.194L557.9,413.944L564.5,413.944L564.5,449.644L560.05,449.644L560.05,427.694C560.05,425.961 560.092,424.244 560.175,422.544C560.259,420.844 560.334,419.461 560.4,418.394L560.2,418.394L548.3,449.644L544.6,449.644Z",N:"M602.5,449.644L597.25,449.644L578.15,419.994L577.95,419.994C578.017,421.161 578.1,422.611 578.2,424.344C578.3,426.078 578.35,427.861 578.35,429.694L578.35,449.644L574.2,449.644L574.2,413.944L579.4,413.944L598.45,443.494L598.65,443.494C598.617,442.961 598.575,442.161 598.525,441.094C598.475,440.028 598.425,438.861 598.375,437.594C598.325,436.328 598.3,435.161 598.3,434.094L598.3,413.944L602.5,413.944L602.5,449.644Z",O:"M643.35,431.744C643.35,435.444 642.725,438.669 641.475,441.419C640.225,444.169 638.384,446.311 635.95,447.844C633.517,449.378 630.5,450.144 626.9,450.144C623.2,450.144 620.125,449.378 617.675,447.844C615.225,446.311 613.4,444.161 612.2,441.394C611,438.628 610.4,435.394 610.4,431.694C610.4,428.028 611,424.828 612.2,422.094C613.4,419.361 615.225,417.228 617.675,415.694C620.125,414.161 623.217,413.394 626.95,413.394C630.517,413.394 633.517,414.153 635.95,415.669C638.384,417.186 640.225,419.319 641.475,422.069C642.725,424.819 643.35,428.044 643.35,431.744ZM615.15,431.744C615.15,436.244 616.1,439.786 618,442.369C619.9,444.953 622.867,446.244 626.9,446.244C630.967,446.244 633.934,444.953 635.8,442.369C637.667,439.786 638.6,436.244 638.6,431.744C638.6,427.244 637.667,423.719 635.8,421.169C633.934,418.619 630.984,417.344 626.95,417.344C622.917,417.344 619.942,418.619 618.025,421.169C616.109,423.719 615.15,427.244 615.15,431.744Z",P:"M660.7,413.944C665.367,413.944 668.767,414.861 670.9,416.694C673.034,418.528 674.1,421.111 674.1,424.444C674.1,426.411 673.659,428.253 672.775,429.969C671.892,431.686 670.409,433.078 668.325,434.144C666.242,435.211 663.417,435.744 659.85,435.744L655.75,435.744L655.75,449.644L651.25,449.644L651.25,413.944L660.7,413.944ZM660.3,417.794L655.75,417.794L655.75,431.894L659.35,431.894C662.75,431.894 665.284,431.344 666.95,430.244C668.617,429.144 669.45,427.278 669.45,424.644C669.45,422.344 668.717,420.628 667.25,419.494C665.784,418.361 663.467,417.794 660.3,417.794Z",Q:"M712.65,431.744C712.65,436.111 711.775,439.828 710.025,442.894C708.275,445.961 705.684,448.078 702.25,449.244L710.8,458.144L704.35,458.144L697.45,450.094C697.25,450.094 697.042,450.103 696.825,450.119C696.609,450.136 696.4,450.144 696.2,450.144C692.5,450.144 689.425,449.378 686.975,447.844C684.525,446.311 682.7,444.161 681.5,441.394C680.3,438.628 679.7,435.394 679.7,431.694C679.7,428.028 680.3,424.828 681.5,422.094C682.7,419.361 684.525,417.228 686.975,415.694C689.425,414.161 692.517,413.394 696.25,413.394C699.817,413.394 702.817,414.153 705.25,415.669C707.684,417.186 709.525,419.319 710.775,422.069C712.025,424.819 712.65,428.044 712.65,431.744ZM684.45,431.744C684.45,436.244 685.4,439.786 687.3,442.369C689.2,444.953 692.167,446.244 696.2,446.244C700.267,446.244 703.234,444.953 705.1,442.369C706.967,439.786 707.9,436.244 707.9,431.744C707.9,427.244 706.967,423.719 705.1,421.169C703.234,418.619 700.284,417.344 696.25,417.344C692.217,417.344 689.242,418.619 687.325,421.169C685.409,423.719 684.45,427.244 684.45,431.744Z",R:"M730.4,413.944C734.834,413.944 738.109,414.786 740.225,416.469C742.342,418.153 743.4,420.694 743.4,424.094C743.4,425.994 743.05,427.578 742.35,428.844C741.65,430.111 740.759,431.119 739.675,431.869C738.592,432.619 737.45,433.211 736.25,433.644L746.05,449.644L740.8,449.644L732.15,434.894L725.05,434.894L725.05,449.644L720.55,449.644L720.55,413.944L730.4,413.944ZM730.15,417.844L725.05,417.844L725.05,431.094L730.4,431.094C733.3,431.094 735.417,430.519 736.75,429.369C738.084,428.219 738.75,426.528 738.75,424.294C738.75,421.961 738.05,420.303 736.65,419.319C735.25,418.336 733.084,417.844 730.15,417.844Z",S:"M771.9,440.094C771.9,443.261 770.75,445.728 768.45,447.494C766.15,449.261 763.05,450.144 759.15,450.144C757.15,450.144 755.3,449.994 753.6,449.694C751.9,449.394 750.484,448.978 749.35,448.444L749.35,444.144C750.55,444.678 752.042,445.161 753.825,445.594C755.609,446.028 757.45,446.244 759.35,446.244C762.017,446.244 764.025,445.728 765.375,444.694C766.725,443.661 767.4,442.261 767.4,440.494C767.4,439.328 767.15,438.344 766.65,437.544C766.15,436.744 765.292,436.003 764.075,435.319C762.859,434.636 761.167,433.911 759,433.144C755.967,432.044 753.675,430.694 752.125,429.094C750.575,427.494 749.8,425.311 749.8,422.544C749.8,420.644 750.284,419.019 751.25,417.669C752.217,416.319 753.559,415.278 755.275,414.544C756.992,413.811 758.967,413.444 761.2,413.444C763.167,413.444 764.967,413.628 766.6,413.994C768.234,414.361 769.717,414.844 771.05,415.444L769.65,419.294C768.417,418.761 767.075,418.311 765.625,417.944C764.175,417.578 762.667,417.394 761.1,417.394C758.867,417.394 757.184,417.869 756.05,418.819C754.917,419.769 754.35,421.028 754.35,422.594C754.35,423.794 754.6,424.794 755.1,425.594C755.6,426.394 756.417,427.111 757.55,427.744C758.684,428.378 760.217,429.061 762.15,429.794C764.25,430.561 766.025,431.386 767.475,432.269C768.925,433.153 770.025,434.211 770.775,435.444C771.525,436.678 771.9,438.228 771.9,440.094Z",T:"M790.4,449.644L785.9,449.644L785.9,417.894L774.75,417.894L774.75,413.944L801.5,413.944L801.5,417.894L790.4,417.894L790.4,449.644Z",U:"M834.05,437.044C834.05,439.511 833.55,441.736 832.55,443.719C831.55,445.703 830.025,447.269 827.975,448.419C825.925,449.569 823.317,450.144 820.15,450.144C815.717,450.144 812.342,448.936 810.025,446.519C807.709,444.103 806.55,440.911 806.55,436.944L806.55,413.944L811.05,413.944L811.05,437.094C811.05,439.994 811.825,442.244 813.375,443.844C814.925,445.444 817.267,446.244 820.4,446.244C823.634,446.244 825.975,445.386 827.425,443.669C828.875,441.953 829.6,439.744 829.6,437.044L829.6,413.944L834.05,413.944L834.05,437.044Z",V:"M868.6,413.944L855.85,449.644L851.35,449.644L838.6,413.944L843.3,413.944L851.35,436.844C851.884,438.311 852.334,439.686 852.7,440.969C853.067,442.253 853.367,443.478 853.6,444.644C853.834,443.478 854.134,442.244 854.5,440.944C854.867,439.644 855.317,438.244 855.85,436.744L863.85,413.944L868.6,413.944Z",W:"M914.45,413.944L904.95,449.644L900.4,449.644L893.45,426.244C893.184,425.278 892.917,424.311 892.65,423.344C892.384,422.378 892.167,421.519 892,420.769C891.834,420.019 891.717,419.494 891.65,419.194C891.617,419.628 891.442,420.553 891.125,421.969C890.809,423.386 890.417,424.861 889.95,426.394L883.2,449.644L878.65,449.644L869.2,413.944L873.9,413.944L879.45,435.744C879.85,437.278 880.192,438.761 880.475,440.194C880.759,441.628 880.984,442.978 881.15,444.244C881.317,442.944 881.567,441.528 881.9,439.994C882.234,438.461 882.617,436.961 883.05,435.494L889.35,413.944L894,413.944L900.55,435.644C901.017,437.178 901.417,438.703 901.75,440.219C902.084,441.736 902.334,443.078 902.5,444.244C902.667,443.011 902.9,441.669 903.2,440.219C903.5,438.769 903.85,437.261 904.25,435.694L909.75,413.944L914.45,413.944Z",X:"M944.2,449.644L939.1,449.644L929.65,434.144L920.05,449.644L915.3,449.644L927.15,431.044L916.05,413.944L921.05,413.944L929.8,427.944L938.6,413.944L943.35,413.944L932.3,430.944L944.2,449.644Z",Y:"M958.55,431.494L967.85,413.944L972.7,413.944L960.8,435.794L960.8,449.644L956.3,449.644L956.3,435.994L944.4,413.944L949.3,413.944L958.55,431.494Z",Z:"M999.35,449.644L974.6,449.644L974.6,446.244L993.4,417.944L975.2,417.944L975.2,413.944L998.85,413.944L998.85,417.344L980.05,445.644L999.35,445.644L999.35,449.644Z",a:"M190.9,522.394C194.167,522.394 196.584,523.111 198.15,524.544C199.717,525.978 200.5,528.261 200.5,531.394L200.5,549.644L197.3,549.644L196.45,545.844L196.25,545.844C195.084,547.311 193.859,548.394 192.575,549.094C191.292,549.794 189.517,550.144 187.25,550.144C184.817,550.144 182.8,549.503 181.2,548.219C179.6,546.936 178.8,544.928 178.8,542.194C178.8,539.528 179.85,537.469 181.95,536.019C184.05,534.569 187.284,533.778 191.65,533.644L196.2,533.494L196.2,531.894C196.2,529.661 195.717,528.111 194.75,527.244C193.784,526.378 192.417,525.944 190.65,525.944C189.25,525.944 187.917,526.153 186.65,526.569C185.384,526.986 184.2,527.461 183.1,527.994L181.75,524.694C182.917,524.061 184.3,523.519 185.9,523.069C187.5,522.619 189.167,522.394 190.9,522.394ZM192.2,536.694C188.867,536.828 186.559,537.361 185.275,538.294C183.992,539.228 183.35,540.544 183.35,542.244C183.35,543.744 183.809,544.844 184.725,545.544C185.642,546.244 186.817,546.594 188.25,546.594C190.517,546.594 192.4,545.969 193.9,544.719C195.4,543.469 196.15,541.544 196.15,538.944L196.15,536.544L192.2,536.694Z",b:"M213.2,520.894C213.2,522.028 213.175,523.086 213.125,524.069C213.075,525.053 213.017,525.828 212.95,526.394L213.2,526.394C213.967,525.261 215.017,524.311 216.35,523.544C217.684,522.778 219.4,522.394 221.5,522.394C224.834,522.394 227.509,523.553 229.525,525.869C231.542,528.186 232.55,531.644 232.55,536.244C232.55,540.844 231.534,544.311 229.5,546.644C227.467,548.978 224.8,550.144 221.5,550.144C219.4,550.144 217.684,549.761 216.35,548.994C215.017,548.228 213.967,547.311 213.2,546.244L212.85,546.244L211.95,549.644L208.8,549.644L208.8,511.644L213.2,511.644L213.2,520.894ZM220.75,526.044C217.917,526.044 215.95,526.861 214.85,528.494C213.75,530.128 213.2,532.661 213.2,536.094L213.2,536.294C213.2,539.594 213.742,542.119 214.825,543.869C215.909,545.619 217.917,546.494 220.85,546.494C223.25,546.494 225.042,545.611 226.225,543.844C227.409,542.078 228,539.528 228,536.194C228,529.428 225.584,526.044 220.75,526.044Z",c:"M250.3,550.144C247.934,550.144 245.825,549.661 243.975,548.694C242.125,547.728 240.675,546.228 239.625,544.194C238.575,542.161 238.05,539.561 238.05,536.394C238.05,533.094 238.6,530.411 239.7,528.344C240.8,526.278 242.292,524.761 244.175,523.794C246.059,522.828 248.2,522.344 250.6,522.344C251.967,522.344 253.284,522.486 254.55,522.769C255.817,523.053 256.85,523.394 257.65,523.794L256.3,527.444C255.5,527.144 254.567,526.861 253.5,526.594C252.434,526.328 251.434,526.194 250.5,526.194C245.234,526.194 242.6,529.578 242.6,536.344C242.6,539.578 243.242,542.053 244.525,543.769C245.809,545.486 247.717,546.344 250.25,546.344C251.717,546.344 253.009,546.194 254.125,545.894C255.242,545.594 256.267,545.228 257.2,544.794L257.2,548.694C256.3,549.161 255.309,549.519 254.225,549.769C253.142,550.019 251.834,550.144 250.3,550.144Z",d:"M273.05,550.144C269.717,550.144 267.05,548.986 265.05,546.669C263.05,544.353 262.05,540.894 262.05,536.294C262.05,531.694 263.059,528.219 265.075,525.869C267.092,523.519 269.767,522.344 273.1,522.344C275.167,522.344 276.859,522.728 278.175,523.494C279.492,524.261 280.567,525.194 281.4,526.294L281.7,526.294C281.667,525.861 281.609,525.219 281.525,524.369C281.442,523.519 281.4,522.844 281.4,522.344L281.4,511.644L285.8,511.644L285.8,549.644L282.25,549.644L281.6,546.044L281.4,546.044C280.6,547.178 279.534,548.144 278.2,548.944C276.867,549.744 275.15,550.144 273.05,550.144ZM273.75,546.494C276.584,546.494 278.575,545.719 279.725,544.169C280.875,542.619 281.45,540.278 281.45,537.144L281.45,536.344C281.45,533.011 280.9,530.453 279.8,528.669C278.7,526.886 276.667,525.994 273.7,525.994C271.334,525.994 269.559,526.936 268.375,528.819C267.192,530.703 266.6,533.228 266.6,536.394C266.6,539.594 267.192,542.078 268.375,543.844C269.559,545.611 271.35,546.494 273.75,546.494Z",e:"M304.65,522.344C306.95,522.344 308.925,522.844 310.575,523.844C312.225,524.844 313.492,526.253 314.375,528.069C315.259,529.886 315.7,532.011 315.7,534.444L315.7,537.094L297.35,537.094C297.417,540.128 298.192,542.436 299.675,544.019C301.159,545.603 303.234,546.394 305.9,546.394C307.6,546.394 309.109,546.236 310.425,545.919C311.742,545.603 313.1,545.144 314.5,544.544L314.5,548.394C313.134,548.994 311.784,549.436 310.45,549.719C309.117,550.003 307.534,550.144 305.7,550.144C303.167,550.144 300.925,549.628 298.975,548.594C297.025,547.561 295.509,546.019 294.425,543.969C293.342,541.919 292.8,539.411 292.8,536.444C292.8,533.511 293.292,530.994 294.275,528.894C295.259,526.794 296.642,525.178 298.425,524.044C300.209,522.911 302.284,522.344 304.65,522.344ZM304.6,525.944C302.5,525.944 300.842,526.619 299.625,527.969C298.409,529.319 297.684,531.194 297.45,533.594L311.1,533.594C311.067,531.328 310.534,529.486 309.5,528.069C308.467,526.653 306.834,525.944 304.6,525.944Z",f:"M334.85,526.244L328.1,526.244L328.1,549.644L323.7,549.644L323.7,526.244L319,526.244L319,524.194L323.7,522.694L323.7,521.144C323.7,517.678 324.467,515.186 326,513.669C327.534,512.153 329.667,511.394 332.4,511.394C333.467,511.394 334.442,511.486 335.325,511.669C336.209,511.853 336.967,512.061 337.6,512.294L336.45,515.744C335.917,515.578 335.3,515.411 334.6,515.244C333.9,515.078 333.184,514.994 332.45,514.994C330.984,514.994 329.892,515.486 329.175,516.469C328.459,517.453 328.1,518.994 328.1,521.094L328.1,522.844L334.85,522.844L334.85,526.244Z",g:"M349.2,522.344C350.967,522.344 352.559,522.678 353.975,523.344C355.392,524.011 356.6,525.028 357.6,526.394L357.85,526.394L358.45,522.844L361.95,522.844L361.95,550.094C361.95,553.928 360.975,556.811 359.025,558.744C357.075,560.678 354.05,561.644 349.95,561.644C346.017,561.644 342.8,561.078 340.3,559.944L340.3,555.894C342.934,557.294 346.234,557.994 350.2,557.994C352.5,557.994 354.309,557.319 355.625,555.969C356.942,554.619 357.6,552.778 357.6,550.444L357.6,549.394C357.6,548.994 357.617,548.419 357.65,547.669C357.684,546.919 357.717,546.394 357.75,546.094L357.55,546.094C355.75,548.794 352.984,550.144 349.25,550.144C345.784,550.144 343.075,548.928 341.125,546.494C339.175,544.061 338.2,540.661 338.2,536.294C338.2,532.028 339.175,528.636 341.125,526.119C343.075,523.603 345.767,522.344 349.2,522.344ZM349.8,526.044C347.567,526.044 345.834,526.936 344.6,528.719C343.367,530.503 342.75,533.044 342.75,536.344C342.75,539.644 343.359,542.169 344.575,543.919C345.792,545.669 347.567,546.544 349.9,546.544C352.6,546.544 354.567,545.819 355.8,544.369C357.034,542.919 357.65,540.578 357.65,537.344L357.65,536.294C357.65,532.628 357.017,530.003 355.75,528.419C354.484,526.836 352.5,526.044 349.8,526.044Z",h:"M374.85,522.794C374.85,524.128 374.767,525.378 374.6,526.544L374.9,526.544C375.767,525.178 376.942,524.144 378.425,523.444C379.909,522.744 381.517,522.394 383.25,522.394C386.517,522.394 388.967,523.169 390.6,524.719C392.234,526.269 393.05,528.761 393.05,532.194L393.05,549.644L388.7,549.644L388.7,532.494C388.7,528.194 386.7,526.044 382.7,526.044C379.7,526.044 377.642,526.886 376.525,528.569C375.409,530.253 374.85,532.661 374.85,535.794L374.85,549.644L370.45,549.644L370.45,511.644L374.85,511.644L374.85,522.794Z",i:"M403.6,512.794C404.267,512.794 404.859,513.019 405.375,513.469C405.892,513.919 406.15,514.628 406.15,515.594C406.15,516.528 405.892,517.228 405.375,517.694C404.859,518.161 404.267,518.394 403.6,518.394C402.867,518.394 402.25,518.161 401.75,517.694C401.25,517.228 401,516.528 401,515.594C401,514.628 401.25,513.919 401.75,513.469C402.25,513.019 402.867,512.794 403.6,512.794ZM405.75,522.844L405.75,549.644L401.35,549.644L401.35,522.844L405.75,522.844Z",j:"M413.9,515.594C413.9,514.628 414.15,513.919 414.65,513.469C415.15,513.019 415.767,512.794 416.5,512.794C417.167,512.794 417.759,513.019 418.275,513.469C418.792,513.919 419.05,514.628 419.05,515.594C419.05,516.528 418.792,517.228 418.275,517.694C417.759,518.161 417.167,518.394 416.5,518.394C415.767,518.394 415.15,518.161 414.65,517.694C414.15,517.228 413.9,516.528 413.9,515.594ZM411.1,561.644C410.267,561.644 409.534,561.586 408.9,561.469C408.267,561.353 407.717,561.211 407.25,561.044L407.25,557.494C407.75,557.628 408.267,557.744 408.8,557.844C409.334,557.944 409.917,557.994 410.55,557.994C411.617,557.994 412.5,557.703 413.2,557.119C413.9,556.536 414.25,555.428 414.25,553.794L414.25,522.844L418.65,522.844L418.65,553.644C418.65,556.144 418.05,558.103 416.85,559.519C415.65,560.936 413.734,561.644 411.1,561.644Z",k:"M431.5,531.494C431.5,532.028 431.475,532.728 431.425,533.594C431.375,534.461 431.334,535.211 431.3,535.844L431.5,535.844C431.7,535.578 432,535.194 432.4,534.694C432.8,534.194 433.209,533.686 433.625,533.169C434.042,532.653 434.4,532.228 434.7,531.894L443.25,522.844L448.4,522.844L437.55,534.294L449.15,549.644L443.85,549.644L434.55,537.144L431.5,539.794L431.5,549.644L427.15,549.644L427.15,511.644L431.5,511.644L431.5,531.494Z",l:"M458.25,549.644L453.85,549.644L453.85,511.644L458.25,511.644L458.25,549.644Z",m:"M496.15,522.344C499.184,522.344 501.45,523.119 502.95,524.669C504.45,526.219 505.2,528.728 505.2,532.194L505.2,549.644L500.85,549.644L500.85,532.394C500.85,528.161 499.034,526.044 495.4,526.044C492.8,526.044 490.942,526.794 489.825,528.294C488.709,529.794 488.15,531.978 488.15,534.844L488.15,549.644L483.8,549.644L483.8,532.394C483.8,528.161 481.967,526.044 478.3,526.044C475.6,526.044 473.734,526.878 472.7,528.544C471.667,530.211 471.15,532.611 471.15,535.744L471.15,549.644L466.75,549.644L466.75,522.844L470.3,522.844L470.95,526.494L471.2,526.494C472.034,525.094 473.159,524.053 474.575,523.369C475.992,522.686 477.5,522.344 479.1,522.344C483.3,522.344 486.034,523.844 487.3,526.844L487.55,526.844C488.45,525.311 489.675,524.178 491.225,523.444C492.775,522.711 494.417,522.344 496.15,522.344Z",n:"M526.4,522.344C529.6,522.344 532.017,523.119 533.65,524.669C535.284,526.219 536.1,528.728 536.1,532.194L536.1,549.644L531.75,549.644L531.75,532.494C531.75,528.194 529.75,526.044 525.75,526.044C522.784,526.044 520.734,526.878 519.6,528.544C518.467,530.211 517.9,532.611 517.9,535.744L517.9,549.644L513.5,549.644L513.5,522.844L517.05,522.844L517.7,526.494L517.95,526.494C518.817,525.094 520.017,524.053 521.55,523.369C523.084,522.686 524.7,522.344 526.4,522.344Z",o:"M567.7,536.194C567.7,540.628 566.575,544.061 564.325,546.494C562.075,548.928 559.034,550.144 555.2,550.144C552.834,550.144 550.725,549.603 548.875,548.519C547.025,547.436 545.567,545.853 544.5,543.769C543.434,541.686 542.9,539.161 542.9,536.194C542.9,531.761 544.017,528.344 546.25,525.944C548.484,523.544 551.517,522.344 555.35,522.344C557.784,522.344 559.925,522.886 561.775,523.969C563.625,525.053 565.075,526.619 566.125,528.669C567.175,530.719 567.7,533.228 567.7,536.194ZM547.45,536.194C547.45,539.361 548.075,541.869 549.325,543.719C550.575,545.569 552.567,546.494 555.3,546.494C558,546.494 559.984,545.569 561.25,543.719C562.517,541.869 563.15,539.361 563.15,536.194C563.15,533.028 562.517,530.544 561.25,528.744C559.984,526.944 557.984,526.044 555.25,526.044C552.517,526.044 550.534,526.944 549.3,528.744C548.067,530.544 547.45,533.028 547.45,536.194Z",p:"M587.4,522.344C590.7,522.344 593.359,523.494 595.375,525.794C597.392,528.094 598.4,531.561 598.4,536.194C598.4,540.761 597.392,544.228 595.375,546.594C593.359,548.961 590.684,550.144 587.35,550.144C585.284,550.144 583.575,549.753 582.225,548.969C580.875,548.186 579.817,547.278 579.05,546.244L578.75,546.244C578.817,546.811 578.884,547.528 578.95,548.394C579.017,549.261 579.05,550.011 579.05,550.644L579.05,561.644L574.65,561.644L574.65,522.844L578.25,522.844L578.85,526.494L579.05,526.494C579.85,525.328 580.9,524.344 582.2,523.544C583.5,522.744 585.234,522.344 587.4,522.344ZM586.6,526.044C583.867,526.044 581.942,526.811 580.825,528.344C579.709,529.878 579.117,532.211 579.05,535.344L579.05,536.194C579.05,539.494 579.592,542.036 580.675,543.819C581.759,545.603 583.767,546.494 586.7,546.494C588.334,546.494 589.675,546.044 590.725,545.144C591.775,544.244 592.559,543.019 593.075,541.469C593.592,539.919 593.85,538.144 593.85,536.144C593.85,533.078 593.259,530.628 592.075,528.794C590.892,526.961 589.067,526.044 586.6,526.044Z",q:"M623.25,550.194C623.25,549.594 623.267,548.894 623.3,548.094C623.334,547.294 623.4,546.611 623.5,546.044L623.2,546.044C622.434,547.178 621.375,548.144 620.025,548.944C618.675,549.744 616.934,550.144 614.8,550.144C611.567,550.144 608.942,548.986 606.925,546.669C604.909,544.353 603.9,540.894 603.9,536.294C603.9,531.694 604.925,528.219 606.975,525.869C609.025,523.519 611.684,522.344 614.95,522.344C617.05,522.344 618.767,522.744 620.1,523.544C621.434,524.344 622.5,525.328 623.3,526.494L623.5,526.494L624.15,522.844L627.65,522.844L627.65,561.644L623.25,561.644L623.25,550.194ZM615.65,546.494C618.417,546.494 620.375,545.736 621.525,544.219C622.675,542.703 623.267,540.378 623.3,537.244L623.3,536.344C623.3,532.944 622.734,530.369 621.6,528.619C620.467,526.869 618.45,525.994 615.55,525.994C613.15,525.994 611.367,526.936 610.2,528.819C609.034,530.703 608.45,533.228 608.45,536.394C608.45,539.561 609.042,542.036 610.225,543.819C611.409,545.603 613.217,546.494 615.65,546.494Z",r:"M648.65,522.344C649.15,522.344 649.692,522.369 650.275,522.419C650.859,522.469 651.367,522.544 651.8,522.644L651.25,526.694C650.817,526.594 650.342,526.511 649.825,526.444C649.309,526.378 648.817,526.344 648.35,526.344C646.984,526.344 645.7,526.719 644.5,527.469C643.3,528.219 642.342,529.269 641.625,530.619C640.909,531.969 640.55,533.544 640.55,535.344L640.55,549.644L636.15,549.644L636.15,522.844L639.75,522.844L640.25,527.744L640.45,527.744C641.317,526.278 642.434,525.011 643.8,523.944C645.167,522.878 646.784,522.344 648.65,522.344Z",s:"M674.25,542.244C674.25,544.844 673.284,546.811 671.35,548.144C669.417,549.478 666.817,550.144 663.55,550.144C661.684,550.144 660.075,549.994 658.725,549.694C657.375,549.394 656.184,548.978 655.15,548.444L655.15,544.444C656.217,544.978 657.509,545.469 659.025,545.919C660.542,546.369 662.084,546.594 663.65,546.594C665.884,546.594 667.5,546.236 668.5,545.519C669.5,544.803 670,543.844 670,542.644C670,541.978 669.817,541.378 669.45,540.844C669.084,540.311 668.425,539.778 667.475,539.244C666.525,538.711 665.167,538.111 663.4,537.444C661.667,536.778 660.184,536.111 658.95,535.444C657.717,534.778 656.767,533.978 656.1,533.044C655.434,532.111 655.1,530.911 655.1,529.444C655.1,527.178 656.025,525.428 657.875,524.194C659.725,522.961 662.15,522.344 665.15,522.344C666.784,522.344 668.309,522.503 669.725,522.819C671.142,523.136 672.467,523.578 673.7,524.144L672.2,527.644C671.067,527.178 669.884,526.778 668.65,526.444C667.417,526.111 666.15,525.944 664.85,525.944C663.05,525.944 661.675,526.236 660.725,526.819C659.775,527.403 659.3,528.194 659.3,529.194C659.3,529.928 659.517,530.553 659.95,531.069C660.384,531.586 661.109,532.086 662.125,532.569C663.142,533.053 664.5,533.628 666.2,534.294C667.9,534.928 669.35,535.578 670.55,536.244C671.75,536.911 672.667,537.719 673.3,538.669C673.934,539.619 674.25,540.811 674.25,542.244Z",t:"M689.7,546.544C690.367,546.544 691.05,546.486 691.75,546.369C692.45,546.253 693.017,546.128 693.45,545.994L693.45,549.344C692.984,549.578 692.317,549.769 691.45,549.919C690.584,550.069 689.75,550.144 688.95,550.144C687.55,550.144 686.259,549.903 685.075,549.419C683.892,548.936 682.934,548.094 682.2,546.894C681.467,545.694 681.1,544.011 681.1,541.844L681.1,526.244L677.3,526.244L677.3,524.144L681.15,522.394L682.9,516.694L685.5,516.694L685.5,522.844L693.25,522.844L693.25,526.244L685.5,526.244L685.5,541.744C685.5,543.378 685.892,544.586 686.675,545.369C687.459,546.153 688.467,546.544 689.7,546.544Z",u:"M721.2,522.844L721.2,549.644L717.6,549.644L716.95,546.094L716.75,546.094C715.884,547.494 714.684,548.519 713.15,549.169C711.617,549.819 709.984,550.144 708.25,550.144C705.017,550.144 702.584,549.369 700.95,547.819C699.317,546.269 698.5,543.794 698.5,540.394L698.5,522.844L702.95,522.844L702.95,540.094C702.95,544.361 704.934,546.494 708.9,546.494C711.867,546.494 713.925,545.661 715.075,543.994C716.225,542.328 716.8,539.928 716.8,536.794L716.8,522.844L721.2,522.844Z",v:"M735.6,549.644L725.45,522.844L730.15,522.844L735.85,538.644C736.117,539.378 736.4,540.194 736.7,541.094C737,541.994 737.267,542.853 737.5,543.669C737.734,544.486 737.9,545.178 738,545.744L738.2,545.744C738.334,545.178 738.525,544.478 738.775,543.644C739.025,542.811 739.309,541.944 739.625,541.044C739.942,540.144 740.217,539.344 740.45,538.644L746.15,522.844L750.85,522.844L740.65,549.644L735.6,549.644Z",w:"M772.4,534.494C771.967,533.128 771.592,531.786 771.275,530.469C770.959,529.153 770.717,528.128 770.55,527.394L770.35,527.394C770.217,528.128 770,529.153 769.7,530.469C769.4,531.786 769.017,533.144 768.55,534.544L763.75,549.594L758.75,549.594L751.4,522.794L755.95,522.794L759.65,537.094C760.017,538.528 760.367,539.978 760.7,541.444C761.034,542.911 761.267,544.128 761.4,545.094L761.6,545.094C761.734,544.528 761.892,543.828 762.075,542.994C762.259,542.161 762.467,541.286 762.7,540.369C762.934,539.453 763.167,538.628 763.4,537.894L768.15,522.794L772.95,522.794L777.55,537.894C777.917,539.028 778.275,540.261 778.625,541.594C778.975,542.928 779.217,544.078 779.35,545.044L779.55,545.044C779.65,544.211 779.875,543.061 780.225,541.594C780.575,540.128 780.95,538.628 781.35,537.094L785.1,522.794L789.6,522.794L782.15,549.594L777,549.594L772.4,534.494Z",x:"M800.75,535.944L791.5,522.844L796.5,522.844L803.4,532.944L810.25,522.844L815.2,522.844L805.95,535.944L815.7,549.644L810.7,549.644L803.4,538.944L796,549.644L791.05,549.644L800.75,535.944Z",y:"M816.65,522.844L821.35,522.844L827.15,538.094C827.65,539.428 828.1,540.703 828.5,541.919C828.9,543.136 829.2,544.294 829.4,545.394L829.6,545.394C829.8,544.561 830.117,543.469 830.55,542.119C830.984,540.769 831.434,539.411 831.9,538.044L837.35,522.844L842.1,522.844L830.55,553.344C829.617,555.878 828.409,557.894 826.925,559.394C825.442,560.894 823.4,561.644 820.8,561.644C820,561.644 819.3,561.603 818.7,561.519C818.1,561.436 817.584,561.344 817.15,561.244L817.15,557.744C817.517,557.811 817.959,557.878 818.475,557.944C818.992,558.011 819.534,558.044 820.1,558.044C821.634,558.044 822.875,557.611 823.825,556.744C824.775,555.878 825.517,554.728 826.05,553.294L827.45,549.744L816.65,522.844Z",z:"M863.65,549.644L844.05,549.644L844.05,546.744L858.45,526.244L844.9,526.244L844.9,522.844L863.3,522.844L863.3,526.144L849.1,546.244L863.65,546.244L863.65,549.644Z",0:"M202.65,631.744C202.65,635.578 202.25,638.869 201.45,641.619C200.65,644.369 199.384,646.478 197.65,647.944C195.917,649.411 193.617,650.144 190.75,650.144C186.717,650.144 183.742,648.519 181.825,645.269C179.909,642.019 178.95,637.511 178.95,631.744C178.95,627.878 179.342,624.578 180.125,621.844C180.909,619.111 182.167,617.019 183.9,615.569C185.634,614.119 187.917,613.394 190.75,613.394C194.75,613.394 197.734,615.003 199.7,618.219C201.667,621.436 202.65,625.944 202.65,631.744ZM183.35,631.744C183.35,636.644 183.909,640.311 185.025,642.744C186.142,645.178 188.05,646.394 190.75,646.394C193.417,646.394 195.325,645.186 196.475,642.769C197.625,640.353 198.2,636.678 198.2,631.744C198.2,626.878 197.625,623.228 196.475,620.794C195.325,618.361 193.417,617.144 190.75,617.144C188.05,617.144 186.142,618.361 185.025,620.794C183.909,623.228 183.35,626.878 183.35,631.744Z",1:"M222.85,649.644L218.55,649.644L218.55,624.694C218.55,623.261 218.567,622.111 218.6,621.244C218.634,620.378 218.684,619.478 218.75,618.544C218.217,619.078 217.734,619.528 217.3,619.894C216.867,620.261 216.317,620.728 215.65,621.294L211.85,624.394L209.55,621.444L219.2,613.944L222.85,613.944L222.85,649.644Z",2:"M259.7,649.644L236.1,649.644L236.1,645.994L245.45,636.544C247.25,634.744 248.767,633.144 250,631.744C251.234,630.344 252.167,628.969 252.8,627.619C253.434,626.269 253.75,624.794 253.75,623.194C253.75,621.228 253.167,619.736 252,618.719C250.834,617.703 249.317,617.194 247.45,617.194C245.717,617.194 244.192,617.494 242.875,618.094C241.559,618.694 240.217,619.528 238.85,620.594L236.5,617.644C237.9,616.478 239.509,615.486 241.325,614.669C243.142,613.853 245.184,613.444 247.45,613.444C250.784,613.444 253.417,614.286 255.35,615.969C257.284,617.653 258.25,619.978 258.25,622.944C258.25,624.811 257.867,626.561 257.1,628.194C256.334,629.828 255.267,631.436 253.9,633.019C252.534,634.603 250.934,636.294 249.1,638.094L241.65,645.444L241.65,645.644L259.7,645.644L259.7,649.644Z",3:"M286.95,622.294C286.95,624.694 286.284,626.603 284.95,628.019C283.617,629.436 281.817,630.378 279.55,630.844L279.55,631.044C282.417,631.378 284.55,632.278 285.95,633.744C287.35,635.211 288.05,637.128 288.05,639.494C288.05,641.561 287.567,643.403 286.6,645.019C285.634,646.636 284.142,647.894 282.125,648.794C280.109,649.694 277.517,650.144 274.35,650.144C272.484,650.144 270.75,650.003 269.15,649.719C267.55,649.436 266.017,648.928 264.55,648.194L264.55,644.094C266.05,644.828 267.667,645.403 269.4,645.819C271.134,646.236 272.8,646.444 274.4,646.444C277.6,646.444 279.909,645.819 281.325,644.569C282.742,643.319 283.45,641.594 283.45,639.394C283.45,637.161 282.575,635.553 280.825,634.569C279.075,633.586 276.617,633.094 273.45,633.094L270,633.094L270,629.344L273.5,629.344C276.434,629.344 278.659,628.728 280.175,627.494C281.692,626.261 282.45,624.628 282.45,622.594C282.45,620.861 281.867,619.519 280.7,618.569C279.534,617.619 277.95,617.144 275.95,617.144C274.017,617.144 272.367,617.428 271,617.994C269.634,618.561 268.284,619.278 266.95,620.144L264.75,617.144C266.017,616.144 267.592,615.278 269.475,614.544C271.359,613.811 273.5,613.444 275.9,613.444C279.634,613.444 282.409,614.278 284.225,615.944C286.042,617.611 286.95,619.728 286.95,622.294Z",4:"M318.5,641.544L313.3,641.544L313.3,649.644L309.05,649.644L309.05,641.544L291.95,641.544L291.95,637.794L308.75,613.744L313.3,613.744L313.3,637.594L318.5,637.594L318.5,641.544ZM309.05,626.344C309.05,624.611 309.084,623.136 309.15,621.919C309.217,620.703 309.267,619.544 309.3,618.444L309.1,618.444C308.834,619.078 308.5,619.761 308.1,620.494C307.7,621.228 307.317,621.844 306.95,622.344L296.25,637.594L309.05,637.594L309.05,626.344Z",5:"M333.25,627.744C336.917,627.744 339.834,628.661 342,630.494C344.167,632.328 345.25,634.911 345.25,638.244C345.25,641.944 344.075,644.853 341.725,646.969C339.375,649.086 336.1,650.144 331.9,650.144C330.067,650.144 328.342,649.978 326.725,649.644C325.109,649.311 323.75,648.828 322.65,648.194L322.65,644.044C323.85,644.778 325.309,645.353 327.025,645.769C328.742,646.186 330.384,646.394 331.95,646.394C334.584,646.394 336.709,645.769 338.325,644.519C339.942,643.269 340.75,641.328 340.75,638.694C340.75,636.361 340.034,634.569 338.6,633.319C337.167,632.069 334.9,631.444 331.8,631.444C330.867,631.444 329.8,631.528 328.6,631.694C327.4,631.861 326.434,632.028 325.7,632.194L323.5,630.794L324.85,613.944L342.75,613.944L342.75,617.944L328.6,617.944L327.75,628.294C328.317,628.194 329.084,628.078 330.05,627.944C331.017,627.811 332.084,627.744 333.25,627.744Z",6:"M350.85,634.394C350.85,631.828 351.075,629.303 351.525,626.819C351.975,624.336 352.792,622.086 353.975,620.069C355.159,618.053 356.817,616.444 358.95,615.244C361.084,614.044 363.834,613.444 367.2,613.444C367.9,613.444 368.675,613.478 369.525,613.544C370.375,613.611 371.067,613.728 371.6,613.894L371.6,617.644C371,617.444 370.325,617.294 369.575,617.194C368.825,617.094 368.067,617.044 367.3,617.044C365,617.044 363.084,617.428 361.55,618.194C360.017,618.961 358.809,620.011 357.925,621.344C357.042,622.678 356.4,624.211 356,625.944C355.6,627.678 355.35,629.528 355.25,631.494L355.55,631.494C356.317,630.328 357.384,629.336 358.75,628.519C360.117,627.703 361.867,627.294 364,627.294C367.1,627.294 369.6,628.236 371.5,630.119C373.4,632.003 374.35,634.678 374.35,638.144C374.35,641.878 373.325,644.811 371.275,646.944C369.225,649.078 366.467,650.144 363,650.144C360.734,650.144 358.684,649.578 356.85,648.444C355.017,647.311 353.559,645.578 352.475,643.244C351.392,640.911 350.85,637.961 350.85,634.394ZM362.95,646.444C365.05,646.444 366.75,645.769 368.05,644.419C369.35,643.069 370,640.978 370,638.144C370,635.878 369.425,634.078 368.275,632.744C367.125,631.411 365.4,630.744 363.1,630.744C361.534,630.744 360.167,631.069 359,631.719C357.834,632.369 356.925,633.194 356.275,634.194C355.625,635.194 355.3,636.228 355.3,637.294C355.3,638.728 355.584,640.153 356.15,641.569C356.717,642.986 357.567,644.153 358.7,645.069C359.834,645.986 361.25,646.444 362.95,646.444Z",7:"M383.5,649.644L398.15,617.944L378.9,617.944L378.9,613.944L402.85,613.944L402.85,617.344L388.35,649.644L383.5,649.644Z",8:"M419.55,613.444C422.684,613.444 425.25,614.178 427.25,615.644C429.25,617.111 430.25,619.228 430.25,621.994C430.25,623.428 429.942,624.678 429.325,625.744C428.709,626.811 427.884,627.753 426.85,628.569C425.817,629.386 424.684,630.111 423.45,630.744C424.917,631.444 426.25,632.236 427.45,633.119C428.65,634.003 429.609,635.028 430.325,636.194C431.042,637.361 431.4,638.761 431.4,640.394C431.4,643.394 430.342,645.769 428.225,647.519C426.109,649.269 423.267,650.144 419.7,650.144C415.867,650.144 412.917,649.303 410.85,647.619C408.784,645.936 407.75,643.578 407.75,640.544C407.75,638.911 408.092,637.494 408.775,636.294C409.459,635.094 410.367,634.061 411.5,633.194C412.634,632.328 413.85,631.594 415.15,630.994C413.417,629.994 411.942,628.786 410.725,627.369C409.509,625.953 408.9,624.144 408.9,621.944C408.9,620.111 409.367,618.569 410.3,617.319C411.234,616.069 412.5,615.111 414.1,614.444C415.7,613.778 417.517,613.444 419.55,613.444ZM419.5,616.994C417.667,616.994 416.159,617.436 414.975,618.319C413.792,619.203 413.2,620.478 413.2,622.144C413.2,623.378 413.492,624.411 414.075,625.244C414.659,626.078 415.45,626.786 416.45,627.369C417.45,627.953 418.55,628.511 419.75,629.044C421.484,628.311 422.942,627.428 424.125,626.394C425.309,625.361 425.9,623.944 425.9,622.144C425.9,620.478 425.317,619.203 424.15,618.319C422.984,617.436 421.434,616.994 419.5,616.994ZM412.05,640.594C412.05,642.328 412.667,643.769 413.9,644.919C415.134,646.069 417.034,646.644 419.6,646.644C422.034,646.644 423.892,646.069 425.175,644.919C426.459,643.769 427.1,642.278 427.1,640.444C427.1,638.711 426.417,637.269 425.05,636.119C423.684,634.969 421.867,633.961 419.6,633.094L418.8,632.794C416.6,633.728 414.925,634.803 413.775,636.019C412.625,637.236 412.05,638.761 412.05,640.594Z",9:"M459.9,629.194C459.9,631.761 459.675,634.286 459.225,636.769C458.775,639.253 457.959,641.503 456.775,643.519C455.592,645.536 453.925,647.144 451.775,648.344C449.625,649.544 446.867,650.144 443.5,650.144C442.834,650.144 442.059,650.103 441.175,650.019C440.292,649.936 439.567,649.811 439,649.644L439,645.894C440.3,646.328 441.767,646.544 443.4,646.544C445.734,646.544 447.659,646.161 449.175,645.394C450.692,644.628 451.9,643.586 452.8,642.269C453.7,640.953 454.35,639.419 454.75,637.669C455.15,635.919 455.384,634.078 455.45,632.144L455.15,632.144C454.417,633.278 453.359,634.253 451.975,635.069C450.592,635.886 448.817,636.294 446.65,636.294C443.584,636.294 441.109,635.353 439.225,633.469C437.342,631.586 436.4,628.928 436.4,625.494C436.4,622.994 436.875,620.844 437.825,619.044C438.775,617.244 440.1,615.861 441.8,614.894C443.5,613.928 445.5,613.444 447.8,613.444C450.067,613.444 452.117,614.019 453.95,615.169C455.784,616.319 457.234,618.053 458.3,620.369C459.367,622.686 459.9,625.628 459.9,629.194ZM447.8,617.144C445.734,617.144 444.042,617.828 442.725,619.194C441.409,620.561 440.75,622.644 440.75,625.444C440.75,627.744 441.309,629.553 442.425,630.869C443.542,632.186 445.267,632.844 447.6,632.844C449.2,632.844 450.584,632.519 451.75,631.869C452.917,631.219 453.825,630.394 454.475,629.394C455.125,628.394 455.45,627.361 455.45,626.294C455.45,624.861 455.167,623.444 454.6,622.044C454.034,620.644 453.184,619.478 452.05,618.544C450.917,617.611 449.5,617.144 447.8,617.144Z","+":"M192.55,730.244L202.5,730.244L202.5,733.794L192.55,733.794L192.55,744.094L188.95,744.094L188.95,733.794L179,733.794L179,730.244L188.95,730.244L188.95,719.894L192.55,719.894L192.55,730.244Z","-":"M207.1,738.194L207.1,734.294L219.2,734.294L219.2,738.194L207.1,738.194Z","(":"M178.5,835.944C178.5,831.878 179.092,827.953 180.275,824.169C181.459,820.386 183.317,816.978 185.85,813.944L190,813.944C187.667,817.078 185.909,820.528 184.725,824.294C183.542,828.061 182.95,831.928 182.95,835.894C182.95,839.761 183.542,843.553 184.725,847.269C185.909,850.986 187.65,854.411 189.95,857.544L185.85,857.544C183.317,854.611 181.459,851.286 180.275,847.569C179.092,843.853 178.5,839.978 178.5,835.944Z",")":"M204.5,835.944C204.5,839.978 203.909,843.853 202.725,847.569C201.542,851.286 199.684,854.611 197.15,857.544L193.05,857.544C195.35,854.411 197.092,850.986 198.275,847.269C199.459,843.553 200.05,839.761 200.05,835.894C200.05,831.928 199.459,828.061 198.275,824.294C197.092,820.528 195.334,817.078 193,813.944L197.15,813.944C199.684,816.978 201.542,820.386 202.725,824.169C203.909,827.953 204.5,831.878 204.5,835.944Z","{":"M223.9,857.544C220.834,857.511 218.417,856.844 216.65,855.544C214.884,854.244 214,852.261 214,849.594L214,842.244C214,840.544 213.475,839.336 212.425,838.619C211.375,837.903 209.867,837.544 207.9,837.544L207.9,833.894C209.867,833.861 211.375,833.494 212.425,832.794C213.475,832.094 214,830.911 214,829.244L214,821.844C214,819.178 214.917,817.194 216.75,815.894C218.584,814.594 220.967,813.944 223.9,813.944L223.9,817.544C222.167,817.578 220.809,817.961 219.825,818.694C218.842,819.428 218.35,820.611 218.35,822.244L218.35,829.444C218.35,832.878 216.534,834.911 212.9,835.544L212.9,835.844C216.534,836.478 218.35,838.511 218.35,841.944L218.35,849.294C218.35,850.928 218.834,852.103 219.8,852.819C220.767,853.536 222.134,853.911 223.9,853.944L223.9,857.544Z","}":"M227.1,853.944C228.834,853.878 230.192,853.486 231.175,852.769C232.159,852.053 232.65,850.878 232.65,849.244L232.65,841.994C232.65,838.561 234.467,836.528 238.1,835.894L238.1,835.594C234.467,834.961 232.65,832.928 232.65,829.494L232.65,822.194C232.65,820.561 232.167,819.386 231.2,818.669C230.234,817.953 228.867,817.578 227.1,817.544L227.1,813.944C230.167,813.978 232.584,814.644 234.35,815.944C236.117,817.244 237,819.228 237,821.894L237,829.194C237,830.894 237.525,832.103 238.575,832.819C239.625,833.536 241.134,833.894 243.1,833.894L243.1,837.544C241.134,837.578 239.625,837.944 238.575,838.644C237.525,839.344 237,840.528 237,842.194L237,849.644C237,852.278 236.084,854.253 234.25,855.569C232.417,856.886 230.034,857.544 227.1,857.544L227.1,853.944Z","[":"M259.7,857.544L248.5,857.544L248.5,813.944L259.7,813.944L259.7,817.544L252.8,817.544L252.8,853.944L259.7,853.944L259.7,857.544Z","]":"M262.2,853.944L269.1,853.944L269.1,817.544L262.2,817.544L262.2,813.944L273.4,813.944L273.4,857.544L262.2,857.544L262.2,853.944Z"}},{}],9:[function(require,module){"use strict";var _Mathpow=Math.pow,_Mathsqrt2=Math.sqrt,_Mathmin4=Math.min;const MathHelper=require("./MathHelper"),Vector2=require("./Vector2"),Vertex=require("./Vertex"),Edge=require("./Edge"),Ring=require("./Ring"),Atom=require("./Atom");class Graph{constructor(parseTree,isomeric=!1){this.vertices=[],this.edges=[],this.vertexIdsToEdgeId={},this.isomeric=isomeric,this._time=0,this._init(parseTree)}_init(node,order=0,parentVertexId=null,isBranch=!1){let atom=new Atom(node.atom.element?node.atom.element:node.atom,node.bond);atom.branchBond=node.branchBond,atom.ringbonds=node.ringbonds,atom.bracket=node.atom.element?node.atom:null;let vertex=new Vertex(atom),parentVertex=this.vertices[parentVertexId];if(this.addVertex(vertex),null!==parentVertexId){vertex.setParentVertexId(parentVertexId),vertex.value.addNeighbouringElement(parentVertex.value.element),parentVertex.addChild(vertex.id),parentVertex.value.addNeighbouringElement(atom.element),parentVertex.spanningTreeChildren.push(vertex.id);let edge=new Edge(parentVertexId,vertex.id,1),vertexId=null;isBranch?(edge.setBondType(vertex.value.branchBond||"-"),vertexId=vertex.id,edge.setBondType(vertex.value.branchBond||"-"),vertexId=vertex.id):(edge.setBondType(parentVertex.value.bondType||"-"),vertexId=parentVertex.id);this.addEdge(edge)}let offset=node.ringbondCount+1;atom.bracket&&(offset+=atom.bracket.hcount);let stereoHydrogens=0;if(atom.bracket&&atom.bracket.chirality){atom.isStereoCenter=!0,stereoHydrogens=atom.bracket.hcount;for(var i=0;i<stereoHydrogens;i++)this._init({atom:"H",isBracket:"false",branches:[],branchCount:0,ringbonds:[],ringbondCount:!1,next:null,hasNext:!1,bond:"-"},i,vertex.id,!0)}for(var i=0;i<node.branchCount;i++)this._init(node.branches[i],i+offset,vertex.id,!0);node.hasNext&&this._init(node.next,node.branchCount+offset,vertex.id)}clear(){this.vertices=[],this.edges=[],this.vertexIdsToEdgeId={}}addVertex(vertex){return vertex.id=this.vertices.length,this.vertices.push(vertex),vertex.id}addEdge(edge){let source=this.vertices[edge.sourceId],target=this.vertices[edge.targetId];return edge.id=this.edges.length,this.edges.push(edge),this.vertexIdsToEdgeId[edge.sourceId+"_"+edge.targetId]=edge.id,this.vertexIdsToEdgeId[edge.targetId+"_"+edge.sourceId]=edge.id,edge.isPartOfAromaticRing=source.value.isPartOfAromaticRing&&target.value.isPartOfAromaticRing,source.value.bondCount+=edge.weight,target.value.bondCount+=edge.weight,source.edges.push(edge.id),target.edges.push(edge.id),edge.id}getEdge(vertexIdA,vertexIdB){let edgeId=this.vertexIdsToEdgeId[vertexIdA+"_"+vertexIdB];return edgeId===void 0?null:this.edges[edgeId]}getEdges(vertexId){let edgeIds=[],vertex=this.vertices[vertexId];for(var i=0;i<vertex.neighbours.length;i++)edgeIds.push(this.vertexIdsToEdgeId[vertexId+"_"+vertex.neighbours[i]]);return edgeIds}hasEdge(vertexIdA,vertexIdB){return this.vertexIdsToEdgeId[vertexIdA+"_"+vertexIdB]!==void 0}getVertexList(){let arr=[this.vertices.length];for(var i=0;i<this.vertices.length;i++)arr[i]=this.vertices[i].id;return arr}getEdgeList(){let arr=Array(this.edges.length);for(var i=0;i<this.edges.length;i++)arr[i]=[this.edges[i].sourceId,this.edges[i].targetId];return arr}getAdjacencyMatrix(){let length=this.vertices.length,adjacencyMatrix=Array(length);for(var i=0;i<length;i++)adjacencyMatrix[i]=Array(length),adjacencyMatrix[i].fill(0);for(var i=0;i<this.edges.length;i++){let edge=this.edges[i];adjacencyMatrix[edge.sourceId][edge.targetId]=1,adjacencyMatrix[edge.targetId][edge.sourceId]=1}return adjacencyMatrix}getComponentsAdjacencyMatrix(){let length=this.vertices.length,adjacencyMatrix=Array(length),bridges=this.getBridges();for(var i=0;i<length;i++)adjacencyMatrix[i]=Array(length),adjacencyMatrix[i].fill(0);for(var i=0;i<this.edges.length;i++){let edge=this.edges[i];adjacencyMatrix[edge.sourceId][edge.targetId]=1,adjacencyMatrix[edge.targetId][edge.sourceId]=1}for(var i=0;i<bridges.length;i++)adjacencyMatrix[bridges[i][0]][bridges[i][1]]=0,adjacencyMatrix[bridges[i][1]][bridges[i][0]]=0;return adjacencyMatrix}getSubgraphAdjacencyMatrix(vertexIds){let length=vertexIds.length,adjacencyMatrix=Array(length);for(var i=0;i<length;i++){adjacencyMatrix[i]=Array(length),adjacencyMatrix[i].fill(0);for(var j=0;j<length;j++)i!==j&&this.hasEdge(vertexIds[i],vertexIds[j])&&(adjacencyMatrix[i][j]=1)}return adjacencyMatrix}getDistanceMatrix(){let length=this.vertices.length,adja=this.getAdjacencyMatrix(),dist=Array(length);for(var i=0;i<length;i++)dist[i]=Array(length),dist[i].fill(1/0);for(var i=0;i<length;i++)for(var j=0;j<length;j++)1===adja[i][j]&&(dist[i][j]=1);for(var k=0;k<length;k++)for(var i=0;i<length;i++)for(var j=0;j<length;j++)dist[i][j]>dist[i][k]+dist[k][j]&&(dist[i][j]=dist[i][k]+dist[k][j]);return dist}getSubgraphDistanceMatrix(vertexIds){let length=vertexIds.length,adja=this.getSubgraphAdjacencyMatrix(vertexIds),dist=Array(length);for(var i=0;i<length;i++)dist[i]=Array(length),dist[i].fill(1/0);for(var i=0;i<length;i++)for(var j=0;j<length;j++)1===adja[i][j]&&(dist[i][j]=1);for(var k=0;k<length;k++)for(var i=0;i<length;i++)for(var j=0;j<length;j++)dist[i][j]>dist[i][k]+dist[k][j]&&(dist[i][j]=dist[i][k]+dist[k][j]);return dist}getAdjacencyList(){let length=this.vertices.length,adjacencyList=Array(length);for(var i=0;i<length;i++){adjacencyList[i]=[];for(var j=0;j<length;j++)i!==j&&this.hasEdge(this.vertices[i].id,this.vertices[j].id)&&adjacencyList[i].push(j)}return adjacencyList}getSubgraphAdjacencyList(vertexIds){let length=vertexIds.length,adjacencyList=Array(length);for(var i=0;i<length;i++){adjacencyList[i]=[];for(var j=0;j<length;j++)i!==j&&this.hasEdge(vertexIds[i],vertexIds[j])&&adjacencyList[i].push(j)}return adjacencyList}getBridges(){let length=this.vertices.length,visited=Array(length),disc=Array(length),low=Array(length),parent=Array(length),adj=this.getAdjacencyList(),outBridges=[];visited.fill(!1),parent.fill(null),this._time=0;for(var i=0;i<length;i++)visited[i]||this._bridgeDfs(i,visited,disc,low,parent,adj,outBridges);return outBridges}traverseBF(startVertexId,callback){let length=this.vertices.length,visited=Array(length);visited.fill(!1);for(var queue=[startVertexId];0<queue.length;){let u=queue.shift(),vertex=this.vertices[u];callback(vertex);for(var i=0;i<vertex.neighbours.length;i++){let v=vertex.neighbours[i];visited[v]||(visited[v]=!0,queue.push(v))}}}getTreeDepth(vertexId,parentVertexId){if(null===vertexId||null===parentVertexId)return 0;let neighbours=this.vertices[vertexId].getSpanningTreeNeighbours(parentVertexId),max=0;for(var i=0;i<neighbours.length;i++){let childId=neighbours[i],d=this.getTreeDepth(childId,vertexId);d>max&&(max=d)}return max+1}traverseTree(vertexId,parentVertexId,callback,maxDepth=999999,ignoreFirst=!1,depth=1,visited=null){if(null===visited&&(visited=new Uint8Array(this.vertices.length)),depth>maxDepth+1||1===visited[vertexId])return;visited[vertexId]=1;let vertex=this.vertices[vertexId],neighbours=vertex.getNeighbours(parentVertexId);(!ignoreFirst||1<depth)&&callback(vertex);for(var i=0;i<neighbours.length;i++)this.traverseTree(neighbours[i],vertexId,callback,maxDepth,ignoreFirst,depth+1,visited)}kkLayout(vertexIds,center,startVertexId,ring,bondLength,threshold=.1,innerThreshold=.1,maxIteration=2e3,maxInnerIteration=50,maxEnergy=1e9){for(var i=vertexIds.length;i--;){let vertex=this.vertices[vertexIds[i]];var j=vertex.neighbours.length}let matDist=this.getSubgraphDistanceMatrix(vertexIds),length=vertexIds.length,radius=MathHelper.polyCircumradius(500,length),angle=MathHelper.centralAngle(length),a=0,arrPositionX=new Float32Array(length),arrPositionY=new Float32Array(length),arrPositioned=Array(length);for(i=length;i--;){let vertex=this.vertices[vertexIds[i]];vertex.positioned?(arrPositionX[i]=vertex.position.x,arrPositionY[i]=vertex.position.y):(arrPositionX[i]=center.x+Math.cos(a)*radius,arrPositionY[i]=center.y+Math.sin(a)*radius),arrPositioned[i]=vertex.positioned,a+=angle}let matLength=Array(length);for(i=length;i--;){matLength[i]=Array(length);for(var j=length;j--;)matLength[i][j]=bondLength*matDist[i][j]}let matStrength=Array(length);for(i=length;i--;){matStrength[i]=Array(length);for(var j=length;j--;)matStrength[i][j]=bondLength*_Mathpow(matDist[i][j],-2)}let matEnergy=Array(length),arrEnergySumX=new Float32Array(length),arrEnergySumY=new Float32Array(length);for(i=length;i--;)matEnergy[i]=Array(length);i=length;for(let ux,uy,dEx,dEy,vx,vy,denom;i--;){ux=arrPositionX[i],uy=arrPositionY[i],dEx=0,dEy=0;for(let j=length;j--;)i!==j&&(vx=arrPositionX[j],vy=arrPositionY[j],denom=1/_Mathsqrt2((ux-vx)*(ux-vx)+(uy-vy)*(uy-vy)),matEnergy[i][j]=[matStrength[i][j]*(ux-vx-matLength[i][j]*(ux-vx)*denom),matStrength[i][j]*(uy-vy-matLength[i][j]*(uy-vy)*denom)],matEnergy[j][i]=matEnergy[i][j],dEx+=matEnergy[i][j][0],dEy+=matEnergy[i][j][1]);arrEnergySumX[i]=dEx,arrEnergySumY[i]=dEy}let energy=function(index){return[arrEnergySumX[index]*arrEnergySumX[index]+arrEnergySumY[index]*arrEnergySumY[index],arrEnergySumX[index],arrEnergySumY[index]]},highestEnergy=function(){let maxEnergy=0,maxEnergyId=0,maxDEX=0,maxDEY=0;for(i=length;i--;){let[delta,dEX,dEY]=energy(i);delta>maxEnergy&&!1===arrPositioned[i]&&(maxEnergy=delta,maxEnergyId=i,maxDEX=dEX,maxDEY=dEY)}return[maxEnergyId,maxEnergy,maxDEX,maxDEY]},update=function(index,dEX,dEY){let dxx=0,dyy=0,dxy=0,ux=arrPositionX[index],uy=arrPositionY[index],arrL=matLength[index],arrK=matStrength[index];for(i=length;i--;){if(i===index)continue;let vx=arrPositionX[i],vy=arrPositionY[i],l=arrL[i],k=arrK[i],m=(ux-vx)*(ux-vx),denom=1/_Mathpow(m+(uy-vy)*(uy-vy),1.5);dxx+=k*(1-l*(uy-vy)*(uy-vy)*denom),dyy+=k*(1-l*m*denom),dxy+=k*(l*(ux-vx)*(uy-vy)*denom)}0==dxx&&(dxx=.1),0===dyy&&(dyy=.1),0===dxy&&(dxy=.1);let dy=dEX/dxx+dEY/dxy;dy/=dxy/dxx-dyy/dxy;let dx=-(dxy*dy+dEX)/dxx;arrPositionX[index]+=dx,arrPositionY[index]+=dy;let arrE=matEnergy[index];dEX=0,dEY=0,ux=arrPositionX[index],uy=arrPositionY[index];let vx,vy,prevEx,prevEy,denom;for(i=length;i--;)index!==i&&(vx=arrPositionX[i],vy=arrPositionY[i],prevEx=arrE[i][0],prevEy=arrE[i][1],denom=1/_Mathsqrt2((ux-vx)*(ux-vx)+(uy-vy)*(uy-vy)),dx=arrK[i]*(ux-vx-arrL[i]*(ux-vx)*denom),dy=arrK[i]*(uy-vy-arrL[i]*(uy-vy)*denom),arrE[i]=[dx,dy],dEX+=dx,dEY+=dy,arrEnergySumX[i]+=dx-prevEx,arrEnergySumY[i]+=dy-prevEy);arrEnergySumX[index]=dEX,arrEnergySumY[index]=dEY},maxEnergyId=0,dEX=0,dEY=0,delta=0,iteration=0,innerIteration=0;for(;maxEnergy>threshold&&maxIteration>iteration;)for(iteration++,[maxEnergyId,maxEnergy,dEX,dEY]=highestEnergy(),delta=maxEnergy,innerIteration=0;delta>innerThreshold&&maxInnerIteration>innerIteration;)innerIteration++,update(maxEnergyId,dEX,dEY),[delta,dEX,dEY]=energy(maxEnergyId);for(i=length;i--;){let index=vertexIds[i],vertex=this.vertices[index];vertex.position.x=arrPositionX[i],vertex.position.y=arrPositionY[i],vertex.positioned=!0,vertex.forcePositioned=!0}}_bridgeDfs(u,visited,disc,low,parent,adj,outBridges){visited[u]=!0,disc[u]=low[u]=++this._time;for(var i=0;i<adj[u].length;i++){let v=adj[u][i];visited[v]?v!==parent[u]&&(low[u]=_Mathmin4(low[u],disc[v])):(parent[v]=u,this._bridgeDfs(v,visited,disc,low,parent,adj,outBridges),low[u]=_Mathmin4(low[u],low[v]),low[v]>disc[u]&&outBridges.push([u,v]))}}static getConnectedComponents(adjacencyMatrix){let length=adjacencyMatrix.length,visited=Array(length),components=[],count=0;visited.fill(!1);for(var u=0;u<length;u++)if(!visited[u]){let component=[];visited[u]=!0,component.push(u),count++,Graph._ccGetDfs(u,visited,adjacencyMatrix,component),1<component.length&&components.push(component)}return components}static getConnectedComponentCount(adjacencyMatrix){let length=adjacencyMatrix.length,visited=Array(length),count=0;visited.fill(!1);for(var u=0;u<length;u++)visited[u]||(visited[u]=!0,count++,Graph._ccCountDfs(u,visited,adjacencyMatrix));return count}static _ccCountDfs(u,visited,adjacencyMatrix){for(var v=0;v<adjacencyMatrix[u].length;v++){let c=adjacencyMatrix[u][v];c&&!visited[v]&&u!==v&&(visited[v]=!0,Graph._ccCountDfs(v,visited,adjacencyMatrix))}}static _ccGetDfs(u,visited,adjacencyMatrix,component){for(var v=0;v<adjacencyMatrix[u].length;v++){let c=adjacencyMatrix[u][v];c&&!visited[v]&&u!==v&&(visited[v]=!0,component.push(v),Graph._ccGetDfs(v,visited,adjacencyMatrix,component))}}}module.exports=Graph},{"./Atom":3,"./Edge":7,"./MathHelper":11,"./Ring":17,"./Vector2":24,"./Vertex":25}],10:[function(require,module){"use strict";var _Mathpow2=Math.pow,_Mathsin2=Math.sin,_Mathcos2=Math.cos;const Vector2=require("./Vector2");class Line{constructor(from=new Vector2(0,0),to=new Vector2(0,0),elementFrom=null,elementTo=null,chiralFrom=!1,chiralTo=!1){this.from=from,this.to=to,this.elementFrom=elementFrom,this.elementTo=elementTo,this.chiralFrom=chiralFrom,this.chiralTo=chiralTo}clone(){return new Line(this.from.clone(),this.to.clone(),this.elementFrom,this.elementTo)}getLength(){return Math.sqrt(_Mathpow2(this.to.x-this.from.x,2)+_Mathpow2(this.to.y-this.from.y,2))}getAngle(){let diff=Vector2.subtract(this.getRightVector(),this.getLeftVector());return diff.angle()}getRightVector(){return this.from.x<this.to.x?this.to:this.from}getLeftVector(){return this.from.x<this.to.x?this.from:this.to}getRightElement(){return this.from.x<this.to.x?this.elementTo:this.elementFrom}getLeftElement(){return this.from.x<this.to.x?this.elementFrom:this.elementTo}getRightChiral(){return this.from.x<this.to.x?this.chiralTo:this.chiralFrom}getLeftChiral(){return this.from.x<this.to.x?this.chiralFrom:this.chiralTo}setRightVector(x,y){return this.from.x<this.to.x?(this.to.x=x,this.to.y=y):(this.from.x=x,this.from.y=y),this}setLeftVector(x,y){return this.from.x<this.to.x?(this.from.x=x,this.from.y=y):(this.to.x=x,this.to.y=y),this}rotateToXAxis(){let left=this.getLeftVector();return this.setRightVector(left.x+this.getLength(),left.y),this}rotate(theta){let l=this.getLeftVector(),r=this.getRightVector(),sinTheta=_Mathsin2(theta),cosTheta=_Mathcos2(theta),x=cosTheta*(r.x-l.x)-sinTheta*(r.y-l.y)+l.x,y=sinTheta*(r.x-l.x)-cosTheta*(r.y-l.y)+l.y;return this.setRightVector(x,y),this}shortenFrom(by){let f=Vector2.subtract(this.to,this.from);return f.normalize(),f.multiplyScalar(by),this.from.add(f),this}shortenTo(by){let f=Vector2.subtract(this.from,this.to);return f.normalize(),f.multiplyScalar(by),this.to.add(f),this}shortenRight(by){return this.from.x<this.to.x?this.shortenTo(by):this.shortenFrom(by),this}shortenLeft(by){return this.from.x<this.to.x?this.shortenFrom(by):this.shortenTo(by),this}shorten(by){let f=Vector2.subtract(this.from,this.to);return f.normalize(),f.multiplyScalar(by/2),this.to.add(f),this.from.subtract(f),this}}module.exports=Line},{"./Vector2":24}],11:[function(require,module){"use strict";var _Mathround=Math.round,_Mathsin3=Math.sin,_Mathcos3=Math.cos,_MathPI2=Math.PI;class MathHelper{static round(value,decimals){return decimals=decimals?decimals:1,+(_Mathround(value+"e"+decimals)+"e-"+decimals)}static meanAngle(arr){let sin=0,cos=0;for(var i=0;i<arr.length;i++)sin+=_Mathsin3(arr[i]),cos+=_Mathcos3(arr[i]);return Math.atan2(sin/arr.length,cos/arr.length)}static innerAngle(n){return MathHelper.toRad(180*(n-2)/n)}static polyCircumradius(s,n){return s/(2*_Mathsin3(_MathPI2/n))}static apothem(r,n){return r*_Mathcos3(_MathPI2/n)}static apothemFromSideLength(s,n){let r=MathHelper.polyCircumradius(s,n);return MathHelper.apothem(r,n)}static centralAngle(n){return MathHelper.toRad(360/n)}static toDeg(rad){return rad*MathHelper.degFactor}static toRad(deg){return deg*MathHelper.radFactor}static parityOfPermutation(arr){let visited=new Uint8Array(arr.length),evenLengthCycleCount=0,traverseCycle=function(i,cycleLength=0){return 1===visited[i]?cycleLength:(cycleLength++,visited[i]=1,traverseCycle(arr[i],cycleLength))};for(var i=0;i<arr.length;i++){if(1===visited[i])continue;let cycleLength=traverseCycle(i);evenLengthCycleCount+=1-cycleLength%2}return evenLengthCycleCount%2?-1:1}static get radFactor(){return _MathPI2/180}static get degFactor(){return 180/_MathPI2}static get twoPI(){return 2*_MathPI2}}module.exports=MathHelper},{}],12:[function(require,module){"use strict";module.exports=class{static extend(){let that=this,extended={},deep=!1,i=0,length=arguments.length;"[object Boolean]"===Object.prototype.toString.call(arguments[0])&&(deep=arguments[0],i++);for(let merge=function(obj){for(var prop in obj)Object.prototype.hasOwnProperty.call(obj,prop)&&(extended[prop]=deep&&"[object Object]"===Object.prototype.toString.call(obj[prop])?that.extend(!0,extended[prop],obj[prop]):obj[prop])};i<length;i++){let obj=arguments[i];merge(obj)}return extended}}},{}],13:[function(require,module){"use strict";module.exports=function(){function peg$SyntaxError(message,expected,found,location){this.message=message,this.expected=expected,this.found=found,this.location=location,this.name="SyntaxError","function"==typeof Error.captureStackTrace&&Error.captureStackTrace(this,peg$SyntaxError)}function peg$parse(input,options){function peg$literalExpectation(text,ignoreCase){return{type:"literal",text:text,ignoreCase:ignoreCase}}function peg$classExpectation(parts,inverted,ignoreCase){return{type:"class",parts:parts,inverted:inverted,ignoreCase:ignoreCase}}function peg$computePosDetails(pos){var details=peg$posDetailsCache[pos],p;if(details)return details;for(p=pos-1;!peg$posDetailsCache[p];)p--;for(details=peg$posDetailsCache[p],details={line:details.line,column:details.column};p<pos;)10===input.charCodeAt(p)?(details.line++,details.column=1):details.column++,p++;return peg$posDetailsCache[pos]=details,details}function peg$computeLocation(startPos,endPos){var startPosDetails=peg$computePosDetails(startPos),endPosDetails=peg$computePosDetails(endPos);return{start:{offset:startPos,line:startPosDetails.line,column:startPosDetails.column},end:{offset:endPos,line:endPosDetails.line,column:endPosDetails.column}}}function peg$fail(expected){peg$currPos<peg$maxFailPos||(peg$currPos>peg$maxFailPos&&(peg$maxFailPos=peg$currPos,peg$maxFailExpected=[]),peg$maxFailExpected.push(expected))}function peg$buildSimpleError(message,location){return new peg$SyntaxError(message,null,null,location)}function peg$parsechain(){var s0,s1,s2,s3,s4,s5,s6,s7,s8,s9;if(s0=peg$currPos,s1=peg$currPos,s2=peg$parseatom(),s2!==peg$FAILED){for(s3=[],s4=peg$parsebranch();s4!==peg$FAILED;)s3.push(s4),s4=peg$parsebranch();if(s3!==peg$FAILED){for(s4=[],s5=peg$currPos,s6=peg$parsebond(),s6===peg$FAILED&&(s6=null),s6===peg$FAILED?(peg$currPos=s5,s5=peg$FAILED):(s7=peg$parsering(),s7===peg$FAILED?(peg$currPos=s5,s5=peg$FAILED):(s6=[s6,s7],s5=s6));s5!==peg$FAILED;)s4.push(s5),s5=peg$currPos,s6=peg$parsebond(),s6===peg$FAILED&&(s6=null),s6===peg$FAILED?(peg$currPos=s5,s5=peg$FAILED):(s7=peg$parsering(),s7===peg$FAILED?(peg$currPos=s5,s5=peg$FAILED):(s6=[s6,s7],s5=s6));if(s4!==peg$FAILED){for(s5=[],s6=peg$parsebranch();s6!==peg$FAILED;)s5.push(s6),s6=peg$parsebranch();if(s5===peg$FAILED)peg$currPos=s1,s1=peg$FAILED;else if(s6=peg$parsebond(),s6===peg$FAILED&&(s6=null),s6===peg$FAILED)peg$currPos=s1,s1=peg$FAILED;else if(s7=peg$parsechain(),s7===peg$FAILED&&(s7=null),s7!==peg$FAILED){for(s8=[],s9=peg$parsebranch();s9!==peg$FAILED;)s8.push(s9),s9=peg$parsebranch();s8===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3,s4,s5,s6,s7,s8],s1=s2)}else peg$currPos=s1,s1=peg$FAILED}else peg$currPos=s1,s1=peg$FAILED}else peg$currPos=s1,s1=peg$FAILED}else peg$currPos=s1,s1=peg$FAILED;return s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c0(s1)),s0=s1,s0}function peg$parsebranch(){var s0,s1,s2,s3,s4,s5;return s0=peg$currPos,s1=peg$currPos,40===input.charCodeAt(peg$currPos)?(s2="(",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c2)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s3=peg$parsebond(),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s4=peg$parsechain(),s4===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(41===input.charCodeAt(peg$currPos)?(s5=")",peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c4)),s5===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3,s4,s5],s1=s2)))),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c5(s1)),s0=s1,s0}function peg$parseatom(){var s0,s1;return s0=peg$currPos,s1=peg$parseorganicsymbol(),s1===peg$FAILED&&(s1=peg$parsearomaticsymbol(),s1===peg$FAILED&&(s1=peg$parsebracketatom(),s1===peg$FAILED&&(s1=peg$parsewildcard()))),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c6(s1)),s0=s1,s0}function peg$parsebond(){var s0,s1;if(s0=peg$currPos,peg$c7.test(input.charAt(peg$currPos))){if(s1=input.charAt(peg$currPos),s1===input.charAt(peg$currPos+1))throw s1=peg$FAILED,peg$buildSimpleError("The parser encountered a bond repetition.",peg$currPos+1);peg$currPos++}else s1=peg$FAILED,peg$fail(peg$c8);return s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c9(s1)),s0=s1,s0}function peg$parsebracketatom(){var s0,s1,s2,s3,s4,s5,s6,s7,s8,s9;return s0=peg$currPos,s1=peg$currPos,91===input.charCodeAt(peg$currPos)?(s2="[",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c11)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s3=peg$parseisotope(),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):("se"===input.substr(peg$currPos,2)?(s4="se",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c13)),s4===peg$FAILED&&("as"===input.substr(peg$currPos,2)?(s4="as",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c15)),s4===peg$FAILED&&(s4=peg$parsearomaticsymbol(),s4===peg$FAILED&&(s4=peg$parseelementsymbol(),s4===peg$FAILED&&(s4=peg$parsewildcard())))),s4===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s5=peg$parsechiral(),s5===peg$FAILED&&(s5=null),s5===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s6=peg$parsehcount(),s6===peg$FAILED&&(s6=null),s6===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s7=peg$parsecharge(),s7===peg$FAILED&&(s7=null),s7===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s8=peg$parseclass(),s8===peg$FAILED&&(s8=null),s8===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(93===input.charCodeAt(peg$currPos)?(s9="]",peg$currPos++):(s9=peg$FAILED,peg$fail(peg$c17)),s9===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3,s4,s5,s6,s7,s8,s9],s1=s2)))))))),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c18(s1)),s0=s1,s0}function peg$parseorganicsymbol(){var s0,s1,s2,s3;return s0=peg$currPos,s1=peg$currPos,66===input.charCodeAt(peg$currPos)?(s2="B",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c20)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(114===input.charCodeAt(peg$currPos)?(s3="r",peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c22)),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1===peg$FAILED&&(s1=peg$currPos,67===input.charCodeAt(peg$currPos)?(s2="C",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c24)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(108===input.charCodeAt(peg$currPos)?(s3="l",peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c26)),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1===peg$FAILED&&(peg$c27.test(input.charAt(peg$currPos))?(s1=input.charAt(peg$currPos),peg$currPos++):(s1=peg$FAILED,peg$fail(peg$c28)))),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c29(s1)),s0=s1,s0}function peg$parsearomaticsymbol(){var s0,s1;return s0=peg$currPos,peg$c30.test(input.charAt(peg$currPos))?(s1=input.charAt(peg$currPos),peg$currPos++):(s1=peg$FAILED,peg$fail(peg$c31)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c6(s1)),s0=s1,s0}function peg$parsewildcard(){var s0,s1;return s0=peg$currPos,42===input.charCodeAt(peg$currPos)?(s1="*",peg$currPos++):(s1=peg$FAILED,peg$fail(peg$c33)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c34(s1)),s0=s1,s0}function peg$parseelementsymbol(){var s0,s1,s2,s3;return s0=peg$currPos,s1=peg$currPos,peg$c35.test(input.charAt(peg$currPos))?(s2=input.charAt(peg$currPos),peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c36)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(peg$c37.test(input.charAt(peg$currPos))?(s3=input.charAt(peg$currPos),peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c38)),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c39(s1)),s0=s1,s0}function peg$parsering(){var s0,s1,s2,s3,s4;return s0=peg$currPos,s1=peg$currPos,37===input.charCodeAt(peg$currPos)?(s2="%",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c41)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(peg$c42.test(input.charAt(peg$currPos))?(s3=input.charAt(peg$currPos),peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c43)),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s4=input.charAt(peg$currPos),peg$currPos++):(s4=peg$FAILED,peg$fail(peg$c45)),s4===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3,s4],s1=s2))),s1===peg$FAILED&&(peg$c44.test(input.charAt(peg$currPos))?(s1=input.charAt(peg$currPos),peg$currPos++):(s1=peg$FAILED,peg$fail(peg$c45))),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c46(s1)),s0=s1,s0}function peg$parsechiral(){var s0,s1,s2,s3,s4,s5,s6;return s0=peg$currPos,s1=peg$currPos,64===input.charCodeAt(peg$currPos)?(s2="@",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c48)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(64===input.charCodeAt(peg$currPos)?(s3="@",peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c48)),s3===peg$FAILED&&(s3=peg$currPos,"TH"===input.substr(peg$currPos,2)?(s4="TH",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c50)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c51.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c52)),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5],s3=s4)),s3===peg$FAILED&&(s3=peg$currPos,"AL"===input.substr(peg$currPos,2)?(s4="AL",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c54)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c51.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c52)),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5],s3=s4)),s3===peg$FAILED&&(s3=peg$currPos,"SP"===input.substr(peg$currPos,2)?(s4="SP",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c56)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c57.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c58)),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5],s3=s4)),s3===peg$FAILED&&(s3=peg$currPos,"TB"===input.substr(peg$currPos,2)?(s4="TB",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c60)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c42.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c43)),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s6=input.charAt(peg$currPos),peg$currPos++):(s6=peg$FAILED,peg$fail(peg$c45)),s6===peg$FAILED&&(s6=null),s6===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5,s6],s3=s4))),s3===peg$FAILED&&(s3=peg$currPos,"OH"===input.substr(peg$currPos,2)?(s4="OH",peg$currPos+=2):(s4=peg$FAILED,peg$fail(peg$c62)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c42.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c43)),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s6=input.charAt(peg$currPos),peg$currPos++):(s6=peg$FAILED,peg$fail(peg$c45)),s6===peg$FAILED&&(s6=null),s6===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5,s6],s3=s4)))))))),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c63(s1)),s0=s1,s0}function peg$parsecharge(){var s0,s1;return s0=peg$currPos,s1=peg$parseposcharge(),s1===peg$FAILED&&(s1=peg$parsenegcharge()),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c64(s1)),s0=s1,s0}function peg$parseposcharge(){var s0,s1,s2,s3,s4,s5;return s0=peg$currPos,s1=peg$currPos,43===input.charCodeAt(peg$currPos)?(s2="+",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c66)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(43===input.charCodeAt(peg$currPos)?(s3="+",peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c66)),s3===peg$FAILED&&(s3=peg$currPos,peg$c42.test(input.charAt(peg$currPos))?(s4=input.charAt(peg$currPos),peg$currPos++):(s4=peg$FAILED,peg$fail(peg$c43)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c45)),s5===peg$FAILED&&(s5=null),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5],s3=s4))),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c67(s1)),s0=s1,s0}function peg$parsenegcharge(){var s0,s1,s2,s3,s4,s5;return s0=peg$currPos,s1=peg$currPos,45===input.charCodeAt(peg$currPos)?(s2="-",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c69)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(45===input.charCodeAt(peg$currPos)?(s3="-",peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c69)),s3===peg$FAILED&&(s3=peg$currPos,peg$c42.test(input.charAt(peg$currPos))?(s4=input.charAt(peg$currPos),peg$currPos++):(s4=peg$FAILED,peg$fail(peg$c43)),s4===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s5=input.charAt(peg$currPos),peg$currPos++):(s5=peg$FAILED,peg$fail(peg$c45)),s5===peg$FAILED&&(s5=null),s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5],s3=s4))),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c70(s1)),s0=s1,s0}function peg$parsehcount(){var s0,s1,s2,s3;return s0=peg$currPos,s1=peg$currPos,72===input.charCodeAt(peg$currPos)?(s2="H",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c72)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s3=input.charAt(peg$currPos),peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c45)),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c73(s1)),s0=s1,s0}function peg$parseclass(){var s0,s1,s2,s3,s4,s5,s6;if(s0=peg$currPos,s1=peg$currPos,58===input.charCodeAt(peg$currPos)?(s2=":",peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c75)),s2!==peg$FAILED){if(s3=peg$currPos,peg$c42.test(input.charAt(peg$currPos))?(s4=input.charAt(peg$currPos),peg$currPos++):(s4=peg$FAILED,peg$fail(peg$c43)),s4!==peg$FAILED){for(s5=[],peg$c44.test(input.charAt(peg$currPos))?(s6=input.charAt(peg$currPos),peg$currPos++):(s6=peg$FAILED,peg$fail(peg$c45));s6!==peg$FAILED;)s5.push(s6),peg$c44.test(input.charAt(peg$currPos))?(s6=input.charAt(peg$currPos),peg$currPos++):(s6=peg$FAILED,peg$fail(peg$c45));s5===peg$FAILED?(peg$currPos=s3,s3=peg$FAILED):(s4=[s4,s5],s3=s4)}else peg$currPos=s3,s3=peg$FAILED;s3===peg$FAILED&&(peg$c76.test(input.charAt(peg$currPos))?(s3=input.charAt(peg$currPos),peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c77))),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3],s1=s2)}else peg$currPos=s1,s1=peg$FAILED;return s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c78(s1)),s0=s1,s0}function peg$parseisotope(){var s0,s1,s2,s3,s4;return s0=peg$currPos,s1=peg$currPos,peg$c42.test(input.charAt(peg$currPos))?(s2=input.charAt(peg$currPos),peg$currPos++):(s2=peg$FAILED,peg$fail(peg$c43)),s2===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s3=input.charAt(peg$currPos),peg$currPos++):(s3=peg$FAILED,peg$fail(peg$c45)),s3===peg$FAILED&&(s3=null),s3===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(peg$c44.test(input.charAt(peg$currPos))?(s4=input.charAt(peg$currPos),peg$currPos++):(s4=peg$FAILED,peg$fail(peg$c45)),s4===peg$FAILED&&(s4=null),s4===peg$FAILED?(peg$currPos=s1,s1=peg$FAILED):(s2=[s2,s3,s4],s1=s2))),s1!==peg$FAILED&&(peg$savedPos=s0,s1=peg$c79(s1)),s0=s1,s0}options=void 0===options?{}:options;var nOpenParentheses=input.split("(").length-1,nCloseParentheses=input.split(")").length-1;if(nOpenParentheses!==nCloseParentheses)throw peg$buildSimpleError("The number of opening parentheses does not match the number of closing parentheses.",0);var peg$FAILED={},peg$startRuleFunctions={chain:peg$parsechain},peg$startRuleFunction=peg$parsechain,peg$c0=function(s){for(var branches=[],rings=[],i=0;i<s[1].length;i++)branches.push(s[1][i]);for(var i=0,bond;i<s[2].length;i++)bond=s[2][i][0]?s[2][i][0]:"-",rings.push({bond:bond,id:s[2][i][1]});for(var i=0;i<s[3].length;i++)branches.push(s[3][i]);for(var i=0;i<s[6].length;i++)branches.push(s[6][i]);return{atom:s[0],isBracket:!!s[0].element,branches:branches,branchCount:branches.length,ringbonds:rings,ringbondCount:rings.length,bond:s[4]?s[4]:"-",next:s[5],hasNext:!!s[5]}},peg$c2=peg$literalExpectation("(",!1),peg$c4=peg$literalExpectation(")",!1),peg$c5=function(b){var bond=b[1]?b[1]:"-";return b[2].branchBond=bond,b[2]},peg$c6=function(a){return a},peg$c7=/^[\-=#$:\/\\.]/,peg$c8=peg$classExpectation(["-","=","#","$",":","/","\\","."],!1,!1),peg$c9=function(b){return b},peg$c11=peg$literalExpectation("[",!1),peg$c13=peg$literalExpectation("se",!1),peg$c15=peg$literalExpectation("as",!1),peg$c17=peg$literalExpectation("]",!1),peg$c18=function(b){return{isotope:b[1],element:b[2],chirality:b[3],hcount:b[4],charge:b[5],class:b[6]}},peg$c20=peg$literalExpectation("B",!1),peg$c22=peg$literalExpectation("r",!1),peg$c24=peg$literalExpectation("C",!1),peg$c26=peg$literalExpectation("l",!1),peg$c27=/^[NOPSFI]/,peg$c28=peg$classExpectation(["N","O","P","S","F","I"],!1,!1),peg$c29=function(o){return 1<o.length?o.join(""):o},peg$c30=/^[bcnops]/,peg$c31=peg$classExpectation(["b","c","n","o","p","s"],!1,!1),peg$c33=peg$literalExpectation("*",!1),peg$c34=function(w){return w},peg$c35=/^[A-Z]/,peg$c36=peg$classExpectation([["A","Z"]],!1,!1),peg$c37=/^[a-z]/,peg$c38=peg$classExpectation([["a","z"]],!1,!1),peg$c39=function(e){return e.join("")},peg$c41=peg$literalExpectation("%",!1),peg$c42=/^[1-9]/,peg$c43=peg$classExpectation([["1","9"]],!1,!1),peg$c44=/^[0-9]/,peg$c45=peg$classExpectation([["0","9"]],!1,!1),peg$c46=function(r){return 1==r.length?+r:+r.join("").replace("%","")},peg$c48=peg$literalExpectation("@",!1),peg$c50=peg$literalExpectation("TH",!1),peg$c51=/^[12]/,peg$c52=peg$classExpectation(["1","2"],!1,!1),peg$c54=peg$literalExpectation("AL",!1),peg$c56=peg$literalExpectation("SP",!1),peg$c57=/^[1-3]/,peg$c58=peg$classExpectation([["1","3"]],!1,!1),peg$c60=peg$literalExpectation("TB",!1),peg$c62=peg$literalExpectation("OH",!1),peg$c63=function(c){return c[1]?"@"==c[1]?"@@":c[1].join("").replace(",",""):"@"},peg$c64=function(c){return c},peg$c66=peg$literalExpectation("+",!1),peg$c67=function(c){return c[1]?"+"==c[1]?2:+c[1].join(""):1},peg$c69=peg$literalExpectation("-",!1),peg$c70=function(c){return c[1]?"-"==c[1]?-2:-+c[1].join(""):-1},peg$c72=peg$literalExpectation("H",!1),peg$c73=function(h){return h[1]?+h[1]:1},peg$c75=peg$literalExpectation(":",!1),peg$c76=/^[0]/,peg$c77=peg$classExpectation(["0"],!1,!1),peg$c78=function(c){return+(c[1][0]+c[1][1].join(""))},peg$c79=function(i){return+i.join("")},peg$currPos=0,peg$savedPos=0,peg$posDetailsCache=[{line:1,column:1}],peg$maxFailPos=0,peg$maxFailExpected=[],peg$result;if("startRule"in options){if(!(options.startRule in peg$startRuleFunctions))throw new Error("Can't start parsing from rule \""+options.startRule+"\".");peg$startRuleFunction=peg$startRuleFunctions[options.startRule]}if(peg$result=peg$startRuleFunction(),peg$result!==peg$FAILED&&peg$currPos===input.length)return peg$result;throw peg$result!==peg$FAILED&&peg$currPos<input.length&&peg$fail(function(){return{type:"end"}}()),function(expected,found,location){return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected,found),expected,found,location)}(peg$maxFailExpected,peg$maxFailPos<input.length?input.charAt(peg$maxFailPos):null,peg$maxFailPos<input.length?peg$computeLocation(peg$maxFailPos,peg$maxFailPos+1):peg$computeLocation(peg$maxFailPos,peg$maxFailPos))}return function(child,parent){function ctor(){this.constructor=child}ctor.prototype=parent.prototype,child.prototype=new ctor}(peg$SyntaxError,Error),peg$SyntaxError.buildMessage=function(expected,found){function hex(ch){return ch.charCodeAt(0).toString(16).toUpperCase()}function literalEscape(s){return s.replace(/\\/g,"\\\\").replace(/"/g,"\\\"").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(ch){return"\\x0"+hex(ch)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(ch){return"\\x"+hex(ch)})}function classEscape(s){return s.replace(/\\/g,"\\\\").replace(/\]/g,"\\]").replace(/\^/g,"\\^").replace(/-/g,"\\-").replace(/\0/g,"\\0").replace(/\t/g,"\\t").replace(/\n/g,"\\n").replace(/\r/g,"\\r").replace(/[\x00-\x0F]/g,function(ch){return"\\x0"+hex(ch)}).replace(/[\x10-\x1F\x7F-\x9F]/g,function(ch){return"\\x"+hex(ch)})}function describeExpectation(expectation){return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation)}var DESCRIBE_EXPECTATION_FNS={literal:function(expectation){return"\""+literalEscape(expectation.text)+"\""},class:function(expectation){var escapedParts="",i;for(i=0;i<expectation.parts.length;i++)escapedParts+=expectation.parts[i]instanceof Array?classEscape(expectation.parts[i][0])+"-"+classEscape(expectation.parts[i][1]):classEscape(expectation.parts[i]);return"["+(expectation.inverted?"^":"")+escapedParts+"]"},any:function(){return"any character"},end:function(){return"end of input"},other:function(expectation){return expectation.description}};return"Expected "+function(expected){var descriptions=Array(expected.length),i,j;for(i=0;i<expected.length;i++)descriptions[i]=describeExpectation(expected[i]);if(descriptions.sort(),0<descriptions.length){for(i=1,j=1;i<descriptions.length;i++)descriptions[i-1]!==descriptions[i]&&(descriptions[j]=descriptions[i],j++);descriptions.length=j}switch(descriptions.length){case 1:return descriptions[0];case 2:return descriptions[0]+" or "+descriptions[1];default:return descriptions.slice(0,-1).join(", ")+", or "+descriptions[descriptions.length-1];}}(expected)+" but "+function(found){return found?"\""+literalEscape(found)+"\"":"end of input"}(found)+" found."},{SyntaxError:peg$SyntaxError,parse:peg$parse}}()},{}],14:[function(require,module){"use strict";const Parser=require("./Parser");module.exports=class{constructor(reactionSmiles){this.reactantsSmiles=[],this.reagentsSmiles=[],this.productsSmiles=[],this.reactants=[],this.reagents=[],this.products=[];let parts=reactionSmiles.split(">");if(3!==parts.length)throw new Error("Invalid reaction SMILES. Did you add fewer than or more than two '>'?");""!==parts[0]&&(this.reactantsSmiles=parts[0].split(".")),""!==parts[1]&&(this.reagentsSmiles=parts[1].split(".")),""!==parts[2]&&(this.productsSmiles=parts[2].split("."));for(var i=0;i<this.reactantsSmiles.length;i++)this.reactants.push(Parser.parse(this.reactantsSmiles[i]));for(var i=0;i<this.reagentsSmiles.length;i++)this.reagents.push(Parser.parse(this.reagentsSmiles[i]));for(var i=0;i<this.productsSmiles.length;i++)this.products.push(Parser.parse(this.productsSmiles[i]))}}},{"./Parser":13}],15:[function(require,module){"use strict";const SvgDrawer=require("./SvgDrawer"),Vector2=require("./Vector2"),Options=require("./Options"),SvgWrapper=require("./SvgWrapper");module.exports=class{constructor(options,moleculeOptions){this.drawer=new SvgDrawer(moleculeOptions),this.defaultOptions={spacing:15,plus:{},arrow:{}},this.opts=Options.extend(!0,this.defaultOptions,options)}draw(reaction,target,textAbove="{reagents}",textBelow="",themeName="light",infoOnly=!1){console.log(reaction);"string"==typeof target||target instanceof String?document.getElementById(target):target;for(var i=0;i<reaction.reactants.length;i++){let g=this.drawer.draw(reaction.reactants[i],null,themeName,infoOnly);console.log(g)}}}},{"./Options":12,"./SvgDrawer":20,"./SvgWrapper":21,"./Vector2":24}],16:[function(require,module){"use strict";const Reaction=require("./Reaction");module.exports=class{static parse(reactionSmiles){let reaction=new Reaction(reactionSmiles);return reaction}}},{"./Reaction":14}],17:[function(require,module){"use strict";const ArrayHelper=require("./ArrayHelper"),Vector2=require("./Vector2"),Vertex=require("./Vertex"),RingConnection=require("./RingConnection");class Ring{constructor(members){this.id=null,this.members=members,this.edges=[],this.insiders=[],this.neighbours=[],this.positioned=!1,this.center=new Vector2(0,0),this.rings=[],this.isBridged=!1,this.isPartOfBridged=!1,this.isSpiro=!1,this.isFused=!1,this.centralAngle=0,this.canFlip=!0}clone(){let clone=new Ring(this.members);return clone.id=this.id,clone.insiders=ArrayHelper.clone(this.insiders),clone.neighbours=ArrayHelper.clone(this.neighbours),clone.positioned=this.positioned,clone.center=this.center.clone(),clone.rings=ArrayHelper.clone(this.rings),clone.isBridged=this.isBridged,clone.isPartOfBridged=this.isPartOfBridged,clone.isSpiro=this.isSpiro,clone.isFused=this.isFused,clone.centralAngle=this.centralAngle,clone.canFlip=this.canFlip,clone}getSize(){return this.members.length}getPolygon(vertices){let polygon=[];for(let i=0;i<this.members.length;i++)polygon.push(vertices[this.members[i]].position);return polygon}getAngle(){return Math.PI-this.centralAngle}eachMember(vertices,callback,startVertexId,previousVertexId){startVertexId=startVertexId||0===startVertexId?startVertexId:this.members[0];let current=startVertexId,max=0;for(;null!=current&&100>max;){let prev=current;callback(prev),current=vertices[current].getNextInRing(vertices,this.id,previousVertexId),previousVertexId=prev,current==startVertexId&&(current=null),max++}}getOrderedNeighbours(ringConnections){let orderedNeighbours=Array(this.neighbours.length);for(let i=0,vertices;i<this.neighbours.length;i++)vertices=RingConnection.getVertices(ringConnections,this.id,this.neighbours[i]),orderedNeighbours[i]={n:vertices.length,neighbour:this.neighbours[i]};return orderedNeighbours.sort(function(a,b){return b.n-a.n}),orderedNeighbours}isBenzeneLike(vertices){let db=this.getDoubleBondCount(vertices),length=this.members.length;return 3===db&&6===length||2===db&&5===length}getDoubleBondCount(vertices){let doubleBondCount=0;for(let i=0,atom;i<this.members.length;i++)atom=vertices[this.members[i]].value,("="===atom.bondType||"="===atom.branchBond)&&doubleBondCount++;return doubleBondCount}contains(vertexId){for(let i=0;i<this.members.length;i++)if(this.members[i]==vertexId)return!0;return!1}}module.exports=Ring},{"./ArrayHelper":2,"./RingConnection":18,"./Vector2":24,"./Vertex":25}],18:[function(require,module){"use strict";const Vertex=require("./Vertex"),Ring=require("./Ring");module.exports=class{constructor(firstRing,secondRing){this.id=null,this.firstRingId=firstRing.id,this.secondRingId=secondRing.id,this.vertices=new Set;for(var m=0;m<firstRing.members.length;m++){let c=firstRing.members[m];for(let n=0,d;n<secondRing.members.length;n++)d=secondRing.members[n],c===d&&this.addVertex(c)}}addVertex(vertexId){this.vertices.add(vertexId)}updateOther(ringId,otherRingId){this.firstRingId===otherRingId?this.secondRingId=ringId:this.firstRingId=ringId}containsRing(ringId){return this.firstRingId===ringId||this.secondRingId===ringId}isBridge(vertices){if(2<this.vertices.size)return!0;for(let vertexId of this.vertices)if(2<vertices[vertexId].value.rings.length)return!0;return!1}static isBridge(ringConnections,vertices,firstRingId,secondRingId){let ringConnection=null;for(let i=0;i<ringConnections.length;i++)if(ringConnection=ringConnections[i],ringConnection.firstRingId===firstRingId&&ringConnection.secondRingId===secondRingId||ringConnection.firstRingId===secondRingId&&ringConnection.secondRingId===firstRingId)return ringConnection.isBridge(vertices);return!1}static getNeighbours(ringConnections,ringId){let neighbours=[];for(let i=0,ringConnection;i<ringConnections.length;i++)ringConnection=ringConnections[i],ringConnection.firstRingId===ringId?neighbours.push(ringConnection.secondRingId):ringConnection.secondRingId===ringId&&neighbours.push(ringConnection.firstRingId);return neighbours}static getVertices(ringConnections,firstRingId,secondRingId){for(let i=0,ringConnection;i<ringConnections.length;i++)if(ringConnection=ringConnections[i],ringConnection.firstRingId===firstRingId&&ringConnection.secondRingId===secondRingId||ringConnection.firstRingId===secondRingId&&ringConnection.secondRingId===firstRingId)return[...ringConnection.vertices]}}},{"./Ring":17,"./Vertex":25}],19:[function(require,module){"use strict";const Graph=require("./Graph");class SSSR{static getRings(graph,experimental=!1){let adjacencyMatrix=graph.getComponentsAdjacencyMatrix();if(0===adjacencyMatrix.length)return null;let connectedComponents=Graph.getConnectedComponents(adjacencyMatrix),rings=[];for(var i=0;i<connectedComponents.length;i++){let connectedComponent=connectedComponents[i],ccAdjacencyMatrix=graph.getSubgraphAdjacencyMatrix([...connectedComponent]),arrBondCount=new Uint16Array(ccAdjacencyMatrix.length),arrRingCount=new Uint16Array(ccAdjacencyMatrix.length);for(var j=0;j<ccAdjacencyMatrix.length;j++){arrRingCount[j]=0,arrBondCount[j]=0;for(var k=0;k<ccAdjacencyMatrix[j].length;k++)arrBondCount[j]+=ccAdjacencyMatrix[j][k]}let nEdges=0;for(var j=0;j<ccAdjacencyMatrix.length;j++)for(var k=j+1;k<ccAdjacencyMatrix.length;k++)nEdges+=ccAdjacencyMatrix[j][k];let nSssr=nEdges-ccAdjacencyMatrix.length+1,allThree=!0;for(var j=0;j<arrBondCount.length;j++)3!==arrBondCount[j]&&(allThree=!1);if(allThree&&(nSssr=2+nEdges-ccAdjacencyMatrix.length),1==nSssr){rings.push([...connectedComponent]);continue}experimental&&(nSssr=999);let{d,pe,pe_prime}=SSSR.getPathIncludedDistanceMatrices(ccAdjacencyMatrix),c=SSSR.getRingCandidates(d,pe,pe_prime),sssr=SSSR.getSSSR(c,d,ccAdjacencyMatrix,pe,pe_prime,arrBondCount,arrRingCount,nSssr);for(var j=0;j<sssr.length;j++){let ring=Array(sssr[j].size),index=0;for(let val of sssr[j])ring[index++]=connectedComponent[val];rings.push(ring)}}return rings}static matrixToString(matrix){let str="";for(var i=0;i<matrix.length;i++){for(var j=0;j<matrix[i].length;j++)str+=matrix[i][j]+" ";str+="\n"}return str}static getPathIncludedDistanceMatrices(adjacencyMatrix){var _NumberPOSITIVE_INFINITY=Number.POSITIVE_INFINITY;let length=adjacencyMatrix.length,d=Array(length),pe=Array(length),pe_prime=Array(length);for(var l=0,m=0,n=0,i=length;i--;){d[i]=Array(length),pe[i]=Array(length),pe_prime[i]=Array(length);for(var j=length;j--;)d[i][j]=i===j||1===adjacencyMatrix[i][j]?adjacencyMatrix[i][j]:_NumberPOSITIVE_INFINITY,pe[i][j]=1===d[i][j]?[[[i,j]]]:[],pe_prime[i][j]=[]}for(var k=length,j;k--;)for(i=length;i--;)for(j=length;j--;){const previousPathLength=d[i][j],newPathLength=d[i][k]+d[k][j];if(previousPathLength>newPathLength){var l,m,n;if(previousPathLength===newPathLength+1)for(pe_prime[i][j]=[pe[i][j].length],l=pe[i][j].length;l--;)for(pe_prime[i][j][l]=[pe[i][j][l].length],m=pe[i][j][l].length;m--;)for(pe_prime[i][j][l][m]=[pe[i][j][l][m].length],n=pe[i][j][l][m].length;n--;)pe_prime[i][j][l][m][n]=[pe[i][j][l][m][0],pe[i][j][l][m][1]];else pe_prime[i][j]=[];for(d[i][j]=newPathLength,pe[i][j]=[[]],l=pe[i][k][0].length;l--;)pe[i][j][0].push(pe[i][k][0][l]);for(l=pe[k][j][0].length;l--;)pe[i][j][0].push(pe[k][j][0][l])}else if(previousPathLength===newPathLength){if(pe[i][k].length&&pe[k][j].length){var l;if(pe[i][j].length){let tmp=[];for(l=pe[i][k][0].length;l--;)tmp.push(pe[i][k][0][l]);for(l=pe[k][j][0].length;l--;)tmp.push(pe[k][j][0][l]);pe[i][j].push(tmp)}else{let tmp=[];for(l=pe[i][k][0].length;l--;)tmp.push(pe[i][k][0][l]);for(l=pe[k][j][0].length;l--;)tmp.push(pe[k][j][0][l]);pe[i][j][0]=tmp}}}else if(previousPathLength===newPathLength-1){var l;if(pe_prime[i][j].length){let tmp=[];for(l=pe[i][k][0].length;l--;)tmp.push(pe[i][k][0][l]);for(l=pe[k][j][0].length;l--;)tmp.push(pe[k][j][0][l]);pe_prime[i][j].push(tmp)}else{let tmp=[];for(l=pe[i][k][0].length;l--;)tmp.push(pe[i][k][0][l]);for(l=pe[k][j][0].length;l--;)tmp.push(pe[k][j][0][l]);pe_prime[i][j][0]=tmp}}}return{d:d,pe:pe,pe_prime:pe_prime}}static getRingCandidates(d,pe,pe_prime){let length=d.length,candidates=[],c=0;for(let i=0;i<length;i++)for(let j=0;j<length;j++)if(0===d[i][j]||1===pe[i][j].length&&0===pe_prime[i][j])continue;else c=0===pe_prime[i][j].length?2*d[i][j]:2*(d[i][j]+.5),c!==1/0&&candidates.push([c,pe[i][j],pe_prime[i][j]]);return candidates.sort(function(a,b){return a[0]-b[0]}),candidates}static getSSSR(c,d,adjacencyMatrix,pe,pe_prime,arrBondCount,arrRingCount,nsssr){let cSssr=[],allBonds=[];for(let i=0;i<c.length;i++)if(0!=c[i][0]%2)for(let j=0,bonds;j<c[i][2].length;j++){bonds=c[i][1][0].concat(c[i][2][j]);for(var k=0;k<bonds.length;k++)bonds[k][0].constructor===Array&&(bonds[k]=bonds[k][0]);let atoms=SSSR.bondsToAtoms(bonds);if(SSSR.getBondCount(atoms,adjacencyMatrix)!==atoms.size||SSSR.pathSetsContain(cSssr,atoms,bonds,allBonds,arrBondCount,arrRingCount)||(cSssr.push(atoms),allBonds=allBonds.concat(bonds)),cSssr.length>nsssr)return cSssr}else for(let j=0,bonds;j<c[i][1].length-1;j++){bonds=c[i][1][j].concat(c[i][1][j+1]);for(var k=0;k<bonds.length;k++)bonds[k][0].constructor===Array&&(bonds[k]=bonds[k][0]);let atoms=SSSR.bondsToAtoms(bonds);if(SSSR.getBondCount(atoms,adjacencyMatrix)!==atoms.size||SSSR.pathSetsContain(cSssr,atoms,bonds,allBonds,arrBondCount,arrRingCount)||(cSssr.push(atoms),allBonds=allBonds.concat(bonds)),cSssr.length>nsssr)return cSssr}return cSssr}static getEdgeCount(adjacencyMatrix){let edgeCount=0,length=adjacencyMatrix.length;for(var i=length-1;i--;)for(var j=length;j--;)1===adjacencyMatrix[i][j]&&edgeCount++;return edgeCount}static getEdgeList(adjacencyMatrix){let length=adjacencyMatrix.length,edgeList=[];for(var i=length-1;i--;)for(var j=length;j--;)1===adjacencyMatrix[i][j]&&edgeList.push([i,j]);return edgeList}static bondsToAtoms(bonds){let atoms=new Set;for(var i=bonds.length;i--;)atoms.add(bonds[i][0]),atoms.add(bonds[i][1]);return atoms}static getBondCount(atoms,adjacencyMatrix){let count=0;for(let u of atoms)for(let v of atoms)u!==v&&(count+=adjacencyMatrix[u][v]);return count/2}static pathSetsContain(pathSets,pathSet,bonds,allBonds,arrBondCount,arrRingCount){for(var i=pathSets.length;i--;){if(SSSR.isSupersetOf(pathSet,pathSets[i]))return!0;if(pathSets[i].size===pathSet.size&&SSSR.areSetsEqual(pathSets[i],pathSet))return!0}let count=0,allContained=!1;for(i=bonds.length;i--;)for(var j=allBonds.length;j--;)(bonds[i][0]===allBonds[j][0]&&bonds[i][1]===allBonds[j][1]||bonds[i][1]===allBonds[j][0]&&bonds[i][0]===allBonds[j][1])&&count++,count===bonds.length&&(allContained=!0);let specialCase=!1;if(allContained)for(let element of pathSet)if(arrRingCount[element]<arrBondCount[element]){specialCase=!0;break}if(allContained&&!specialCase)return!0;for(let element of pathSet)arrRingCount[element]++;return!1}static areSetsEqual(setA,setB){if(setA.size!==setB.size)return!1;for(let element of setA)if(!setB.has(element))return!1;return!0}static isSupersetOf(setA,setB){for(var element of setB)if(!setA.has(element))return!1;return!0}}module.exports=SSSR},{"./Graph":9}],20:[function(require,module){"use strict";var _Mathabs2=Math.abs,_MathPI3=Math.PI;const ArrayHelper=require("./ArrayHelper"),Atom=require("./Atom"),DrawerBase=require("./DrawerBase"),Graph=require("./Graph"),Line=require("./Line"),SvgWrapper=require("./SvgWrapper"),ThemeManager=require("./ThemeManager"),Vector2=require("./Vector2");module.exports=class{constructor(options){this.preprocessor=new DrawerBase(options),this.opts=this.preprocessor.opts}draw(data,target,themeName="light",infoOnly=!1){"string"==typeof target||target instanceof String?target=document.getElementById(target):null===target&&(target=document.createElementNS("http://www.w3.org/2000/svg","svg"));let preprocessor=this.preprocessor;return preprocessor.initDraw(data,themeName,infoOnly),infoOnly||(this.themeManager=new ThemeManager(this.opts.themes,themeName),this.svgWrapper=new SvgWrapper(this.themeManager,target,this.opts)),preprocessor.processGraph(),this.svgWrapper.determineDimensions(preprocessor.graph.vertices),this.drawEdges(preprocessor.opts.debug),this.drawVertices(preprocessor.opts.debug),preprocessor.opts.debug&&(console.log(preprocessor.graph),console.log(preprocessor.rings),console.log(preprocessor.ringConnections)),this.svgWrapper.constructSvg(),target}drawAromaticityRing(ring){let svgWrapper=this.svgWrapper;svgWrapper.drawRing(ring.center.x,ring.center.y,ring.getSize())}drawEdges(debug){let preprocessor=this.preprocessor,graph=preprocessor.graph,rings=preprocessor.rings,drawn=Array(this.preprocessor.graph.edges.length);if(drawn.fill(!1),graph.traverseBF(0,vertex=>{let edges=graph.getEdges(vertex.id);for(var i=0;i<edges.length;i++){let edgeId=edges[i];drawn[edgeId]||(drawn[edgeId]=!0,this.drawEdge(edgeId,debug))}}),!this.bridgedRing)for(var i=0;i<rings.length;i++){let ring=rings[i];preprocessor.isRingAromatic(ring)&&this.drawAromaticityRing(ring)}}drawEdge(edgeId,debug){let preprocessor=this.preprocessor,opts=preprocessor.opts,svgWrapper=this.svgWrapper,edge=preprocessor.graph.edges[edgeId],vertexA=preprocessor.graph.vertices[edge.sourceId],vertexB=preprocessor.graph.vertices[edge.targetId],elementA=vertexA.value.element,elementB=vertexB.value.element;if(vertexA.value.isDrawn&&vertexB.value.isDrawn||"default"!==preprocessor.opts.atomVisualization){let a=vertexA.position,b=vertexB.position,normals=preprocessor.getEdgeNormals(edge),sides=ArrayHelper.clone(normals);if(sides[0].multiplyScalar(10).add(a),sides[1].multiplyScalar(10).add(a),"="===edge.bondType||"="===preprocessor.getRingbondType(vertexA,vertexB)||edge.isPartOfAromaticRing&&preprocessor.bridgedRing){let inRing=preprocessor.areVerticesInSameRing(vertexA,vertexB),s=preprocessor.chooseSide(vertexA,vertexB,sides);if(inRing){let lcr=preprocessor.getLargestOrAromaticCommonRing(vertexA,vertexB),center=lcr.center;normals[0].multiplyScalar(opts.bondSpacing),normals[1].multiplyScalar(opts.bondSpacing);let line=null;line=center.sameSideAs(vertexA.position,vertexB.position,Vector2.add(a,normals[0]))?new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB):new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB),line.shorten(opts.bondLength-opts.shortBondLength*opts.bondLength),edge.isPartOfAromaticRing?svgWrapper.drawLine(line,!0):svgWrapper.drawLine(line),svgWrapper.drawLine(new Line(a,b,elementA,elementB))}else if(edge.center||vertexA.isTerminal()&&vertexB.isTerminal()||0==s.anCount&&1<s.bnCount||0==s.bnCount&&1<s.anCount){this.multiplyNormals(normals,opts.halfBondSpacing);let lineA=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB),lineB=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);svgWrapper.drawLine(lineA),svgWrapper.drawLine(lineB)}else if(s.sideCount[0]>s.sideCount[1]||s.totalSideCount[0]>s.totalSideCount[1]){this.multiplyNormals(normals,opts.bondSpacing);let line=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB);line.shorten(opts.bondLength-opts.shortBondLength*opts.bondLength),svgWrapper.drawLine(line),svgWrapper.drawLine(new Line(a,b,elementA,elementB))}else if(s.sideCount[0]<s.sideCount[1]||s.totalSideCount[0]<=s.totalSideCount[1]){this.multiplyNormals(normals,opts.bondSpacing);let line=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);line.shorten(opts.bondLength-opts.shortBondLength*opts.bondLength),svgWrapper.drawLine(line),svgWrapper.drawLine(new Line(a,b,elementA,elementB))}}else if("#"===edge.bondType){normals[0].multiplyScalar(opts.bondSpacing/1.5),normals[1].multiplyScalar(opts.bondSpacing/1.5);let lineA=new Line(Vector2.add(a,normals[0]),Vector2.add(b,normals[0]),elementA,elementB),lineB=new Line(Vector2.add(a,normals[1]),Vector2.add(b,normals[1]),elementA,elementB);svgWrapper.drawLine(lineA),svgWrapper.drawLine(lineB),svgWrapper.drawLine(new Line(a,b,elementA,elementB))}else if("."===edge.bondType);else{let isChiralCenterA=vertexA.value.isStereoCenter,isChiralCenterB=vertexB.value.isStereoCenter;"up"===edge.wedge?svgWrapper.drawWedge(new Line(a,b,elementA,elementB,isChiralCenterA,isChiralCenterB)):"down"===edge.wedge?svgWrapper.drawDashedWedge(new Line(a,b,elementA,elementB,isChiralCenterA,isChiralCenterB)):svgWrapper.drawLine(new Line(a,b,elementA,elementB,isChiralCenterA,isChiralCenterB))}if(debug){let midpoint=Vector2.midpoint(a,b);svgWrapper.drawDebugText(midpoint.x,midpoint.y,"e: "+edgeId)}}}drawVertices(debug){let preprocessor=this.preprocessor,opts=preprocessor.opts,graph=preprocessor.graph,rings=preprocessor.rings,svgWrapper=this.svgWrapper;for(var i=graph.vertices.length,i=0;i<graph.vertices.length;i++){let vertex=graph.vertices[i],atom=vertex.value,charge=0,isotope=0,bondCount=vertex.value.bondCount,element=atom.element,hydrogens=Atom.maxBonds[element]-bondCount,dir=vertex.getTextDirection(graph.vertices),isTerminal=!!(opts.terminalCarbons||"C"!==element||atom.hasAttachedPseudoElements)&&vertex.isTerminal(),isCarbon="C"===atom.element;if("N"===atom.element&&atom.isPartOfAromaticRing&&(hydrogens=0),atom.bracket&&(hydrogens=atom.bracket.hcount,charge=atom.bracket.charge,isotope=atom.bracket.isotope),"allballs"===opts.atomVisualization)svgWrapper.drawBall(vertex.position.x,vertex.position.y,element);else if(atom.isDrawn&&(!isCarbon||atom.drawExplicit||isTerminal||atom.hasAttachedPseudoElements)||1===graph.vertices.length)"default"===opts.atomVisualization?svgWrapper.drawText(vertex.position.x,vertex.position.y,element,hydrogens,dir,isTerminal,charge,isotope,atom.getAttachedPseudoElements()):"balls"===opts.atomVisualization&&svgWrapper.drawBall(vertex.position.x,vertex.position.y,element);else if(2===vertex.getNeighbourCount()&&!0==vertex.forcePositioned){let a=graph.vertices[vertex.neighbours[0]].position,b=graph.vertices[vertex.neighbours[1]].position,angle=Vector2.threePointangle(vertex.position,a,b);.1>_Mathabs2(_MathPI3-angle)&&svgWrapper.drawPoint(vertex.position.x,vertex.position.y,element)}if(debug){let value="v: "+vertex.id+" "+ArrayHelper.print(atom.ringbonds);svgWrapper.drawDebugText(vertex.position.x,vertex.position.y,value)}}if(opts.debug)for(var i=0;i<rings.length;i++){let center=rings[i].center;svgWrapper.drawDebugPoint(center.x,center.y,"r: "+rings[i].id)}}getTotalOverlapScore(){return this.preprocessor.getTotalOverlapScore()}getMolecularFormula(){return this.preprocessor.getMolecularFormula()}multiplyNormals(normals,spacing){normals[0].multiplyScalar(spacing),normals[1].multiplyScalar(spacing)}}},{"./ArrayHelper":2,"./Atom":3,"./DrawerBase":6,"./Graph":9,"./Line":10,"./SvgWrapper":21,"./ThemeManager":22,"./Vector2":24}],21:[function(require,module){"use strict";var _Mathabs3=Math.abs,_NumberMAX_VALUE2=Number.MAX_VALUE;function makeid(length){for(var result="",characters="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",charactersLength=characters.length,i=0;i<length;i++)result+=characters.charAt(Math.floor(Math.random()*charactersLength));return result}const{getChargeText}=require("./UtilityFunctions"),Line=require("./Line"),Vector2=require("./Vector2"),MathHelper=require("./MathHelper"),Glyphs=require("./Glyphs");module.exports=class{constructor(themeManager,target,options){this.svg="string"==typeof target||target instanceof String?document.getElementById(target):target,this.container=null,this.opts=options,this.uid=makeid(5),this.gradientId=0,this.paths=[],this.vertices=[],this.gradients=[],this.offsetX=0,this.offsetY=0,this.drawingWidth=0,this.drawingHeight=0,this.halfBondThickness=this.opts.bondThickness/2,this.themeManager=themeManager,this.maskElements=[];let mask=document.createElementNS("http://www.w3.org/2000/svg","rect");for(mask.setAttributeNS(null,"x",0),mask.setAttributeNS(null,"y",0),mask.setAttributeNS(null,"width","100%"),mask.setAttributeNS(null,"height","100%"),mask.setAttributeNS(null,"fill","white"),this.maskElements.push(mask);this.svg.firstChild;)this.svg.removeChild(this.svg.firstChild);this.style=document.createElementNS("http://www.w3.org/2000/svg","style"),this.style.appendChild(document.createTextNode(`
                .element {
                    font: ${this.opts.fontSizeLarge}pt Helvetica, Arial, sans-serif;
                }
                .sub {
                    font: ${this.opts.fontSizeSmall}pt Helvetica, Arial, sans-serif;
                }
            `)),this.svg?this.svg.appendChild(this.style):(this.container=document.createElementNS("http://www.w3.org/2000/svg","g"),container.appendChild(this.style))}constructSvg(){let defs=document.createElementNS("http://www.w3.org/2000/svg","defs"),masks=document.createElementNS("http://www.w3.org/2000/svg","mask"),paths=document.createElementNS("http://www.w3.org/2000/svg","g"),vertices=document.createElementNS("http://www.w3.org/2000/svg","g"),pathChildNodes=this.paths;masks.setAttributeNS(null,"id",this.uid+"-text-mask");for(let path of pathChildNodes)paths.appendChild(path);for(let vertex of this.vertices)vertices.appendChild(vertex);for(let mask of this.maskElements)masks.appendChild(mask);for(let gradient of this.gradients)defs.appendChild(gradient);return paths.setAttributeNS(null,"mask","url(#"+this.uid+"-text-mask)"),this.svg?void(this.svg.appendChild(defs),this.svg.appendChild(masks),this.svg.appendChild(paths),this.svg.appendChild(vertices)):(this.container.appendChild(defs),this.container.appendChild(masks),this.container.appendChild(paths),this.container.appendChild(vertices),this.container)}createGradient(line){let gradient=document.createElementNS("http://www.w3.org/2000/svg","linearGradient"),gradientUrl=this.uid+`-line-${this.gradientId++}`,l=line.getLeftVector(),r=line.getRightVector(),fromX=l.x+this.offsetX,fromY=l.y+this.offsetY,toX=r.x+this.offsetX,toY=r.y+this.offsetY;gradient.setAttributeNS(null,"id",gradientUrl),gradient.setAttributeNS(null,"gradientUnits","userSpaceOnUse"),gradient.setAttributeNS(null,"x1",fromX),gradient.setAttributeNS(null,"y1",fromY),gradient.setAttributeNS(null,"x2",toX),gradient.setAttributeNS(null,"y2",toY);let firstStop=document.createElementNS("http://www.w3.org/2000/svg","stop");firstStop.setAttributeNS(null,"stop-color",this.themeManager.getColor(line.getLeftElement())||this.themeManager.getColor("C")),firstStop.setAttributeNS(null,"offset","20%");let secondStop=document.createElementNS("http://www.w3.org/2000/svg","stop");return secondStop.setAttributeNS(null,"stop-color",this.themeManager.getColor(line.getRightElement()||this.themeManager.getColor("C"))),secondStop.setAttributeNS(null,"offset","100%"),gradient.appendChild(firstStop),gradient.appendChild(secondStop),this.gradients.push(gradient),gradientUrl}createSubSuperScripts(text,shift){let elem=document.createElementNS("http://www.w3.org/2000/svg","tspan");return elem.setAttributeNS(null,"baseline-shift",shift),elem.appendChild(document.createTextNode(text)),elem.setAttributeNS(null,"class","sub"),elem}createUnicodeSubscript(n){let result="";return n.toString().split("").forEach(d=>{result+=["\u2080","\u2081","\u2082","\u2083","\u2084","\u2085","\u2086","\u2087","\u2088","\u2089"][parseInt(d)]}),result}createUnicodeSuperscript(n){let result="";return n.toString().split("").forEach(d=>{result+=["\u2070","\xB9","\xB2","\xB3","\u2074","\u2075","\u2076","\u2077","\u2078","\u2079"][parseInt(d)]}),result}createUnicodeCharge(n){return 1===n?"\u207A":-1===n?"\u207B":1<n?this.createUnicodeSuperscript(n)+"\u207A":-1>n?this.createUnicodeSuperscript(n)+"\u207B":""}determineDimensions(vertices){let maxX=-_NumberMAX_VALUE2,maxY=-_NumberMAX_VALUE2,minX=_NumberMAX_VALUE2,minY=_NumberMAX_VALUE2;for(var i=0;i<vertices.length;i++){if(!vertices[i].value.isDrawn)continue;let p=vertices[i].position;maxX<p.x&&(maxX=p.x),maxY<p.y&&(maxY=p.y),minX>p.x&&(minX=p.x),minY>p.y&&(minY=p.y)}let padding=this.opts.padding;maxX+=padding,maxY+=padding,minX-=padding,minY-=padding,this.drawingWidth=maxX-minX,this.drawingHeight=maxY-minY;let viewBoxDim=Math.round(this.drawingWidth>this.drawingHeight?this.drawingWidth:this.drawingHeight);this.svg.setAttributeNS(null,"viewBox",`0 0 ${viewBoxDim} ${viewBoxDim}`);let w=0<this.svg.clientWidth?this.svg.clientWidth:this.svg.viewBox.baseVal.width,h=0<this.svg.clientHeight?this.svg.clientHeight:this.svg.viewBox.baseVal.height,scaleX=w/this.drawingWidth,scaleY=h/this.drawingHeight,scale=scaleX<scaleY?scaleX:scaleY;this.offsetX=-minX,this.offsetY=-minY,scaleX<scaleY?this.offsetY+=h/(2*scale)-this.drawingHeight/2:this.offsetX+=w/(2*scale)-this.drawingWidth/2}drawBall(x,y,elementName){let ball=document.createElementNS("http://www.w3.org/2000/svg","circle");ball.setAttributeNS(null,"cx",x+this.offsetX),ball.setAttributeNS(null,"cy",y+this.offsetY),ball.setAttributeNS(null,"r",this.opts.bondLength/4.5),ball.setAttributeNS(null,"fill",this.themeManager.getColor(elementName)),this.vertices.push(ball)}drawDashedWedge(line){if(isNaN(line.from.x)||isNaN(line.from.y)||isNaN(line.to.x)||isNaN(line.to.y))return;let offsetX=this.offsetX,offsetY=this.offsetY,l=line.getLeftVector().clone(),r=line.getRightVector().clone(),normals=Vector2.normals(l,r);normals[0].normalize(),normals[1].normalize();let isRightChiralCenter=line.getRightChiral(),start,end;isRightChiralCenter?(start=r,end=l):(start=l,end=r);let dir=Vector2.subtract(end,start).normalize(),length=line.getLength(),step=1.25/(length/(3*this.opts.bondThickness)),gradient=this.createGradient(line);for(let t=0;1>t;t+=step){let to=Vector2.multiplyScalar(dir,t*length),startDash=Vector2.add(start,to),width=1.5*t,dashOffset=Vector2.multiplyScalar(normals[0],width);startDash.subtract(dashOffset);let endDash=startDash.clone();endDash.add(Vector2.multiplyScalar(dashOffset,2)),this.drawLine(new Line(startDash,endDash),null,gradient)}}drawDebugPoint(x,y,debugText="",color="#f00"){let point=document.createElementNS("http://www.w3.org/2000/svg","circle");point.setAttributeNS(null,"cx",x+this.offsetX),point.setAttributeNS(null,"cy",y+this.offsetY),point.setAttributeNS(null,"r","2"),point.setAttributeNS(null,"fill","#f00"),this.vertices.push(point),this.drawDebugText(x,y,debugText)}drawDebugText(x,y,text){let textElem=document.createElementNS("http://www.w3.org/2000/svg","text");textElem.setAttributeNS(null,"x",x+this.offsetX),textElem.setAttributeNS(null,"y",y+this.offsetY),textElem.setAttributeNS(null,"class","debug"),textElem.setAttributeNS(null,"fill","#ff0000"),textElem.setAttributeNS(null,"style",`
                font: 5px Droid Sans, sans-serif;
            `),textElem.appendChild(document.createTextNode(text)),this.vertices.push(textElem)}drawRing(x,y,s){let circleElem=document.createElementNS("http://www.w3.org/2000/svg","circle"),radius=MathHelper.apothemFromSideLength(this.opts.bondLength,s);circleElem.setAttributeNS(null,"cx",x+this.offsetX),circleElem.setAttributeNS(null,"cy",y+this.offsetY),circleElem.setAttributeNS(null,"r",radius-this.opts.bondSpacing),circleElem.setAttributeNS(null,"stroke",this.themeManager.getColor("C")),circleElem.setAttributeNS(null,"stroke-width",1.5*this.opts.bondThickness),circleElem.setAttributeNS(null,"fill","none"),this.paths.push(circleElem)}drawLine(line,dashed=!1,gradient=null){let opts=this.opts,stylesArr=[["stroke-width",this.opts.bondThickness],["stroke-linecap","round"],["stroke-dasharray",dashed?"5, 5":"none"]],l=line.getLeftVector(),r=line.getRightVector(),fromX=l.x+this.offsetX,fromY=l.y+this.offsetY,toX=r.x+this.offsetX,toY=r.y+this.offsetY,styles=stylesArr.map(sub=>sub.join(":")).join(";"),lineElem=document.createElementNS("http://www.w3.org/2000/svg","line");lineElem.setAttributeNS(null,"x1",fromX),lineElem.setAttributeNS(null,"y1",fromY),lineElem.setAttributeNS(null,"x2",toX),lineElem.setAttributeNS(null,"y2",toY),lineElem.setAttributeNS(null,"style",styles),this.paths.push(lineElem),null==gradient&&(gradient=this.createGradient(line,fromX,fromY,toX,toY)),lineElem.setAttributeNS(null,"stroke",`url('#${gradient}')`)}drawPoint(x,y,elementName){let ctx=this.ctx,offsetX=this.offsetX,offsetY=this.offsetY,mask=document.createElementNS("http://www.w3.org/2000/svg","circle");mask.setAttributeNS(null,"cx",x+offsetX),mask.setAttributeNS(null,"cy",y+offsetY),mask.setAttributeNS(null,"r","1.5"),mask.setAttributeNS(null,"fill","black"),this.maskElements.push(mask);let point=document.createElementNS("http://www.w3.org/2000/svg","circle");point.setAttributeNS(null,"cx",x+offsetX),point.setAttributeNS(null,"cy",y+offsetY),point.setAttributeNS(null,"r","0.75"),point.setAttributeNS(null,"fill",this.themeManager.getColor(elementName)),this.vertices.push(point)}drawText(x,y,elementName,hydrogens,direction,isTerminal,charge,isotope,attachedPseudoElement={}){let text=[],display=elementName;for(let key in 0!==charge&&null!==charge&&(display+=this.createUnicodeCharge(charge)),0!==isotope&&null!==isotope&&(display=this.createUnicodeSuperscript(isotope)+display),text.push([display,elementName]),1===hydrogens?text.push(["H","H"]):1<hydrogens&&text.push(["H"+this.createUnicodeSubscript(hydrogens),"H"]),1===charge&&"N"===elementName&&attachedPseudoElement.hasOwnProperty("0O")&&attachedPseudoElement.hasOwnProperty("0O-1")&&(attachedPseudoElement={"0O":{element:"O",count:2,hydrogenCount:0,previousElement:"C",charge:""}},charge=0),attachedPseudoElement){if(!attachedPseudoElement.hasOwnProperty(key))continue;let pe=attachedPseudoElement[key],display=pe.element;1<pe.count&&(display+=this.createUnicodeSubscript(pe.count)),""!==pe.charge&&(display+=this.createUnicodeCharge(charge)),text.push([pe.element,pe.element]),1===pe.hydrogenCount?text.push(["H","H"]):1<pe.hydrogenCount&&text.push(["H"+this.createUnicodeSubscript(pe.hydrogenCount),"H"])}this.write(text,direction,x,y)}drawWedge(line){let offsetX=this.offsetX,offsetY=this.offsetY,l=line.getLeftVector().clone(),r=line.getRightVector().clone();l.x+=offsetX,l.y+=offsetY,r.x+=offsetX,r.y+=offsetY;let normals=Vector2.normals(l,r);normals[0].normalize(),normals[1].normalize();let isRightChiralCenter=line.getRightChiral(),start=l,end=r;isRightChiralCenter&&(start=r,end=l);let t=Vector2.add(start,Vector2.multiplyScalar(normals[0],this.halfBondThickness)),u=Vector2.add(end,Vector2.multiplyScalar(normals[0],1.5+this.halfBondThickness)),v=Vector2.add(end,Vector2.multiplyScalar(normals[1],1.5+this.halfBondThickness)),w=Vector2.add(start,Vector2.multiplyScalar(normals[1],this.halfBondThickness)),polygon=document.createElementNS("http://www.w3.org/2000/svg","polygon"),gradient=this.createGradient(line,l.x,l.y,r.x,r.y);polygon.setAttributeNS(null,"points",`${t.x},${t.y} ${u.x},${u.y} ${v.x},${v.y} ${w.x},${w.y}`),polygon.setAttributeNS(null,"fill",`url('#${gradient}')`),this.paths.push(polygon)}write(text,direction,x,y){x+=this.offsetX,y+=this.offsetY;let cx=x,cy=y,bbox=this.measureText(text[0][1]);console.log(bbox);let textElem=document.createElementNS("http://www.w3.org/2000/svg","text");textElem.setAttributeNS(null,"class","element");let g=document.createElementNS("http://www.w3.org/2000/svg","g");textElem.setAttributeNS(null,"fill","#ffffff"),"left"===direction&&(text=text.reverse()),("right"===direction||"down"===direction||"up"===direction)&&(x-=bbox.width/2),"left"===direction&&(x+=bbox.width/2),text.forEach((part,i)=>{const display=part[0],elementName=part[1];let tspanElem=document.createElementNS("http://www.w3.org/2000/svg","tspan");tspanElem.setAttributeNS(null,"fill",this.themeManager.getColor(elementName)),tspanElem.textContent=display,("up"===direction||"down"===direction)&&(tspanElem.setAttributeNS(null,"x","0px"),"up"===direction?tspanElem.setAttributeNS(null,"y",`-${.9*i}em`):tspanElem.setAttributeNS(null,"y",`${.9*i}em`)),textElem.appendChild(tspanElem)}),textElem.setAttributeNS(null,"data-direction",direction),textElem.setAttributeNS(null,"dominant-baseline","central"),"left"===direction&&textElem.setAttributeNS(null,"text-anchor","end"),g.appendChild(textElem),g.setAttributeNS(null,"style",`transform: translateX(${x}px) translateY(${y}px)`);let maskRadius=3.5;1<text[0][1].length&&(maskRadius=5);let mask=document.createElementNS("http://www.w3.org/2000/svg","circle");mask.setAttributeNS(null,"cx",cx),mask.setAttributeNS(null,"cy",cy),mask.setAttributeNS(null,"r",maskRadius),mask.setAttributeNS(null,"fill","black");let point=document.createElementNS("http://www.w3.org/2000/svg","circle");point.setAttributeNS(null,"cx",cx),point.setAttributeNS(null,"cy",cy),point.setAttributeNS(null,"r",.5),point.setAttributeNS(null,"fill","red"),this.vertices.push(point),this.maskElements.push(mask),this.vertices.push(g)}measureText(text){const element=document.createElement("canvas"),ctx=element.getContext("2d");ctx.font=`${this.opts.fontSizeLarge}pt Helvetica, Arial, sans-serif`;let textMetrics=ctx.measureText(text);return console.log(textMetrics),{width:textMetrics.width,height:.9*(_Mathabs3(textMetrics.actualBoundingBoxAscent)+_Mathabs3(textMetrics.actualBoundingBoxAscent))}}toCanvas(canvas,width,height){("string"==typeof canvas||canvas instanceof String)&&(canvas=document.getElementById(canvas));let image=new Image;image.onload=function(){canvas.width=width,canvas.height=height,canvas.getContext("2d").drawImage(image,0,0,width,height)},image.src="data:image/svg+xml;charset-utf-8,"+encodeURIComponent(this.svg.outerHTML)}}},{"./Glyphs":8,"./Line":10,"./MathHelper":11,"./UtilityFunctions":23,"./Vector2":24}],22:[function(require,module){"use strict";module.exports=class{constructor(colors,theme){this.colors=colors,this.theme=this.colors[theme]}getColor(key){return key&&(key=key.toUpperCase(),key in this.theme)?this.theme[key]:this.theme.C}setTheme(theme){this.colors.hasOwnProperty(theme)&&(this.theme=this.colors[theme])}}},{}],23:[function(require,module){"use strict";module.exports={getChargeText:function(charge){return 1===charge?"+":2===charge?"2+":-1===charge?"-":-2===charge?"2-":""}}},{}],24:[function(require,module){"use strict";var _Mathacos=Math.acos,_Mathsin4=Math.sin,_Mathcos4=Math.cos,_Mathsqrt3=Math.sqrt;class Vector2{constructor(x,y){0==arguments.length?(this.x=0,this.y=0):1==arguments.length?(this.x=x.x,this.y=x.y):(this.x=x,this.y=y)}clone(){return new Vector2(this.x,this.y)}toString(){return"("+this.x+","+this.y+")"}add(vec){return this.x+=vec.x,this.y+=vec.y,this}subtract(vec){return this.x-=vec.x,this.y-=vec.y,this}divide(scalar){return this.x/=scalar,this.y/=scalar,this}multiply(v){return this.x*=v.x,this.y*=v.y,this}multiplyScalar(scalar){return this.x*=scalar,this.y*=scalar,this}invert(){return this.x=-this.x,this.y=-this.y,this}angle(){return Math.atan2(this.y,this.x)}distance(vec){return _Mathsqrt3((vec.x-this.x)*(vec.x-this.x)+(vec.y-this.y)*(vec.y-this.y))}distanceSq(vec){return(vec.x-this.x)*(vec.x-this.x)+(vec.y-this.y)*(vec.y-this.y)}clockwise(vec){let a=this.y*vec.x,b=this.x*vec.y;if(a>b)return-1;return a===b?0:1}relativeClockwise(center,vec){let a=(this.y-center.y)*(vec.x-center.x),b=(this.x-center.x)*(vec.y-center.y);if(a>b)return-1;return a===b?0:1}rotate(angle){let tmp=new Vector2(0,0),cosAngle=_Mathcos4(angle),sinAngle=_Mathsin4(angle);return tmp.x=this.x*cosAngle-this.y*sinAngle,tmp.y=this.x*sinAngle+this.y*cosAngle,this.x=tmp.x,this.y=tmp.y,this}rotateAround(angle,vec){let s=_Mathsin4(angle),c=_Mathcos4(angle);this.x-=vec.x,this.y-=vec.y;let x=this.x*c-this.y*s,y=this.x*s+this.y*c;return this.x=x+vec.x,this.y=y+vec.y,this}rotateTo(vec,center,offsetAngle=0){this.x+=.001,this.y-=.001;let a=Vector2.subtract(this,center),b=Vector2.subtract(vec,center),angle=Vector2.angle(b,a);return this.rotateAround(angle+offsetAngle,center),this}rotateAwayFrom(vec,center,angle){this.rotateAround(angle,center);let distSqA=this.distanceSq(vec);this.rotateAround(-2*angle,center);let distSqB=this.distanceSq(vec);distSqB<distSqA&&this.rotateAround(2*angle,center)}getRotateAwayFromAngle(vec,center,angle){let tmp=this.clone();tmp.rotateAround(angle,center);let distSqA=tmp.distanceSq(vec);tmp.rotateAround(-2*angle,center);let distSqB=tmp.distanceSq(vec);return distSqB<distSqA?angle:-angle}getRotateTowardsAngle(vec,center,angle){let tmp=this.clone();tmp.rotateAround(angle,center);let distSqA=tmp.distanceSq(vec);tmp.rotateAround(-2*angle,center);let distSqB=tmp.distanceSq(vec);return distSqB>distSqA?angle:-angle}getRotateToAngle(vec,center){let a=Vector2.subtract(this,center),b=Vector2.subtract(vec,center),angle=Vector2.angle(b,a);return Number.isNaN(angle)?0:angle}isInPolygon(polygon){let inside=!1;for(let i=0,j=polygon.length-1;i<polygon.length;j=i++)polygon[i].y>this.y!=polygon[j].y>this.y&&this.x<(polygon[j].x-polygon[i].x)*(this.y-polygon[i].y)/(polygon[j].y-polygon[i].y)+polygon[i].x&&(inside=!inside);return inside}length(){return _Mathsqrt3(this.x*this.x+this.y*this.y)}lengthSq(){return this.x*this.x+this.y*this.y}normalize(){return this.divide(this.length()),this}normalized(){return Vector2.divideScalar(this,this.length())}whichSide(vecA,vecB){return(this.x-vecA.x)*(vecB.y-vecA.y)-(this.y-vecA.y)*(vecB.x-vecA.x)}sameSideAs(vecA,vecB,vecC){let d=this.whichSide(vecA,vecB),dRef=vecC.whichSide(vecA,vecB);return 0>d&&0>dRef||0==d&&0==dRef||0<d&&0<dRef}static add(vecA,vecB){return new Vector2(vecA.x+vecB.x,vecA.y+vecB.y)}static subtract(vecA,vecB){return new Vector2(vecA.x-vecB.x,vecA.y-vecB.y)}static multiply(vecA,vecB){return new Vector2(vecA.x*vecB.x,vecA.y*vecB.y)}static multiplyScalar(vec,scalar){return new Vector2(vec.x,vec.y).multiplyScalar(scalar)}static midpoint(vecA,vecB){return new Vector2((vecA.x+vecB.x)/2,(vecA.y+vecB.y)/2)}static normals(vecA,vecB){let delta=Vector2.subtract(vecB,vecA);return[new Vector2(-delta.y,delta.x),new Vector2(delta.y,-delta.x)]}static units(vecA,vecB){let delta=Vector2.subtract(vecB,vecA);return[new Vector2(-delta.y,delta.x).normalize(),new Vector2(delta.y,-delta.x).normalize()]}static divide(vecA,vecB){return new Vector2(vecA.x/vecB.x,vecA.y/vecB.y)}static divideScalar(vecA,s){return new Vector2(vecA.x/s,vecA.y/s)}static dot(vecA,vecB){return vecA.x*vecB.x+vecA.y*vecB.y}static angle(vecA,vecB){let dot=Vector2.dot(vecA,vecB);return _Mathacos(dot/(vecA.length()*vecB.length()))}static threePointangle(vecA,vecB,vecC){let ab=Vector2.subtract(vecB,vecA),bc=Vector2.subtract(vecC,vecB),abLength=vecA.distance(vecB),bcLength=vecB.distance(vecC);return _Mathacos(Vector2.dot(ab,bc)/(abLength*bcLength))}static scalarProjection(vecA,vecB){let unit=vecB.normalized();return Vector2.dot(vecA,unit)}static averageDirection(vecs){let avg=new Vector2(0,0);for(var i=0;i<vecs.length;i++){let vec=vecs[i];avg.add(vec)}return avg.normalize()}}module.exports=Vector2},{}],25:[function(require,module){"use strict";var _Mathround2=Math.round,_MathPI4=Math.PI;const MathHelper=require("./MathHelper"),ArrayHelper=require("./ArrayHelper"),Vector2=require("./Vector2"),Atom=require("./Atom");class Vertex{constructor(value,x=0,y=0){this.id=null,this.value=value,this.position=new Vector2(x?x:0,y?y:0),this.previousPosition=new Vector2(0,0),this.parentVertexId=null,this.children=[],this.spanningTreeChildren=[],this.edges=[],this.positioned=!1,this.angle=null,this.dir=1,this.neighbourCount=0,this.neighbours=[],this.neighbouringElements=[],this.forcePositioned=!1}setPosition(x,y){this.position.x=x,this.position.y=y}setPositionFromVector(v){this.position.x=v.x,this.position.y=v.y}addChild(vertexId){this.children.push(vertexId),this.neighbours.push(vertexId),this.neighbourCount++}addRingbondChild(vertexId,ringbondIndex){if(this.children.push(vertexId),this.value.bracket){let index=1;0===this.id&&0===this.value.bracket.hcount&&(index=0),1===this.value.bracket.hcount&&0===ringbondIndex&&(index=2),1===this.value.bracket.hcount&&1===ringbondIndex&&(3>this.neighbours.length?index=2:index=3),null===this.value.bracket.hcount&&0===ringbondIndex&&(index=1),null===this.value.bracket.hcount&&1===ringbondIndex&&(3>this.neighbours.length?index=1:index=2),this.neighbours.splice(index,0,vertexId)}else this.neighbours.push(vertexId);this.neighbourCount++}setParentVertexId(parentVertexId){this.neighbourCount++,this.parentVertexId=parentVertexId,this.neighbours.push(parentVertexId)}isTerminal(){return!!this.value.hasAttachedPseudoElements||null===this.parentVertexId&&2>this.children.length||0===this.children.length}clone(){let clone=new Vertex(this.value,this.position.x,this.position.y);return clone.id=this.id,clone.previousPosition=new Vector2(this.previousPosition.x,this.previousPosition.y),clone.parentVertexId=this.parentVertexId,clone.children=ArrayHelper.clone(this.children),clone.spanningTreeChildren=ArrayHelper.clone(this.spanningTreeChildren),clone.edges=ArrayHelper.clone(this.edges),clone.positioned=this.positioned,clone.angle=this.angle,clone.forcePositioned=this.forcePositioned,clone}equals(vertex){return this.id===vertex.id}getAngle(referenceVector=null,returnAsDegrees=!1){let u=null;return u=referenceVector?Vector2.subtract(this.position,referenceVector):Vector2.subtract(this.position,this.previousPosition),returnAsDegrees?MathHelper.toDeg(u.angle()):u.angle()}getTextDirection(vertices){let neighbours=this.getDrawnNeighbours(vertices),angles=[];for(let i=0;i<neighbours.length;i++)angles.push(this.getAngle(vertices[neighbours[i]].position));let textAngle=MathHelper.meanAngle(angles),halfPi=_MathPI4/2;return textAngle=_Mathround2(_Mathround2(textAngle/halfPi)*halfPi),2===textAngle?"down":-2===textAngle?"up":0===textAngle||-0===textAngle?"right":3===textAngle||-3===textAngle?"left":"down"}getNeighbours(vertexId=null){if(null===vertexId)return this.neighbours.slice();let arr=[];for(let i=0;i<this.neighbours.length;i++)this.neighbours[i]!==vertexId&&arr.push(this.neighbours[i]);return arr}getDrawnNeighbours(vertices){let arr=[];for(let i=0;i<this.neighbours.length;i++)vertices[this.neighbours[i]].value.isDrawn&&arr.push(this.neighbours[i]);return arr}getNeighbourCount(){return this.neighbourCount}getSpanningTreeNeighbours(vertexId=null){let neighbours=[];for(let i=0;i<this.spanningTreeChildren.length;i++)(void 0===vertexId||vertexId!=this.spanningTreeChildren[i])&&neighbours.push(this.spanningTreeChildren[i]);return null!=this.parentVertexId&&(void 0===vertexId||vertexId!=this.parentVertexId)&&neighbours.push(this.parentVertexId),neighbours}getNextInRing(vertices,ringId,previousVertexId){let neighbours=this.getNeighbours();for(let i=0;i<neighbours.length;i++)if(ArrayHelper.contains(vertices[neighbours[i]].value.rings,{value:ringId})&&neighbours[i]!=previousVertexId)return neighbours[i];return null}}module.exports=Vertex},{"./ArrayHelper":2,"./Atom":3,"./MathHelper":11,"./Vector2":24}]},{},[1]);
//# sourceMappingURL=smiles-drawer.min.js.map
